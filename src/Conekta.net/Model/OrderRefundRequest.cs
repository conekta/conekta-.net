/*
 * Conekta API
 *
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Conekta.net.Client.OpenAPIDateConverter;

namespace Conekta.net.Model
{
    /// <summary>
    /// OrderRefundRequest
    /// </summary>
    [DataContract(Name = "orderRefund_request")]
    public partial class OrderRefundRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderRefundRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderRefundRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderRefundRequest" /> class.
        /// </summary>
        /// <param name="amount">Amount to be refunded in cents (required).</param>
        /// <param name="expiresAt">expiresAt.</param>
        /// <param name="reason">Reason for the refund (required).</param>
        public OrderRefundRequest(int amount = default(int), long? expiresAt = default(long?), string reason = default(string))
        {
            this.Amount = amount;
            // to ensure "reason" is required (not null)
            if (reason == null)
            {
                throw new ArgumentNullException("reason is a required property for OrderRefundRequest and cannot be null");
            }
            this.Reason = reason;
            this.ExpiresAt = expiresAt;
        }

        /// <summary>
        /// Amount to be refunded in cents
        /// </summary>
        /// <value>Amount to be refunded in cents</value>
        /*
        <example>500</example>
        */
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = true)]
        public int Amount { get; set; }

        /// <summary>
        /// Gets or Sets ExpiresAt
        /// </summary>
        /*
        <example>1553273553</example>
        */
        [DataMember(Name = "expires_at", EmitDefaultValue = true)]
        public long? ExpiresAt { get; set; }

        /// <summary>
        /// Reason for the refund
        /// </summary>
        /// <value>Reason for the refund</value>
        /*
        <example>suspected_fraud</example>
        */
        [DataMember(Name = "reason", IsRequired = true, EmitDefaultValue = true)]
        public string Reason { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderRefundRequest {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
