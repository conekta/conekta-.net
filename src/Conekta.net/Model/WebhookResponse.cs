/*
 * Conekta API
 *
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.2.0
 * Contact: engineering@conekta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Conekta.net.Client.OpenAPIDateConverter;

namespace Conekta.net.Model
{
    /// <summary>
    /// webhooks model
    /// </summary>
    [DataContract(Name = "webhook_response")]
    public partial class WebhookResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookResponse" /> class.
        /// </summary>
        /// <param name="id">id of the webhook.</param>
        /// <param name="description">A name or brief explanation of what this webhook is used for.</param>
        /// <param name="livemode">Indicates if the webhook is in production.</param>
        /// <param name="active">Indicates if the webhook is actived or not.</param>
        /// <param name="varObject">Object name, value is &#39;webhook&#39;.</param>
        /// <param name="status">Indicates if the webhook is ready to receive events or failing.</param>
        /// <param name="subscribedEvents">lists the events that will be sent to the webhook.</param>
        /// <param name="url">url or endpoint of the webhook.</param>
        public WebhookResponse(string id = default(string), string description = default(string), bool livemode = default(bool), bool active = default(bool), string varObject = default(string), string status = default(string), List<string> subscribedEvents = default(List<string>), string url = default(string))
        {
            this.Id = id;
            this.Description = description;
            this.Livemode = livemode;
            this.Active = active;
            this.Object = varObject;
            this.Status = status;
            this.SubscribedEvents = subscribedEvents;
            this.Url = url;
        }

        /// <summary>
        /// id of the webhook
        /// </summary>
        /// <value>id of the webhook</value>
        /*
        <example>6307a60c41de27127515a575</example>
        */
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// A name or brief explanation of what this webhook is used for
        /// </summary>
        /// <value>A name or brief explanation of what this webhook is used for</value>
        /*
        <example>Server payments processor</example>
        */
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Indicates if the webhook is in production
        /// </summary>
        /// <value>Indicates if the webhook is in production</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "livemode", EmitDefaultValue = true)]
        public bool Livemode { get; set; }

        /// <summary>
        /// Indicates if the webhook is actived or not
        /// </summary>
        /// <value>Indicates if the webhook is actived or not</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "active", EmitDefaultValue = true)]
        public bool Active { get; set; }

        /// <summary>
        /// Object name, value is &#39;webhook&#39;
        /// </summary>
        /// <value>Object name, value is &#39;webhook&#39;</value>
        /*
        <example>event</example>
        */
        [DataMember(Name = "object", EmitDefaultValue = false)]
        public string Object { get; set; }

        /// <summary>
        /// Indicates if the webhook is ready to receive events or failing
        /// </summary>
        /// <value>Indicates if the webhook is ready to receive events or failing</value>
        /*
        <example>listening</example>
        */
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// lists the events that will be sent to the webhook
        /// </summary>
        /// <value>lists the events that will be sent to the webhook</value>
        /*
        <example>[&quot;charge.created&quot;,&quot;charge.paid&quot;,&quot;charge.under_fraud_review&quot;,&quot;charge.fraudulent&quot;,&quot;charge.refunded&quot;,&quot;charge.preauthorized&quot;,&quot;charge.declined&quot;,&quot;charge.canceled&quot;,&quot;charge.reversed&quot;,&quot;charge.pending_confirmation&quot;]</example>
        */
        [DataMember(Name = "subscribed_events", EmitDefaultValue = false)]
        public List<string> SubscribedEvents { get; set; }

        /// <summary>
        /// url or endpoint of the webhook
        /// </summary>
        /// <value>url or endpoint of the webhook</value>
        /*
        <example>https://username:password@mockoon.conekta.io/payments-api/cash/merchant_approval</example>
        */
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebhookResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Livemode: ").Append(Livemode).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  SubscribedEvents: ").Append(SubscribedEvents).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
