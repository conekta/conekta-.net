/*
 * Conekta API
 *
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Conekta.net.Client.OpenAPIDateConverter;

namespace Conekta.net.Model
{
    /// <summary>
    /// webhooks model
    /// </summary>
    [DataContract(Name = "webhook_response")]
    public partial class WebhookResponse : IEquatable<WebhookResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookResponse" /> class.
        /// </summary>
        /// <param name="deleted">deleted.</param>
        /// <param name="developmentEnabled">developmentEnabled.</param>
        /// <param name="id">id.</param>
        /// <param name="livemode">livemode.</param>
        /// <param name="varObject">varObject.</param>
        /// <param name="productionEnabled">productionEnabled.</param>
        /// <param name="status">status.</param>
        /// <param name="subscribedEvents">subscribedEvents.</param>
        /// <param name="synchronous">synchronous.</param>
        /// <param name="url">url.</param>
        public WebhookResponse(bool? deleted = default(bool?), bool developmentEnabled = default(bool), string id = default(string), bool livemode = default(bool), string varObject = default(string), bool productionEnabled = default(bool), string status = default(string), List<string> subscribedEvents = default(List<string>), bool synchronous = default(bool), string url = default(string))
        {
            this.Deleted = deleted;
            this.DevelopmentEnabled = developmentEnabled;
            this.Id = id;
            this.Livemode = livemode;
            this.VarObject = varObject;
            this.ProductionEnabled = productionEnabled;
            this.Status = status;
            this.SubscribedEvents = subscribedEvents;
            this.Synchronous = synchronous;
            this.Url = url;
        }

        /// <summary>
        /// Gets or Sets Deleted
        /// </summary>
        /// <example>false</example>
        [DataMember(Name = "deleted", EmitDefaultValue = true)]
        public bool? Deleted { get; set; }

        /// <summary>
        /// Gets or Sets DevelopmentEnabled
        /// </summary>
        /// <example>false</example>
        [DataMember(Name = "development_enabled", EmitDefaultValue = true)]
        public bool DevelopmentEnabled { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        /// <example>6307a60c41de27127515a575</example>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Livemode
        /// </summary>
        /// <example>true</example>
        [DataMember(Name = "livemode", EmitDefaultValue = true)]
        public bool Livemode { get; set; }

        /// <summary>
        /// Gets or Sets VarObject
        /// </summary>
        /// <example>event</example>
        [DataMember(Name = "object", EmitDefaultValue = false)]
        public string VarObject { get; set; }

        /// <summary>
        /// Gets or Sets ProductionEnabled
        /// </summary>
        /// <example>true</example>
        [DataMember(Name = "production_enabled", EmitDefaultValue = true)]
        public bool ProductionEnabled { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        /// <example>listening</example>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets SubscribedEvents
        /// </summary>
        /// <example>[&quot;charge.created&quot;,&quot;charge.paid&quot;,&quot;charge.under_fraud_review&quot;,&quot;charge.fraudulent&quot;,&quot;charge.refunded&quot;,&quot;charge.preauthorized&quot;,&quot;charge.declined&quot;,&quot;charge.canceled&quot;,&quot;charge.reversed&quot;,&quot;charge.pending_confirmation&quot;]</example>
        [DataMember(Name = "subscribed_events", EmitDefaultValue = false)]
        public List<string> SubscribedEvents { get; set; }

        /// <summary>
        /// Gets or Sets Synchronous
        /// </summary>
        /// <example>false</example>
        [DataMember(Name = "synchronous", EmitDefaultValue = true)]
        public bool Synchronous { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        /// <example>https://username:password@mockoon.stg.conekta.io/payments-api/cash/merchant_approval</example>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebhookResponse {\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("  DevelopmentEnabled: ").Append(DevelopmentEnabled).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Livemode: ").Append(Livemode).Append("\n");
            sb.Append("  VarObject: ").Append(VarObject).Append("\n");
            sb.Append("  ProductionEnabled: ").Append(ProductionEnabled).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  SubscribedEvents: ").Append(SubscribedEvents).Append("\n");
            sb.Append("  Synchronous: ").Append(Synchronous).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WebhookResponse);
        }

        /// <summary>
        /// Returns true if WebhookResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of WebhookResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebhookResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Deleted == input.Deleted ||
                    (this.Deleted != null &&
                    this.Deleted.Equals(input.Deleted))
                ) && 
                (
                    this.DevelopmentEnabled == input.DevelopmentEnabled ||
                    this.DevelopmentEnabled.Equals(input.DevelopmentEnabled)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Livemode == input.Livemode ||
                    this.Livemode.Equals(input.Livemode)
                ) && 
                (
                    this.VarObject == input.VarObject ||
                    (this.VarObject != null &&
                    this.VarObject.Equals(input.VarObject))
                ) && 
                (
                    this.ProductionEnabled == input.ProductionEnabled ||
                    this.ProductionEnabled.Equals(input.ProductionEnabled)
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.SubscribedEvents == input.SubscribedEvents ||
                    this.SubscribedEvents != null &&
                    input.SubscribedEvents != null &&
                    this.SubscribedEvents.SequenceEqual(input.SubscribedEvents)
                ) && 
                (
                    this.Synchronous == input.Synchronous ||
                    this.Synchronous.Equals(input.Synchronous)
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Deleted != null)
                {
                    hashCode = (hashCode * 59) + this.Deleted.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DevelopmentEnabled.GetHashCode();
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Livemode.GetHashCode();
                if (this.VarObject != null)
                {
                    hashCode = (hashCode * 59) + this.VarObject.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ProductionEnabled.GetHashCode();
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.SubscribedEvents != null)
                {
                    hashCode = (hashCode * 59) + this.SubscribedEvents.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Synchronous.GetHashCode();
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
