/*
 * Conekta API
 *
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Conekta.net.Client.OpenAPIDateConverter;
using System.Reflection;

namespace Conekta.net.Model
{
    /// <summary>
    /// GetCustomerPaymentSourcesDataResponse
    /// </summary>
    [JsonConverter(typeof(GetCustomerPaymentSourcesDataResponseJsonConverter))]
    [DataContract(Name = "get_customer_payment_sources_data_response")]
    public partial class GetCustomerPaymentSourcesDataResponse : AbstractOpenAPISchema, IEquatable<GetCustomerPaymentSourcesDataResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCustomerPaymentSourcesDataResponse" /> class
        /// with the <see cref="PaymentSourceCash" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of PaymentSourceCash.</param>
        public GetCustomerPaymentSourcesDataResponse(PaymentSourceCash actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetCustomerPaymentSourcesDataResponse" /> class
        /// with the <see cref="PaymentSourceCard" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of PaymentSourceCard.</param>
        public GetCustomerPaymentSourcesDataResponse(PaymentSourceCard actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetCustomerPaymentSourcesDataResponse" /> class
        /// with the <see cref="PaymentSourceSpeiRecurrent" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of PaymentSourceSpeiRecurrent.</param>
        public GetCustomerPaymentSourcesDataResponse(PaymentSourceSpeiRecurrent actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(PaymentSourceCard))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(PaymentSourceCash))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(PaymentSourceSpeiRecurrent))
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: PaymentSourceCard, PaymentSourceCash, PaymentSourceSpeiRecurrent");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `PaymentSourceCash`. If the actual instance is not `PaymentSourceCash`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of PaymentSourceCash</returns>
        public PaymentSourceCash GetPaymentSourceCash()
        {
            return (PaymentSourceCash)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `PaymentSourceCard`. If the actual instance is not `PaymentSourceCard`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of PaymentSourceCard</returns>
        public PaymentSourceCard GetPaymentSourceCard()
        {
            return (PaymentSourceCard)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `PaymentSourceSpeiRecurrent`. If the actual instance is not `PaymentSourceSpeiRecurrent`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of PaymentSourceSpeiRecurrent</returns>
        public PaymentSourceSpeiRecurrent GetPaymentSourceSpeiRecurrent()
        {
            return (PaymentSourceSpeiRecurrent)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetCustomerPaymentSourcesDataResponse {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, GetCustomerPaymentSourcesDataResponse.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of GetCustomerPaymentSourcesDataResponse
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of GetCustomerPaymentSourcesDataResponse</returns>
        public static GetCustomerPaymentSourcesDataResponse FromJson(string jsonString)
        {
            GetCustomerPaymentSourcesDataResponse newGetCustomerPaymentSourcesDataResponse = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newGetCustomerPaymentSourcesDataResponse;
            }

            try
            {
                var discriminatorObj = JObject.Parse(jsonString)["type"];
                string discriminatorValue =  discriminatorObj == null ?string.Empty :discriminatorObj.ToString();
                switch (discriminatorValue)
                {
                    case "card":
                        newGetCustomerPaymentSourcesDataResponse = new GetCustomerPaymentSourcesDataResponse(JsonConvert.DeserializeObject<PaymentSourceCard>(jsonString, GetCustomerPaymentSourcesDataResponse.AdditionalPropertiesSerializerSettings));
                        return newGetCustomerPaymentSourcesDataResponse;
                    case "cash":
                        newGetCustomerPaymentSourcesDataResponse = new GetCustomerPaymentSourcesDataResponse(JsonConvert.DeserializeObject<PaymentSourceCash>(jsonString, GetCustomerPaymentSourcesDataResponse.AdditionalPropertiesSerializerSettings));
                        return newGetCustomerPaymentSourcesDataResponse;
                    case "oxxo_recurrent":
                        newGetCustomerPaymentSourcesDataResponse = new GetCustomerPaymentSourcesDataResponse(JsonConvert.DeserializeObject<PaymentSourceCash>(jsonString, GetCustomerPaymentSourcesDataResponse.AdditionalPropertiesSerializerSettings));
                        return newGetCustomerPaymentSourcesDataResponse;
                    case "payment_source_card":
                        newGetCustomerPaymentSourcesDataResponse = new GetCustomerPaymentSourcesDataResponse(JsonConvert.DeserializeObject<PaymentSourceCard>(jsonString, GetCustomerPaymentSourcesDataResponse.AdditionalPropertiesSerializerSettings));
                        return newGetCustomerPaymentSourcesDataResponse;
                    case "payment_source_cash":
                        newGetCustomerPaymentSourcesDataResponse = new GetCustomerPaymentSourcesDataResponse(JsonConvert.DeserializeObject<PaymentSourceCash>(jsonString, GetCustomerPaymentSourcesDataResponse.AdditionalPropertiesSerializerSettings));
                        return newGetCustomerPaymentSourcesDataResponse;
                    case "payment_source_spei_recurrent":
                        newGetCustomerPaymentSourcesDataResponse = new GetCustomerPaymentSourcesDataResponse(JsonConvert.DeserializeObject<PaymentSourceSpeiRecurrent>(jsonString, GetCustomerPaymentSourcesDataResponse.AdditionalPropertiesSerializerSettings));
                        return newGetCustomerPaymentSourcesDataResponse;
                    case "spei_recurrent":
                        newGetCustomerPaymentSourcesDataResponse = new GetCustomerPaymentSourcesDataResponse(JsonConvert.DeserializeObject<PaymentSourceSpeiRecurrent>(jsonString, GetCustomerPaymentSourcesDataResponse.AdditionalPropertiesSerializerSettings));
                        return newGetCustomerPaymentSourcesDataResponse;
                    default:
                        System.Diagnostics.Debug.WriteLine(string.Format("Failed to lookup discriminator value `{0}` for GetCustomerPaymentSourcesDataResponse. Possible values: card cash oxxo_recurrent payment_source_card payment_source_cash payment_source_spei_recurrent spei_recurrent", discriminatorValue));
                        break;
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to parse the json data : `{0}` {1}", jsonString, ex.ToString()));
            }

            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(PaymentSourceCard).GetProperty("AdditionalProperties") == null)
                {
                    newGetCustomerPaymentSourcesDataResponse = new GetCustomerPaymentSourcesDataResponse(JsonConvert.DeserializeObject<PaymentSourceCard>(jsonString, GetCustomerPaymentSourcesDataResponse.SerializerSettings));
                }
                else
                {
                    newGetCustomerPaymentSourcesDataResponse = new GetCustomerPaymentSourcesDataResponse(JsonConvert.DeserializeObject<PaymentSourceCard>(jsonString, GetCustomerPaymentSourcesDataResponse.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("PaymentSourceCard");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into PaymentSourceCard: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(PaymentSourceCash).GetProperty("AdditionalProperties") == null)
                {
                    newGetCustomerPaymentSourcesDataResponse = new GetCustomerPaymentSourcesDataResponse(JsonConvert.DeserializeObject<PaymentSourceCash>(jsonString, GetCustomerPaymentSourcesDataResponse.SerializerSettings));
                }
                else
                {
                    newGetCustomerPaymentSourcesDataResponse = new GetCustomerPaymentSourcesDataResponse(JsonConvert.DeserializeObject<PaymentSourceCash>(jsonString, GetCustomerPaymentSourcesDataResponse.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("PaymentSourceCash");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into PaymentSourceCash: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(PaymentSourceSpeiRecurrent).GetProperty("AdditionalProperties") == null)
                {
                    newGetCustomerPaymentSourcesDataResponse = new GetCustomerPaymentSourcesDataResponse(JsonConvert.DeserializeObject<PaymentSourceSpeiRecurrent>(jsonString, GetCustomerPaymentSourcesDataResponse.SerializerSettings));
                }
                else
                {
                    newGetCustomerPaymentSourcesDataResponse = new GetCustomerPaymentSourcesDataResponse(JsonConvert.DeserializeObject<PaymentSourceSpeiRecurrent>(jsonString, GetCustomerPaymentSourcesDataResponse.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("PaymentSourceSpeiRecurrent");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into PaymentSourceSpeiRecurrent: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + matchedTypes);
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newGetCustomerPaymentSourcesDataResponse;
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetCustomerPaymentSourcesDataResponse);
        }

        /// <summary>
        /// Returns true if GetCustomerPaymentSourcesDataResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetCustomerPaymentSourcesDataResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetCustomerPaymentSourcesDataResponse input)
        {
            if (input == null)
                return false;

            return this.ActualInstance.Equals(input.ActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualInstance != null)
                    hashCode = hashCode * 59 + this.ActualInstance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for GetCustomerPaymentSourcesDataResponse
    /// </summary>
    public class GetCustomerPaymentSourcesDataResponseJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(GetCustomerPaymentSourcesDataResponse).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType != JsonToken.Null)
            {
                return GetCustomerPaymentSourcesDataResponse.FromJson(JObject.Load(reader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
