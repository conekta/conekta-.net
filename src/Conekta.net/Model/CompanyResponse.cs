/*
 * Conekta API
 *
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.2.0
 * Contact: engineering@conekta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Conekta.net.Client.OpenAPIDateConverter;

namespace Conekta.net.Model
{
    /// <summary>
    /// CompanyResponse
    /// </summary>
    [DataContract(Name = "company_response")]
    public partial class CompanyResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CompanyResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyResponse" /> class.
        /// </summary>
        /// <param name="id">The unique identifier for the company. (required).</param>
        /// <param name="name">The name of the company. (required).</param>
        /// <param name="active">Indicates if the company is active. (required).</param>
        /// <param name="accountStatus">The current status of the company&#39;s account. (required).</param>
        /// <param name="parentCompanyId">The identifier of the parent company, if any..</param>
        /// <param name="onboardingStatus">The current status of the company&#39;s onboarding process. (required).</param>
        /// <param name="documents">A list of documents related to the company. (required).</param>
        /// <param name="createdAt">Timestamp of when the company was created. (required).</param>
        /// <param name="varObject">The type of object, typically \&quot;company\&quot;. (required).</param>
        public CompanyResponse(string id = default(string), string name = default(string), bool active = default(bool), string accountStatus = default(string), string parentCompanyId = default(string), string onboardingStatus = default(string), List<CompanyResponseDocumentsInner> documents = default(List<CompanyResponseDocumentsInner>), long createdAt = default(long), string varObject = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for CompanyResponse and cannot be null");
            }
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for CompanyResponse and cannot be null");
            }
            this.Name = name;
            this.Active = active;
            // to ensure "accountStatus" is required (not null)
            if (accountStatus == null)
            {
                throw new ArgumentNullException("accountStatus is a required property for CompanyResponse and cannot be null");
            }
            this.AccountStatus = accountStatus;
            // to ensure "onboardingStatus" is required (not null)
            if (onboardingStatus == null)
            {
                throw new ArgumentNullException("onboardingStatus is a required property for CompanyResponse and cannot be null");
            }
            this.OnboardingStatus = onboardingStatus;
            // to ensure "documents" is required (not null)
            if (documents == null)
            {
                throw new ArgumentNullException("documents is a required property for CompanyResponse and cannot be null");
            }
            this.Documents = documents;
            this.CreatedAt = createdAt;
            // to ensure "varObject" is required (not null)
            if (varObject == null)
            {
                throw new ArgumentNullException("varObject is a required property for CompanyResponse and cannot be null");
            }
            this.Object = varObject;
            this.ParentCompanyId = parentCompanyId;
        }

        /// <summary>
        /// The unique identifier for the company.
        /// </summary>
        /// <value>The unique identifier for the company.</value>
        /*
        <example>6827305a1ec60400015eb116</example>
        */
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the company.
        /// </summary>
        /// <value>The name of the company.</value>
        /*
        <example>test</example>
        */
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Indicates if the company is active.
        /// </summary>
        /// <value>Indicates if the company is active.</value>
        /*
        <example>false</example>
        */
        [DataMember(Name = "active", IsRequired = true, EmitDefaultValue = true)]
        public bool Active { get; set; }

        /// <summary>
        /// The current status of the company&#39;s account.
        /// </summary>
        /// <value>The current status of the company&#39;s account.</value>
        /*
        <example>signed_up</example>
        */
        [DataMember(Name = "account_status", IsRequired = true, EmitDefaultValue = true)]
        public string AccountStatus { get; set; }

        /// <summary>
        /// The identifier of the parent company, if any.
        /// </summary>
        /// <value>The identifier of the parent company, if any.</value>
        /*
        <example>680bf1da38716d00013543bc</example>
        */
        [DataMember(Name = "parent_company_id", EmitDefaultValue = true)]
        public string ParentCompanyId { get; set; }

        /// <summary>
        /// The current status of the company&#39;s onboarding process.
        /// </summary>
        /// <value>The current status of the company&#39;s onboarding process.</value>
        /*
        <example>pending</example>
        */
        [DataMember(Name = "onboarding_status", IsRequired = true, EmitDefaultValue = true)]
        public string OnboardingStatus { get; set; }

        /// <summary>
        /// A list of documents related to the company.
        /// </summary>
        /// <value>A list of documents related to the company.</value>
        [DataMember(Name = "documents", IsRequired = true, EmitDefaultValue = true)]
        public List<CompanyResponseDocumentsInner> Documents { get; set; }

        /// <summary>
        /// Timestamp of when the company was created.
        /// </summary>
        /// <value>Timestamp of when the company was created.</value>
        /*
        <example>1748968241</example>
        */
        [DataMember(Name = "created_at", IsRequired = true, EmitDefaultValue = true)]
        public long CreatedAt { get; set; }

        /// <summary>
        /// The type of object, typically \&quot;company\&quot;.
        /// </summary>
        /// <value>The type of object, typically \&quot;company\&quot;.</value>
        /*
        <example>company</example>
        */
        [DataMember(Name = "object", IsRequired = true, EmitDefaultValue = true)]
        public string Object { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CompanyResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  AccountStatus: ").Append(AccountStatus).Append("\n");
            sb.Append("  ParentCompanyId: ").Append(ParentCompanyId).Append("\n");
            sb.Append("  OnboardingStatus: ").Append(OnboardingStatus).Append("\n");
            sb.Append("  Documents: ").Append(Documents).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
