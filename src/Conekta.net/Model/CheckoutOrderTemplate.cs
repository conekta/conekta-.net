/*
 * Conekta API
 *
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.2.0
 * Contact: engineering@conekta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Conekta.net.Client.OpenAPIDateConverter;

namespace Conekta.net.Model
{
    /// <summary>
    /// It maintains the attributes with which the order will be created when receiving a new payment.
    /// </summary>
    [DataContract(Name = "checkout_order_template")]
    public partial class CheckoutOrderTemplate : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutOrderTemplate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CheckoutOrderTemplate() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutOrderTemplate" /> class.
        /// </summary>
        /// <param name="currency">It is the currency in which the order will be created. It must be a valid ISO 4217 currency code. (required).</param>
        /// <param name="customerInfo">customerInfo.</param>
        /// <param name="lineItems">They are the products to buy. Each contains the \&quot;unit price\&quot; and \&quot;quantity\&quot; parameters that are used to calculate the total amount of the order. (required).</param>
        /// <param name="planIds">It is a list of plan IDs that will be associated with the order..</param>
        /// <param name="metadata">It is a set of key-value pairs that you can attach to the order. It can be used to store additional information about the order in a structured format..</param>
        public CheckoutOrderTemplate(string currency = default(string), CheckoutOrderTemplateCustomerInfo customerInfo = default(CheckoutOrderTemplateCustomerInfo), List<Product> lineItems = default(List<Product>), List<string> planIds = default(List<string>), Dictionary<string, Object> metadata = default(Dictionary<string, Object>))
        {
            // to ensure "currency" is required (not null)
            if (currency == null)
            {
                throw new ArgumentNullException("currency is a required property for CheckoutOrderTemplate and cannot be null");
            }
            this.Currency = currency;
            // to ensure "lineItems" is required (not null)
            if (lineItems == null)
            {
                throw new ArgumentNullException("lineItems is a required property for CheckoutOrderTemplate and cannot be null");
            }
            this.LineItems = lineItems;
            this.CustomerInfo = customerInfo;
            this.PlanIds = planIds;
            this.Metadata = metadata;
        }

        /// <summary>
        /// It is the currency in which the order will be created. It must be a valid ISO 4217 currency code.
        /// </summary>
        /// <value>It is the currency in which the order will be created. It must be a valid ISO 4217 currency code.</value>
        /*
        <example>MXN</example>
        */
        [DataMember(Name = "currency", IsRequired = true, EmitDefaultValue = true)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets CustomerInfo
        /// </summary>
        [DataMember(Name = "customer_info", EmitDefaultValue = false)]
        public CheckoutOrderTemplateCustomerInfo CustomerInfo { get; set; }

        /// <summary>
        /// They are the products to buy. Each contains the \&quot;unit price\&quot; and \&quot;quantity\&quot; parameters that are used to calculate the total amount of the order.
        /// </summary>
        /// <value>They are the products to buy. Each contains the \&quot;unit price\&quot; and \&quot;quantity\&quot; parameters that are used to calculate the total amount of the order.</value>
        [DataMember(Name = "line_items", IsRequired = true, EmitDefaultValue = true)]
        public List<Product> LineItems { get; set; }

        /// <summary>
        /// It is a list of plan IDs that will be associated with the order.
        /// </summary>
        /// <value>It is a list of plan IDs that will be associated with the order.</value>
        /*
        <example>[&quot;plan_123&quot;,&quot;plan_456&quot;]</example>
        */
        [DataMember(Name = "plan_ids", EmitDefaultValue = false)]
        public List<string> PlanIds { get; set; }

        /// <summary>
        /// It is a set of key-value pairs that you can attach to the order. It can be used to store additional information about the order in a structured format.
        /// </summary>
        /// <value>It is a set of key-value pairs that you can attach to the order. It can be used to store additional information about the order in a structured format.</value>
        /*
        <example>{&quot;key&quot;:&quot;value&quot;}</example>
        */
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public Dictionary<string, Object> Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CheckoutOrderTemplate {\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  CustomerInfo: ").Append(CustomerInfo).Append("\n");
            sb.Append("  LineItems: ").Append(LineItems).Append("\n");
            sb.Append("  PlanIds: ").Append(PlanIds).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Currency (string) maxLength
            if (this.Currency != null && this.Currency.Length > 3)
            {
                yield return new ValidationResult("Invalid value for Currency, length must be less than 3.", new [] { "Currency" });
            }

            yield break;
        }
    }

}
