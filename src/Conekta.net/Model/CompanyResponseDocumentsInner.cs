/*
 * Conekta API
 *
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.2.0
 * Contact: engineering@conekta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Conekta.net.Client.OpenAPIDateConverter;

namespace Conekta.net.Model
{
    /// <summary>
    /// CompanyResponseDocumentsInner
    /// </summary>
    [DataContract(Name = "company_response_documents_inner")]
    public partial class CompanyResponseDocumentsInner : IValidatableObject
    {
        /// <summary>
        /// Classification of the document.  | Tipo de archivo              | Descripción                                               | | :- -- -- -- -- -- -- -- -- -- -- -- -- -- | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | | &#x60;id_legal_representative&#x60;      | identificación oficial frente                             | | &#x60;id_legal_representative_back&#x60; | identificación oficial atrás                              | | &#x60;cfdi&#x60;                         | Prueba de situación fiscal                                | | &#x60;constitutive_act_basic&#x60;       | Acta constitutiva                                         | | &#x60;proof_of_address&#x60;             | Comprobante de domicilio del negocio                      | | &#x60;power_of_attonery&#x60;            | Poderes de representación                                 | | &#x60;deposit_account_cover&#x60;        | Carátula de la cuenta de depósito                         | | &#x60;permit_casino&#x60;                | Permiso ante SEGOB                                        | | &#x60;license_sanitation&#x60;           | Licencia sanitaria de COFEPRIS                            | | &#x60;registration_tourism&#x60;         | Inscripción ante el Registro Nacional de Turismo (SECTUR) | 
        /// </summary>
        /// <value>Classification of the document.  | Tipo de archivo              | Descripción                                               | | :- -- -- -- -- -- -- -- -- -- -- -- -- -- | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | | &#x60;id_legal_representative&#x60;      | identificación oficial frente                             | | &#x60;id_legal_representative_back&#x60; | identificación oficial atrás                              | | &#x60;cfdi&#x60;                         | Prueba de situación fiscal                                | | &#x60;constitutive_act_basic&#x60;       | Acta constitutiva                                         | | &#x60;proof_of_address&#x60;             | Comprobante de domicilio del negocio                      | | &#x60;power_of_attonery&#x60;            | Poderes de representación                                 | | &#x60;deposit_account_cover&#x60;        | Carátula de la cuenta de depósito                         | | &#x60;permit_casino&#x60;                | Permiso ante SEGOB                                        | | &#x60;license_sanitation&#x60;           | Licencia sanitaria de COFEPRIS                            | | &#x60;registration_tourism&#x60;         | Inscripción ante el Registro Nacional de Turismo (SECTUR) | </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FileClassificationEnum
        {
            /// <summary>
            /// Enum IdLegalRepresentative for value: id_legal_representative
            /// </summary>
            [EnumMember(Value = "id_legal_representative")]
            IdLegalRepresentative = 1,

            /// <summary>
            /// Enum IdLegalRepresentativeBack for value: id_legal_representative_back
            /// </summary>
            [EnumMember(Value = "id_legal_representative_back")]
            IdLegalRepresentativeBack = 2,

            /// <summary>
            /// Enum Cfdi for value: cfdi
            /// </summary>
            [EnumMember(Value = "cfdi")]
            Cfdi = 3,

            /// <summary>
            /// Enum ConstitutiveActBasic for value: constitutive_act_basic
            /// </summary>
            [EnumMember(Value = "constitutive_act_basic")]
            ConstitutiveActBasic = 4,

            /// <summary>
            /// Enum ProofOfAddress for value: proof_of_address
            /// </summary>
            [EnumMember(Value = "proof_of_address")]
            ProofOfAddress = 5,

            /// <summary>
            /// Enum PowerOfAttonery for value: power_of_attonery
            /// </summary>
            [EnumMember(Value = "power_of_attonery")]
            PowerOfAttonery = 6,

            /// <summary>
            /// Enum DepositAccountCover for value: deposit_account_cover
            /// </summary>
            [EnumMember(Value = "deposit_account_cover")]
            DepositAccountCover = 7,

            /// <summary>
            /// Enum PermitCasino for value: permit_casino
            /// </summary>
            [EnumMember(Value = "permit_casino")]
            PermitCasino = 8,

            /// <summary>
            /// Enum LicenseSanitation for value: license_sanitation
            /// </summary>
            [EnumMember(Value = "license_sanitation")]
            LicenseSanitation = 9,

            /// <summary>
            /// Enum RegistrationTourism for value: registration_tourism
            /// </summary>
            [EnumMember(Value = "registration_tourism")]
            RegistrationTourism = 10
        }


        /// <summary>
        /// Classification of the document.  | Tipo de archivo              | Descripción                                               | | :- -- -- -- -- -- -- -- -- -- -- -- -- -- | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | | &#x60;id_legal_representative&#x60;      | identificación oficial frente                             | | &#x60;id_legal_representative_back&#x60; | identificación oficial atrás                              | | &#x60;cfdi&#x60;                         | Prueba de situación fiscal                                | | &#x60;constitutive_act_basic&#x60;       | Acta constitutiva                                         | | &#x60;proof_of_address&#x60;             | Comprobante de domicilio del negocio                      | | &#x60;power_of_attonery&#x60;            | Poderes de representación                                 | | &#x60;deposit_account_cover&#x60;        | Carátula de la cuenta de depósito                         | | &#x60;permit_casino&#x60;                | Permiso ante SEGOB                                        | | &#x60;license_sanitation&#x60;           | Licencia sanitaria de COFEPRIS                            | | &#x60;registration_tourism&#x60;         | Inscripción ante el Registro Nacional de Turismo (SECTUR) | 
        /// </summary>
        /// <value>Classification of the document.  | Tipo de archivo              | Descripción                                               | | :- -- -- -- -- -- -- -- -- -- -- -- -- -- | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | | &#x60;id_legal_representative&#x60;      | identificación oficial frente                             | | &#x60;id_legal_representative_back&#x60; | identificación oficial atrás                              | | &#x60;cfdi&#x60;                         | Prueba de situación fiscal                                | | &#x60;constitutive_act_basic&#x60;       | Acta constitutiva                                         | | &#x60;proof_of_address&#x60;             | Comprobante de domicilio del negocio                      | | &#x60;power_of_attonery&#x60;            | Poderes de representación                                 | | &#x60;deposit_account_cover&#x60;        | Carátula de la cuenta de depósito                         | | &#x60;permit_casino&#x60;                | Permiso ante SEGOB                                        | | &#x60;license_sanitation&#x60;           | Licencia sanitaria de COFEPRIS                            | | &#x60;registration_tourism&#x60;         | Inscripción ante el Registro Nacional de Turismo (SECTUR) | </value>
        /*
        <example>deposit_account_cover</example>
        */
        [DataMember(Name = "file_classification", EmitDefaultValue = false)]
        public FileClassificationEnum? FileClassification { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyResponseDocumentsInner" /> class.
        /// </summary>
        /// <param name="fileClassification">Classification of the document.  | Tipo de archivo              | Descripción                                               | | :- -- -- -- -- -- -- -- -- -- -- -- -- -- | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | | &#x60;id_legal_representative&#x60;      | identificación oficial frente                             | | &#x60;id_legal_representative_back&#x60; | identificación oficial atrás                              | | &#x60;cfdi&#x60;                         | Prueba de situación fiscal                                | | &#x60;constitutive_act_basic&#x60;       | Acta constitutiva                                         | | &#x60;proof_of_address&#x60;             | Comprobante de domicilio del negocio                      | | &#x60;power_of_attonery&#x60;            | Poderes de representación                                 | | &#x60;deposit_account_cover&#x60;        | Carátula de la cuenta de depósito                         | | &#x60;permit_casino&#x60;                | Permiso ante SEGOB                                        | | &#x60;license_sanitation&#x60;           | Licencia sanitaria de COFEPRIS                            | | &#x60;registration_tourism&#x60;         | Inscripción ante el Registro Nacional de Turismo (SECTUR) | .</param>
        /// <param name="status">The status of the document..</param>
        /// <param name="fileName">The name of the file..</param>
        public CompanyResponseDocumentsInner(FileClassificationEnum? fileClassification = default(FileClassificationEnum?), string status = default(string), string fileName = default(string))
        {
            this.FileClassification = fileClassification;
            this.Status = status;
            this.FileName = fileName;
        }

        /// <summary>
        /// The status of the document.
        /// </summary>
        /// <value>The status of the document.</value>
        /*
        <example>pending</example>
        */
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// The name of the file.
        /// </summary>
        /// <value>The name of the file.</value>
        [DataMember(Name = "file_name", EmitDefaultValue = true)]
        public string FileName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CompanyResponseDocumentsInner {\n");
            sb.Append("  FileClassification: ").Append(FileClassification).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
