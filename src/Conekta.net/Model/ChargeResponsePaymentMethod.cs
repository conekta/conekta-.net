/*
 * Conekta API
 *
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Conekta.net.Client.OpenAPIDateConverter;
using System.Reflection;

namespace Conekta.net.Model
{
    /// <summary>
    /// ChargeResponsePaymentMethod
    /// </summary>
    [JsonConverter(typeof(ChargeResponsePaymentMethodJsonConverter))]
    [DataContract(Name = "charge_response_payment_method")]
    public partial class ChargeResponsePaymentMethod : AbstractOpenAPISchema, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChargeResponsePaymentMethod" /> class
        /// with the <see cref="PaymentMethodCash" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of PaymentMethodCash.</param>
        public ChargeResponsePaymentMethod(PaymentMethodCash actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChargeResponsePaymentMethod" /> class
        /// with the <see cref="PaymentMethodCard" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of PaymentMethodCard.</param>
        public ChargeResponsePaymentMethod(PaymentMethodCard actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChargeResponsePaymentMethod" /> class
        /// with the <see cref="PaymentMethodBankTransfer" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of PaymentMethodBankTransfer.</param>
        public ChargeResponsePaymentMethod(PaymentMethodBankTransfer actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChargeResponsePaymentMethod" /> class
        /// with the <see cref="PaymentMethodBnplPayment" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of PaymentMethodBnplPayment.</param>
        public ChargeResponsePaymentMethod(PaymentMethodBnplPayment actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(PaymentMethodBankTransfer) || value is PaymentMethodBankTransfer)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(PaymentMethodBnplPayment) || value is PaymentMethodBnplPayment)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(PaymentMethodCard) || value is PaymentMethodCard)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(PaymentMethodCash) || value is PaymentMethodCash)
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: PaymentMethodBankTransfer, PaymentMethodBnplPayment, PaymentMethodCard, PaymentMethodCash");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `PaymentMethodCash`. If the actual instance is not `PaymentMethodCash`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of PaymentMethodCash</returns>
        public PaymentMethodCash GetPaymentMethodCash()
        {
            return (PaymentMethodCash)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `PaymentMethodCard`. If the actual instance is not `PaymentMethodCard`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of PaymentMethodCard</returns>
        public PaymentMethodCard GetPaymentMethodCard()
        {
            return (PaymentMethodCard)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `PaymentMethodBankTransfer`. If the actual instance is not `PaymentMethodBankTransfer`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of PaymentMethodBankTransfer</returns>
        public PaymentMethodBankTransfer GetPaymentMethodBankTransfer()
        {
            return (PaymentMethodBankTransfer)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `PaymentMethodBnplPayment`. If the actual instance is not `PaymentMethodBnplPayment`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of PaymentMethodBnplPayment</returns>
        public PaymentMethodBnplPayment GetPaymentMethodBnplPayment()
        {
            return (PaymentMethodBnplPayment)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChargeResponsePaymentMethod {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, ChargeResponsePaymentMethod.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of ChargeResponsePaymentMethod
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of ChargeResponsePaymentMethod</returns>
        public static ChargeResponsePaymentMethod FromJson(string jsonString)
        {
            ChargeResponsePaymentMethod newChargeResponsePaymentMethod = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newChargeResponsePaymentMethod;
            }

            try
            {
                var discriminatorObj = JObject.Parse(jsonString)["object"];
                string discriminatorValue =  discriminatorObj == null ?string.Empty :discriminatorObj.ToString();
                switch (discriminatorValue)
                {
                    case "bank_transfer_payment":
                        newChargeResponsePaymentMethod = new ChargeResponsePaymentMethod(JsonConvert.DeserializeObject<PaymentMethodBankTransfer>(jsonString, ChargeResponsePaymentMethod.AdditionalPropertiesSerializerSettings));
                        return newChargeResponsePaymentMethod;
                    case "bnpl_payment":
                        newChargeResponsePaymentMethod = new ChargeResponsePaymentMethod(JsonConvert.DeserializeObject<PaymentMethodBnplPayment>(jsonString, ChargeResponsePaymentMethod.AdditionalPropertiesSerializerSettings));
                        return newChargeResponsePaymentMethod;
                    case "card_payment":
                        newChargeResponsePaymentMethod = new ChargeResponsePaymentMethod(JsonConvert.DeserializeObject<PaymentMethodCard>(jsonString, ChargeResponsePaymentMethod.AdditionalPropertiesSerializerSettings));
                        return newChargeResponsePaymentMethod;
                    case "cash_payment":
                        newChargeResponsePaymentMethod = new ChargeResponsePaymentMethod(JsonConvert.DeserializeObject<PaymentMethodCash>(jsonString, ChargeResponsePaymentMethod.AdditionalPropertiesSerializerSettings));
                        return newChargeResponsePaymentMethod;
                    case "payment_method_bank_transfer":
                        newChargeResponsePaymentMethod = new ChargeResponsePaymentMethod(JsonConvert.DeserializeObject<PaymentMethodBankTransfer>(jsonString, ChargeResponsePaymentMethod.AdditionalPropertiesSerializerSettings));
                        return newChargeResponsePaymentMethod;
                    case "payment_method_bnpl_payment":
                        newChargeResponsePaymentMethod = new ChargeResponsePaymentMethod(JsonConvert.DeserializeObject<PaymentMethodBnplPayment>(jsonString, ChargeResponsePaymentMethod.AdditionalPropertiesSerializerSettings));
                        return newChargeResponsePaymentMethod;
                    case "payment_method_card":
                        newChargeResponsePaymentMethod = new ChargeResponsePaymentMethod(JsonConvert.DeserializeObject<PaymentMethodCard>(jsonString, ChargeResponsePaymentMethod.AdditionalPropertiesSerializerSettings));
                        return newChargeResponsePaymentMethod;
                    case "payment_method_cash":
                        newChargeResponsePaymentMethod = new ChargeResponsePaymentMethod(JsonConvert.DeserializeObject<PaymentMethodCash>(jsonString, ChargeResponsePaymentMethod.AdditionalPropertiesSerializerSettings));
                        return newChargeResponsePaymentMethod;
                    default:
                        System.Diagnostics.Debug.WriteLine(string.Format("Failed to lookup discriminator value `{0}` for ChargeResponsePaymentMethod. Possible values: bank_transfer_payment bnpl_payment card_payment cash_payment payment_method_bank_transfer payment_method_bnpl_payment payment_method_card payment_method_cash", discriminatorValue));
                        break;
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to parse the json data : `{0}` {1}", jsonString, ex.ToString()));
            }

            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(PaymentMethodBankTransfer).GetProperty("AdditionalProperties") == null)
                {
                    newChargeResponsePaymentMethod = new ChargeResponsePaymentMethod(JsonConvert.DeserializeObject<PaymentMethodBankTransfer>(jsonString, ChargeResponsePaymentMethod.SerializerSettings));
                }
                else
                {
                    newChargeResponsePaymentMethod = new ChargeResponsePaymentMethod(JsonConvert.DeserializeObject<PaymentMethodBankTransfer>(jsonString, ChargeResponsePaymentMethod.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("PaymentMethodBankTransfer");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into PaymentMethodBankTransfer: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(PaymentMethodBnplPayment).GetProperty("AdditionalProperties") == null)
                {
                    newChargeResponsePaymentMethod = new ChargeResponsePaymentMethod(JsonConvert.DeserializeObject<PaymentMethodBnplPayment>(jsonString, ChargeResponsePaymentMethod.SerializerSettings));
                }
                else
                {
                    newChargeResponsePaymentMethod = new ChargeResponsePaymentMethod(JsonConvert.DeserializeObject<PaymentMethodBnplPayment>(jsonString, ChargeResponsePaymentMethod.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("PaymentMethodBnplPayment");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into PaymentMethodBnplPayment: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(PaymentMethodCard).GetProperty("AdditionalProperties") == null)
                {
                    newChargeResponsePaymentMethod = new ChargeResponsePaymentMethod(JsonConvert.DeserializeObject<PaymentMethodCard>(jsonString, ChargeResponsePaymentMethod.SerializerSettings));
                }
                else
                {
                    newChargeResponsePaymentMethod = new ChargeResponsePaymentMethod(JsonConvert.DeserializeObject<PaymentMethodCard>(jsonString, ChargeResponsePaymentMethod.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("PaymentMethodCard");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into PaymentMethodCard: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(PaymentMethodCash).GetProperty("AdditionalProperties") == null)
                {
                    newChargeResponsePaymentMethod = new ChargeResponsePaymentMethod(JsonConvert.DeserializeObject<PaymentMethodCash>(jsonString, ChargeResponsePaymentMethod.SerializerSettings));
                }
                else
                {
                    newChargeResponsePaymentMethod = new ChargeResponsePaymentMethod(JsonConvert.DeserializeObject<PaymentMethodCash>(jsonString, ChargeResponsePaymentMethod.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("PaymentMethodCash");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into PaymentMethodCash: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + String.Join(",", matchedTypes));
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newChargeResponsePaymentMethod;
        }


        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for ChargeResponsePaymentMethod
    /// </summary>
    public class ChargeResponsePaymentMethodJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(ChargeResponsePaymentMethod).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            switch(reader.TokenType) 
            {
                case JsonToken.StartObject:
                    return ChargeResponsePaymentMethod.FromJson(JObject.Load(reader).ToString(Formatting.None));
                case JsonToken.StartArray:
                    return ChargeResponsePaymentMethod.FromJson(JArray.Load(reader).ToString(Formatting.None));
                default:
                    return null;
            }
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
