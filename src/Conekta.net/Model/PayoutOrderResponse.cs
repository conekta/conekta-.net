/*
 * Conekta API
 *
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.2.0
 * Contact: engineering@conekta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Conekta.net.Client.OpenAPIDateConverter;

namespace Conekta.net.Model
{
    /// <summary>
    /// payout order model response
    /// </summary>
    [DataContract(Name = "payout_order_response")]
    public partial class PayoutOrderResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PayoutOrderResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PayoutOrderResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PayoutOrderResponse" /> class.
        /// </summary>
        /// <param name="allowedPayoutMethods">The payout methods that are allowed for the payout order. (required).</param>
        /// <param name="amount">The amount of the payout order. (required).</param>
        /// <param name="createdAt">The creation date of the payout order. (required).</param>
        /// <param name="currency">The currency in which the payout order is made. (required) (default to &quot;MXN&quot;).</param>
        /// <param name="customerInfo">customerInfo (required).</param>
        /// <param name="expiresAt">The expiration date of the payout order..</param>
        /// <param name="id">The id of the payout order. (required).</param>
        /// <param name="livemode">The live mode of the payout order. (required).</param>
        /// <param name="varObject">The object of the payout order. (required).</param>
        /// <param name="metadata">The metadata of the payout order..</param>
        /// <param name="payouts">The payout information of the payout order. (required).</param>
        /// <param name="reason">The reason for the payout order. (required).</param>
        /// <param name="status">The status of the payout order..</param>
        /// <param name="updatedAt">The update date of the payout order. (required).</param>
        public PayoutOrderResponse(List<string> allowedPayoutMethods = default(List<string>), int amount = default(int), long createdAt = default(long), string currency = @"MXN", PayoutOrderResponseCustomerInfo customerInfo = default(PayoutOrderResponseCustomerInfo), long expiresAt = default(long), string id = default(string), bool livemode = default(bool), string varObject = default(string), Dictionary<string, Object> metadata = default(Dictionary<string, Object>), List<PayoutOrderPayoutsItem> payouts = default(List<PayoutOrderPayoutsItem>), string reason = default(string), string status = default(string), long updatedAt = default(long))
        {
            // to ensure "allowedPayoutMethods" is required (not null)
            if (allowedPayoutMethods == null)
            {
                throw new ArgumentNullException("allowedPayoutMethods is a required property for PayoutOrderResponse and cannot be null");
            }
            this.AllowedPayoutMethods = allowedPayoutMethods;
            this.Amount = amount;
            this.CreatedAt = createdAt;
            // to ensure "currency" is required (not null)
            if (currency == null)
            {
                throw new ArgumentNullException("currency is a required property for PayoutOrderResponse and cannot be null");
            }
            this.Currency = currency;
            // to ensure "customerInfo" is required (not null)
            if (customerInfo == null)
            {
                throw new ArgumentNullException("customerInfo is a required property for PayoutOrderResponse and cannot be null");
            }
            this.CustomerInfo = customerInfo;
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for PayoutOrderResponse and cannot be null");
            }
            this.Id = id;
            this.Livemode = livemode;
            // to ensure "varObject" is required (not null)
            if (varObject == null)
            {
                throw new ArgumentNullException("varObject is a required property for PayoutOrderResponse and cannot be null");
            }
            this.Object = varObject;
            // to ensure "payouts" is required (not null)
            if (payouts == null)
            {
                throw new ArgumentNullException("payouts is a required property for PayoutOrderResponse and cannot be null");
            }
            this.Payouts = payouts;
            // to ensure "reason" is required (not null)
            if (reason == null)
            {
                throw new ArgumentNullException("reason is a required property for PayoutOrderResponse and cannot be null");
            }
            this.Reason = reason;
            this.UpdatedAt = updatedAt;
            this.ExpiresAt = expiresAt;
            this.Metadata = metadata;
            this.Status = status;
        }

        /// <summary>
        /// The payout methods that are allowed for the payout order.
        /// </summary>
        /// <value>The payout methods that are allowed for the payout order.</value>
        /*
        <example>[&quot;cashout&quot;]</example>
        */
        [DataMember(Name = "allowed_payout_methods", IsRequired = true, EmitDefaultValue = true)]
        public List<string> AllowedPayoutMethods { get; set; }

        /// <summary>
        /// The amount of the payout order.
        /// </summary>
        /// <value>The amount of the payout order.</value>
        /*
        <example>100</example>
        */
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = true)]
        public int Amount { get; set; }

        /// <summary>
        /// The creation date of the payout order.
        /// </summary>
        /// <value>The creation date of the payout order.</value>
        /*
        <example>1677626837</example>
        */
        [DataMember(Name = "created_at", IsRequired = true, EmitDefaultValue = true)]
        public long CreatedAt { get; set; }

        /// <summary>
        /// The currency in which the payout order is made.
        /// </summary>
        /// <value>The currency in which the payout order is made.</value>
        /*
        <example>MXN</example>
        */
        [DataMember(Name = "currency", IsRequired = true, EmitDefaultValue = true)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets CustomerInfo
        /// </summary>
        [DataMember(Name = "customer_info", IsRequired = true, EmitDefaultValue = true)]
        public PayoutOrderResponseCustomerInfo CustomerInfo { get; set; }

        /// <summary>
        /// The expiration date of the payout order.
        /// </summary>
        /// <value>The expiration date of the payout order.</value>
        /*
        <example>1677626837</example>
        */
        [DataMember(Name = "expires_at", EmitDefaultValue = false)]
        public long ExpiresAt { get; set; }

        /// <summary>
        /// The id of the payout order.
        /// </summary>
        /// <value>The id of the payout order.</value>
        /*
        <example>f2654d66-d740-457a-9a8c-f96b5196f44e</example>
        */
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// The live mode of the payout order.
        /// </summary>
        /// <value>The live mode of the payout order.</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "livemode", IsRequired = true, EmitDefaultValue = true)]
        public bool Livemode { get; set; }

        /// <summary>
        /// The object of the payout order.
        /// </summary>
        /// <value>The object of the payout order.</value>
        /*
        <example>payout_order</example>
        */
        [DataMember(Name = "object", IsRequired = true, EmitDefaultValue = true)]
        public string Object { get; set; }

        /// <summary>
        /// The metadata of the payout order.
        /// </summary>
        /// <value>The metadata of the payout order.</value>
        /*
        <example>{&quot;custom_client_id&quot;:&quot;12345&quot;}</example>
        */
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public Dictionary<string, Object> Metadata { get; set; }

        /// <summary>
        /// The payout information of the payout order.
        /// </summary>
        /// <value>The payout information of the payout order.</value>
        [DataMember(Name = "payouts", IsRequired = true, EmitDefaultValue = true)]
        public List<PayoutOrderPayoutsItem> Payouts { get; set; }

        /// <summary>
        /// The reason for the payout order.
        /// </summary>
        /// <value>The reason for the payout order.</value>
        /*
        <example>Payout order for the customer</example>
        */
        [DataMember(Name = "reason", IsRequired = true, EmitDefaultValue = true)]
        public string Reason { get; set; }

        /// <summary>
        /// The status of the payout order.
        /// </summary>
        /// <value>The status of the payout order.</value>
        /*
        <example>open</example>
        */
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// The update date of the payout order.
        /// </summary>
        /// <value>The update date of the payout order.</value>
        /*
        <example>1677626837</example>
        */
        [DataMember(Name = "updated_at", IsRequired = true, EmitDefaultValue = true)]
        public long UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PayoutOrderResponse {\n");
            sb.Append("  AllowedPayoutMethods: ").Append(AllowedPayoutMethods).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  CustomerInfo: ").Append(CustomerInfo).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Livemode: ").Append(Livemode).Append("\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Payouts: ").Append(Payouts).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
