/*
 * Conekta API
 *
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.2.0
 * Contact: engineering@conekta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Conekta.net.Client.OpenAPIDateConverter;

namespace Conekta.net.Model
{
    /// <summary>
    /// UpdatePaymentMethods
    /// </summary>
    [DataContract(Name = "update_payment_methods")]
    public partial class UpdatePaymentMethods : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdatePaymentMethods" /> class.
        /// </summary>
        /// <param name="name">The name of the payment method holder.</param>
        /// <param name="expiresAt">The expiration date of the payment method in Unix timestamp format.</param>
        public UpdatePaymentMethods(string name = default(string), long expiresAt = default(long))
        {
            this.Name = name;
            this.ExpiresAt = expiresAt;
        }

        /// <summary>
        /// The name of the payment method holder
        /// </summary>
        /// <value>The name of the payment method holder</value>
        /*
        <example>Payment recurrent</example>
        */
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The expiration date of the payment method in Unix timestamp format
        /// </summary>
        /// <value>The expiration date of the payment method in Unix timestamp format</value>
        /*
        <example>1760457350</example>
        */
        [DataMember(Name = "expires_at", EmitDefaultValue = false)]
        public long ExpiresAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdatePaymentMethods {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ExpiresAt (long) minimum
            if (this.ExpiresAt < (long)1)
            {
                yield return new ValidationResult("Invalid value for ExpiresAt, must be a value greater than or equal to 1.", new [] { "ExpiresAt" });
            }

            yield break;
        }
    }

}
