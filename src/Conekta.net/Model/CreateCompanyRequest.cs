/*
 * Conekta API
 *
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.2.0
 * Contact: engineering@conekta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Conekta.net.Client.OpenAPIDateConverter;

namespace Conekta.net.Model
{
    /// <summary>
    /// CreateCompanyRequest
    /// </summary>
    [DataContract(Name = "create_company_request")]
    public partial class CreateCompanyRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateCompanyRequest" /> class.
        /// </summary>
        /// <param name="name">The name of the company..</param>
        /// <param name="typeCompany">The type of company, &#39;owner&#39;.</param>
        /// <param name="comercialInfo">comercialInfo.</param>
        /// <param name="fiscalInfo">fiscalInfo.</param>
        /// <param name="bankAccountInfo">bankAccountInfo.</param>
        public CreateCompanyRequest(string name = default(string), string typeCompany = default(string), CreateCompanyRequestComercialInfo comercialInfo = default(CreateCompanyRequestComercialInfo), CreateCompanyRequestFiscalInfo fiscalInfo = default(CreateCompanyRequestFiscalInfo), CreateCompanyRequestBankAccountInfo bankAccountInfo = default(CreateCompanyRequestBankAccountInfo))
        {
            this.Name = name;
            this.TypeCompany = typeCompany;
            this.ComercialInfo = comercialInfo;
            this.FiscalInfo = fiscalInfo;
            this.BankAccountInfo = bankAccountInfo;
        }

        /// <summary>
        /// The name of the company.
        /// </summary>
        /// <value>The name of the company.</value>
        /*
        <example>test</example>
        */
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The type of company, &#39;owner&#39;
        /// </summary>
        /// <value>The type of company, &#39;owner&#39;</value>
        /*
        <example>owner</example>
        */
        [DataMember(Name = "type_company", EmitDefaultValue = false)]
        public string TypeCompany { get; set; }

        /// <summary>
        /// Gets or Sets ComercialInfo
        /// </summary>
        [DataMember(Name = "comercial_info", EmitDefaultValue = false)]
        public CreateCompanyRequestComercialInfo ComercialInfo { get; set; }

        /// <summary>
        /// Gets or Sets FiscalInfo
        /// </summary>
        [DataMember(Name = "fiscal_info", EmitDefaultValue = false)]
        public CreateCompanyRequestFiscalInfo FiscalInfo { get; set; }

        /// <summary>
        /// Gets or Sets BankAccountInfo
        /// </summary>
        [DataMember(Name = "bank_account_info", EmitDefaultValue = false)]
        public CreateCompanyRequestBankAccountInfo BankAccountInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateCompanyRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  TypeCompany: ").Append(TypeCompany).Append("\n");
            sb.Append("  ComercialInfo: ").Append(ComercialInfo).Append("\n");
            sb.Append("  FiscalInfo: ").Append(FiscalInfo).Append("\n");
            sb.Append("  BankAccountInfo: ").Append(BankAccountInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
