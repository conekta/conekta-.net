/*
 * Conekta API
 *
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Conekta.net.Client.OpenAPIDateConverter;

namespace Conekta.net.Model
{
    /// <summary>
    /// order response
    /// </summary>
    [DataContract(Name = "order_response")]
    public partial class OrderResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderResponse" /> class.
        /// </summary>
        /// <param name="amount">The total amount to be collected in cents.</param>
        /// <param name="amountRefunded">The total amount refunded in cents.</param>
        /// <param name="channel">channel.</param>
        /// <param name="charges">charges.</param>
        /// <param name="checkout">checkout.</param>
        /// <param name="createdAt">The time at which the object was created in seconds since the Unix epoch.</param>
        /// <param name="currency">The three-letter ISO 4217 currency code. The currency of the order..</param>
        /// <param name="customerInfo">customerInfo.</param>
        /// <param name="discountLines">discountLines.</param>
        /// <param name="fiscalEntity">fiscalEntity.</param>
        /// <param name="id">id.</param>
        /// <param name="isRefundable">isRefundable.</param>
        /// <param name="lineItems">lineItems.</param>
        /// <param name="livemode">Whether the object exists in live mode or test mode.</param>
        /// <param name="metadata">Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format..</param>
        /// <param name="nextAction">nextAction.</param>
        /// <param name="varObject">String representing the object’s type. Objects of the same type share the same value..</param>
        /// <param name="paymentStatus">The payment status of the order..</param>
        /// <param name="processingMode">Indicates the processing mode for the order, either ecommerce, recurrent or validation..</param>
        /// <param name="shippingContact">shippingContact.</param>
        /// <param name="updatedAt">The time at which the object was last updated in seconds since the Unix epoch.</param>
        public OrderResponse(int amount = default(int), int amountRefunded = default(int), OrderChannelResponse channel = default(OrderChannelResponse), OrderChargesResponse charges = default(OrderChargesResponse), OrderResponseCheckout checkout = default(OrderResponseCheckout), long createdAt = default(long), string currency = default(string), OrderResponseCustomerInfo customerInfo = default(OrderResponseCustomerInfo), OrderDiscountLinesResponse discountLines = default(OrderDiscountLinesResponse), OrderFiscalEntityResponse fiscalEntity = default(OrderFiscalEntityResponse), string id = default(string), bool isRefundable = default(bool), OrderResponseProducts lineItems = default(OrderResponseProducts), bool livemode = default(bool), Dictionary<string, Object> metadata = default(Dictionary<string, Object>), OrderNextActionResponse nextAction = default(OrderNextActionResponse), string varObject = default(string), string paymentStatus = default(string), string processingMode = default(string), OrderResponseShippingContact shippingContact = default(OrderResponseShippingContact), long updatedAt = default(long))
        {
            this.Amount = amount;
            this.AmountRefunded = amountRefunded;
            this.Channel = channel;
            this.Charges = charges;
            this.Checkout = checkout;
            this.CreatedAt = createdAt;
            this.Currency = currency;
            this.CustomerInfo = customerInfo;
            this.DiscountLines = discountLines;
            this.FiscalEntity = fiscalEntity;
            this.Id = id;
            this.IsRefundable = isRefundable;
            this.LineItems = lineItems;
            this.Livemode = livemode;
            this.Metadata = metadata;
            this.NextAction = nextAction;
            this.Object = varObject;
            this.PaymentStatus = paymentStatus;
            this.ProcessingMode = processingMode;
            this.ShippingContact = shippingContact;
            this.UpdatedAt = updatedAt;
        }

        /// <summary>
        /// The total amount to be collected in cents
        /// </summary>
        /// <value>The total amount to be collected in cents</value>
        /*
        <example>21605</example>
        */
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public int Amount { get; set; }

        /// <summary>
        /// The total amount refunded in cents
        /// </summary>
        /// <value>The total amount refunded in cents</value>
        /*
        <example>0</example>
        */
        [DataMember(Name = "amount_refunded", EmitDefaultValue = false)]
        public int AmountRefunded { get; set; }

        /// <summary>
        /// Gets or Sets Channel
        /// </summary>
        [DataMember(Name = "channel", EmitDefaultValue = false)]
        public OrderChannelResponse Channel { get; set; }

        /// <summary>
        /// Gets or Sets Charges
        /// </summary>
        [DataMember(Name = "charges", EmitDefaultValue = false)]
        public OrderChargesResponse Charges { get; set; }

        /// <summary>
        /// Gets or Sets Checkout
        /// </summary>
        [DataMember(Name = "checkout", EmitDefaultValue = false)]
        public OrderResponseCheckout Checkout { get; set; }

        /// <summary>
        /// The time at which the object was created in seconds since the Unix epoch
        /// </summary>
        /// <value>The time at which the object was created in seconds since the Unix epoch</value>
        /*
        <example>1676328434</example>
        */
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public long CreatedAt { get; set; }

        /// <summary>
        /// The three-letter ISO 4217 currency code. The currency of the order.
        /// </summary>
        /// <value>The three-letter ISO 4217 currency code. The currency of the order.</value>
        /*
        <example>MXN</example>
        */
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets CustomerInfo
        /// </summary>
        [DataMember(Name = "customer_info", EmitDefaultValue = false)]
        public OrderResponseCustomerInfo CustomerInfo { get; set; }

        /// <summary>
        /// Gets or Sets DiscountLines
        /// </summary>
        [DataMember(Name = "discount_lines", EmitDefaultValue = false)]
        public OrderDiscountLinesResponse DiscountLines { get; set; }

        /// <summary>
        /// Gets or Sets FiscalEntity
        /// </summary>
        [DataMember(Name = "fiscal_entity", EmitDefaultValue = true)]
        public OrderFiscalEntityResponse FiscalEntity { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        /*
        <example>ord_2tMtQQpDvfnNjiuFG</example>
        */
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets IsRefundable
        /// </summary>
        /*
        <example>false</example>
        */
        [DataMember(Name = "is_refundable", EmitDefaultValue = true)]
        public bool IsRefundable { get; set; }

        /// <summary>
        /// Gets or Sets LineItems
        /// </summary>
        [DataMember(Name = "line_items", EmitDefaultValue = false)]
        public OrderResponseProducts LineItems { get; set; }

        /// <summary>
        /// Whether the object exists in live mode or test mode
        /// </summary>
        /// <value>Whether the object exists in live mode or test mode</value>
        /*
        <example>false</example>
        */
        [DataMember(Name = "livemode", EmitDefaultValue = true)]
        public bool Livemode { get; set; }

        /// <summary>
        /// Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        /// </summary>
        /// <value>Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.</value>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public Dictionary<string, Object> Metadata { get; set; }

        /// <summary>
        /// Gets or Sets NextAction
        /// </summary>
        [DataMember(Name = "next_action", EmitDefaultValue = false)]
        public OrderNextActionResponse NextAction { get; set; }

        /// <summary>
        /// String representing the object’s type. Objects of the same type share the same value.
        /// </summary>
        /// <value>String representing the object’s type. Objects of the same type share the same value.</value>
        /*
        <example>order</example>
        */
        [DataMember(Name = "object", EmitDefaultValue = false)]
        public string Object { get; set; }

        /// <summary>
        /// The payment status of the order.
        /// </summary>
        /// <value>The payment status of the order.</value>
        /*
        <example>paid</example>
        */
        [DataMember(Name = "payment_status", EmitDefaultValue = false)]
        public string PaymentStatus { get; set; }

        /// <summary>
        /// Indicates the processing mode for the order, either ecommerce, recurrent or validation.
        /// </summary>
        /// <value>Indicates the processing mode for the order, either ecommerce, recurrent or validation.</value>
        /*
        <example>ecommerce</example>
        */
        [DataMember(Name = "processing_mode", EmitDefaultValue = false)]
        public string ProcessingMode { get; set; }

        /// <summary>
        /// Gets or Sets ShippingContact
        /// </summary>
        [DataMember(Name = "shipping_contact", EmitDefaultValue = false)]
        public OrderResponseShippingContact ShippingContact { get; set; }

        /// <summary>
        /// The time at which the object was last updated in seconds since the Unix epoch
        /// </summary>
        /// <value>The time at which the object was last updated in seconds since the Unix epoch</value>
        /*
        <example>1676328434</example>
        */
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        public long UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderResponse {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  AmountRefunded: ").Append(AmountRefunded).Append("\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("  Charges: ").Append(Charges).Append("\n");
            sb.Append("  Checkout: ").Append(Checkout).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  CustomerInfo: ").Append(CustomerInfo).Append("\n");
            sb.Append("  DiscountLines: ").Append(DiscountLines).Append("\n");
            sb.Append("  FiscalEntity: ").Append(FiscalEntity).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsRefundable: ").Append(IsRefundable).Append("\n");
            sb.Append("  LineItems: ").Append(LineItems).Append("\n");
            sb.Append("  Livemode: ").Append(Livemode).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  NextAction: ").Append(NextAction).Append("\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("  PaymentStatus: ").Append(PaymentStatus).Append("\n");
            sb.Append("  ProcessingMode: ").Append(ProcessingMode).Append("\n");
            sb.Append("  ShippingContact: ").Append(ShippingContact).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
