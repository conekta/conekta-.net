/*
 * Conekta API
 *
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Conekta.net.Client.OpenAPIDateConverter;

namespace Conekta.net.Model
{
    /// <summary>
    /// log model
    /// </summary>
    [DataContract(Name = "log_response")]
    public partial class LogResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LogResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LogResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LogResponse" /> class.
        /// </summary>
        /// <param name="createdAt">createdAt (required).</param>
        /// <param name="id">id (required).</param>
        /// <param name="ipAddress">ipAddress.</param>
        /// <param name="livemode">livemode (required).</param>
        /// <param name="loggableId">loggableId.</param>
        /// <param name="loggableType">loggableType.</param>
        /// <param name="method">method.</param>
        /// <param name="oauthTokenId">oauthTokenId.</param>
        /// <param name="queryString">queryString.</param>
        /// <param name="related">related.</param>
        /// <param name="requestBody">requestBody.</param>
        /// <param name="requestHeaders">requestHeaders.</param>
        /// <param name="responseBody">responseBody.</param>
        /// <param name="responseHeaders">responseHeaders.</param>
        /// <param name="searchableTags">searchableTags.</param>
        /// <param name="status">status.</param>
        /// <param name="updatedAt">updatedAt.</param>
        /// <param name="url">url.</param>
        /// <param name="userAccountId">userAccountId.</param>
        /// <param name="varVersion">varVersion.</param>
        public LogResponse(long createdAt = default(long), string id = default(string), string ipAddress = default(string), bool livemode = default(bool), string loggableId = default(string), string loggableType = default(string), string method = default(string), string oauthTokenId = default(string), Dictionary<string, Object> queryString = default(Dictionary<string, Object>), string related = default(string), Object requestBody = default(Object), Dictionary<string, string> requestHeaders = default(Dictionary<string, string>), Object responseBody = default(Object), Dictionary<string, string> responseHeaders = default(Dictionary<string, string>), List<string> searchableTags = default(List<string>), string status = default(string), string updatedAt = default(string), string url = default(string), string userAccountId = default(string), string varVersion = default(string))
        {
            this.CreatedAt = createdAt;
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for LogResponse and cannot be null");
            }
            this.Id = id;
            this.Livemode = livemode;
            this.IpAddress = ipAddress;
            this.LoggableId = loggableId;
            this.LoggableType = loggableType;
            this.Method = method;
            this.OauthTokenId = oauthTokenId;
            this.QueryString = queryString;
            this.Related = related;
            this.RequestBody = requestBody;
            this.RequestHeaders = requestHeaders;
            this.ResponseBody = responseBody;
            this.ResponseHeaders = responseHeaders;
            this.SearchableTags = searchableTags;
            this.Status = status;
            this.UpdatedAt = updatedAt;
            this.Url = url;
            this.UserAccountId = userAccountId;
            this.VarVersion = varVersion;
        }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        /// <example>1661445644</example>
        [DataMember(Name = "created_at", IsRequired = true, EmitDefaultValue = true)]
        public long CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        /// <example>6307a60c41de27127515a575</example>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets IpAddress
        /// </summary>
        /// <example>54.235.131.48</example>
        [DataMember(Name = "ip_address", EmitDefaultValue = false)]
        public string IpAddress { get; set; }

        /// <summary>
        /// Gets or Sets Livemode
        /// </summary>
        /// <example>true</example>
        [DataMember(Name = "livemode", IsRequired = true, EmitDefaultValue = true)]
        public bool Livemode { get; set; }

        /// <summary>
        /// Gets or Sets LoggableId
        /// </summary>
        /// <example>ord_87632467832</example>
        [DataMember(Name = "loggable_id", EmitDefaultValue = true)]
        public string LoggableId { get; set; }

        /// <summary>
        /// Gets or Sets LoggableType
        /// </summary>
        /// <example>order</example>
        [DataMember(Name = "loggable_type", EmitDefaultValue = true)]
        public string LoggableType { get; set; }

        /// <summary>
        /// Gets or Sets Method
        /// </summary>
        /// <example>POST</example>
        [DataMember(Name = "method", EmitDefaultValue = false)]
        public string Method { get; set; }

        /// <summary>
        /// Gets or Sets OauthTokenId
        /// </summary>
        [DataMember(Name = "oauth_token_id", EmitDefaultValue = true)]
        public string OauthTokenId { get; set; }

        /// <summary>
        /// Gets or Sets QueryString
        /// </summary>
        /// <example>{&quot;amount&quot;:3000,&quot;payable&quot;:true}</example>
        [DataMember(Name = "query_string", EmitDefaultValue = false)]
        public Dictionary<string, Object> QueryString { get; set; }

        /// <summary>
        /// Gets or Sets Related
        /// </summary>
        /// <example>FilterResource</example>
        [DataMember(Name = "related", EmitDefaultValue = false)]
        public string Related { get; set; }

        /// <summary>
        /// Gets or Sets RequestBody
        /// </summary>
        /// <example>{&quot;filters&quot;:{&quot;amount&quot;:{&quot;amount_from&quot;:0,&quot;amount_to&quot;:0},&quot;created_at&quot;:{&quot;date_from&quot;:1653627600,&quot;date_to&quot;:1661489999},&quot;filterName&quot;:&quot;Payments&quot;,&quot;search_term&quot;:null,&quot;sort_by&quot;:&quot;created_at&quot;,&quot;sort_direction&quot;:&quot;desc&quot;,&quot;status&quot;:[],&quot;type&quot;:[]},&quot;id&quot;:&quot;78e65162-0f37-4942-847c-9bf7081d54c2&quot;,&quot;page&quot;:&quot;0&quot;,&quot;report_type&quot;:&quot;charges&quot;,&quot;testMode&quot;:false}</example>
        [DataMember(Name = "request_body", EmitDefaultValue = false)]
        public Object RequestBody { get; set; }

        /// <summary>
        /// Gets or Sets RequestHeaders
        /// </summary>
        /// <example>{&quot;Accept&quot;:&quot;application/vnd.conekta-v2.1.0+json&quot;,&quot;Accept-Encoding&quot;:&quot;gzip, deflate, br&quot;,&quot;Accept-Language&quot;:&quot;es-419, es; q&#x3D;0.9, en; q&#x3D;0.8&quot;,&quot;Activitypermission&quot;:&quot;orders:read&quot;,&quot;Apiversion&quot;:&quot;2.1.0&quot;}</example>
        [DataMember(Name = "request_headers", EmitDefaultValue = false)]
        public Dictionary<string, string> RequestHeaders { get; set; }

        /// <summary>
        /// Gets or Sets ResponseBody
        /// </summary>
        [DataMember(Name = "response_body", EmitDefaultValue = false)]
        public Object ResponseBody { get; set; }

        /// <summary>
        /// Gets or Sets ResponseHeaders
        /// </summary>
        /// <example>{&quot;Access-Control-Allow-Headers&quot;:&quot;Content-Type, Depth, User-Agent, X-File-Size, X-Requested-With, If-Modified-Since, X-File-Name, Cache-Control, X-Prototype-Version, Authorization, Accept, Date, Version, X-Forwarded-For, Host, Connection, X-Forwarded-Proto, X-Forwarded-Port, X-Amzn-Trace-Id, Accept-Encoding, Accept-Language, Referer, Origin, Activitypermission, Apiversion, Entityid, Livemode, Sec-Ch-Ua, Sec-Ch-Ua-Mobile, Sec-Ch-Ua-Platform, Sec-Fetch-Dest, Sec-Fetch-Mode, Sec-Fetch-Site, X-Datadog-Parent-Id, X-Datadog-Sampling-Priority, X-Datadog-Trace-Id, X-Forwarded-Host, X-Forwarded-Server, X-Real-Ip&quot;,&quot;Access-Control-Allow-Methods&quot;:&quot;POST, GET, PUT, OPTIONS&quot;,&quot;Access-Control-Allow-Origin&quot;:&quot;*&quot;,&quot;Access-Control-Max-Age&quot;:&quot;1728000&quot;,&quot;Conekta-Media-Type&quot;:&quot;conekta-v2.1.0; format&#x3D;application/json&quot;,&quot;Content-Type&quot;:&quot;application/json; charset&#x3D;utf-8&quot;,&quot;Referrer-Policy&quot;:&quot;strict-origin-when-cross-origin&quot;,&quot;Strict-Transport-Security&quot;:&quot;max-age&#x3D;31536000; includeSubDomains&quot;,&quot;X-Content-Type-Options&quot;:&quot;nosniff&quot;,&quot;X-Download-Options&quot;:&quot;noopen&quot;,&quot;X-Frame-Options&quot;:&quot;SAMEORIGIN&quot;,&quot;X-Permitted-Cross-Domain-Policies&quot;:&quot;none&quot;,&quot;X-XSS-Protection&quot;:&quot;1; mode&#x3D;block&quot;}</example>
        [DataMember(Name = "response_headers", EmitDefaultValue = false)]
        public Dictionary<string, string> ResponseHeaders { get; set; }

        /// <summary>
        /// Gets or Sets SearchableTags
        /// </summary>
        /// <example>[&quot;6307a60c41de27127515a575&quot;,&quot;6307a60c41de27127515a571&quot;]</example>
        [DataMember(Name = "searchable_tags", EmitDefaultValue = false)]
        public List<string> SearchableTags { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        /// <example>200</example>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        /// <example>2022-08-25T16:40:44.887Z</example>
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        /// <example>/filter_resource</example>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets UserAccountId
        /// </summary>
        /// <example>5a0b7001edbb6e1725b0b2c6</example>
        [DataMember(Name = "user_account_id", EmitDefaultValue = false)]
        public string UserAccountId { get; set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        /// <example>2.1.0</example>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public string VarVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LogResponse {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IpAddress: ").Append(IpAddress).Append("\n");
            sb.Append("  Livemode: ").Append(Livemode).Append("\n");
            sb.Append("  LoggableId: ").Append(LoggableId).Append("\n");
            sb.Append("  LoggableType: ").Append(LoggableType).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  OauthTokenId: ").Append(OauthTokenId).Append("\n");
            sb.Append("  QueryString: ").Append(QueryString).Append("\n");
            sb.Append("  Related: ").Append(Related).Append("\n");
            sb.Append("  RequestBody: ").Append(RequestBody).Append("\n");
            sb.Append("  RequestHeaders: ").Append(RequestHeaders).Append("\n");
            sb.Append("  ResponseBody: ").Append(ResponseBody).Append("\n");
            sb.Append("  ResponseHeaders: ").Append(ResponseHeaders).Append("\n");
            sb.Append("  SearchableTags: ").Append(SearchableTags).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  UserAccountId: ").Append(UserAccountId).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
