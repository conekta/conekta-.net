/*
 * Conekta API
 *
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.2.0
 * Contact: engineering@conekta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Conekta.net.Client.OpenAPIDateConverter;

namespace Conekta.net.Model
{
    /// <summary>
    /// a payout order
    /// </summary>
    [DataContract(Name = "payout_order")]
    public partial class PayoutOrder : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PayoutOrder" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PayoutOrder() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PayoutOrder" /> class.
        /// </summary>
        /// <param name="allowedPayoutMethods">The payout methods that are allowed for the payout order. (required).</param>
        /// <param name="amount">The amount of the payout order. (required).</param>
        /// <param name="currency">The currency in which the payout order is made. (required) (default to &quot;MXN&quot;).</param>
        /// <param name="customerInfo">customerInfo (required).</param>
        /// <param name="metadata">The metadata of the payout order..</param>
        /// <param name="payout">payout (required).</param>
        /// <param name="reason">The reason for the payout order. (required).</param>
        public PayoutOrder(List<string> allowedPayoutMethods = default(List<string>), int amount = default(int), string currency = @"MXN", CustomerInfoJustCustomerId customerInfo = default(CustomerInfoJustCustomerId), Dictionary<string, Object> metadata = default(Dictionary<string, Object>), Payout payout = default(Payout), string reason = default(string))
        {
            // to ensure "allowedPayoutMethods" is required (not null)
            if (allowedPayoutMethods == null)
            {
                throw new ArgumentNullException("allowedPayoutMethods is a required property for PayoutOrder and cannot be null");
            }
            this.AllowedPayoutMethods = allowedPayoutMethods;
            this.Amount = amount;
            // to ensure "currency" is required (not null)
            if (currency == null)
            {
                throw new ArgumentNullException("currency is a required property for PayoutOrder and cannot be null");
            }
            this.Currency = currency;
            // to ensure "customerInfo" is required (not null)
            if (customerInfo == null)
            {
                throw new ArgumentNullException("customerInfo is a required property for PayoutOrder and cannot be null");
            }
            this.CustomerInfo = customerInfo;
            // to ensure "payout" is required (not null)
            if (payout == null)
            {
                throw new ArgumentNullException("payout is a required property for PayoutOrder and cannot be null");
            }
            this.Payout = payout;
            // to ensure "reason" is required (not null)
            if (reason == null)
            {
                throw new ArgumentNullException("reason is a required property for PayoutOrder and cannot be null");
            }
            this.Reason = reason;
            this.Metadata = metadata;
        }

        /// <summary>
        /// The payout methods that are allowed for the payout order.
        /// </summary>
        /// <value>The payout methods that are allowed for the payout order.</value>
        /*
        <example>[&quot;cashout&quot;]</example>
        */
        [DataMember(Name = "allowed_payout_methods", IsRequired = true, EmitDefaultValue = true)]
        public List<string> AllowedPayoutMethods { get; set; }

        /// <summary>
        /// The amount of the payout order.
        /// </summary>
        /// <value>The amount of the payout order.</value>
        /*
        <example>100</example>
        */
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = true)]
        public int Amount { get; set; }

        /// <summary>
        /// The currency in which the payout order is made.
        /// </summary>
        /// <value>The currency in which the payout order is made.</value>
        /*
        <example>MXN</example>
        */
        [DataMember(Name = "currency", IsRequired = true, EmitDefaultValue = true)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets CustomerInfo
        /// </summary>
        [DataMember(Name = "customer_info", IsRequired = true, EmitDefaultValue = true)]
        public CustomerInfoJustCustomerId CustomerInfo { get; set; }

        /// <summary>
        /// The metadata of the payout order.
        /// </summary>
        /// <value>The metadata of the payout order.</value>
        /*
        <example>{&quot;custom_client_id&quot;:&quot;12345&quot;}</example>
        */
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public Dictionary<string, Object> Metadata { get; set; }

        /// <summary>
        /// Gets or Sets Payout
        /// </summary>
        [DataMember(Name = "payout", IsRequired = true, EmitDefaultValue = true)]
        public Payout Payout { get; set; }

        /// <summary>
        /// The reason for the payout order.
        /// </summary>
        /// <value>The reason for the payout order.</value>
        /*
        <example>Payout order for the customer</example>
        */
        [DataMember(Name = "reason", IsRequired = true, EmitDefaultValue = true)]
        public string Reason { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PayoutOrder {\n");
            sb.Append("  AllowedPayoutMethods: ").Append(AllowedPayoutMethods).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  CustomerInfo: ").Append(CustomerInfo).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Payout: ").Append(Payout).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
