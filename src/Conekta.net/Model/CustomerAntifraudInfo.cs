/*
 * Conekta API
 *
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Conekta.net.Client.OpenAPIDateConverter;

namespace Conekta.net.Model
{
    /// <summary>
    /// CustomerAntifraudInfo
    /// </summary>
    [DataContract(Name = "customer_antifraud_info")]
    public partial class CustomerAntifraudInfo : IEquatable<CustomerAntifraudInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerAntifraudInfo" /> class.
        /// </summary>
        /// <param name="accountCreatedAt">accountCreatedAt.</param>
        /// <param name="firstPaidAt">firstPaidAt.</param>
        public CustomerAntifraudInfo(long accountCreatedAt = default(long), long firstPaidAt = default(long))
        {
            this.AccountCreatedAt = accountCreatedAt;
            this.FirstPaidAt = firstPaidAt;
        }

        /// <summary>
        /// Gets or Sets AccountCreatedAt
        /// </summary>
        /// <example>1484040996</example>
        [DataMember(Name = "account_created_at", EmitDefaultValue = false)]
        public long AccountCreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets FirstPaidAt
        /// </summary>
        /// <example>1485151007</example>
        [DataMember(Name = "first_paid_at", EmitDefaultValue = false)]
        public long FirstPaidAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomerAntifraudInfo {\n");
            sb.Append("  AccountCreatedAt: ").Append(AccountCreatedAt).Append("\n");
            sb.Append("  FirstPaidAt: ").Append(FirstPaidAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomerAntifraudInfo);
        }

        /// <summary>
        /// Returns true if CustomerAntifraudInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomerAntifraudInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomerAntifraudInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccountCreatedAt == input.AccountCreatedAt ||
                    this.AccountCreatedAt.Equals(input.AccountCreatedAt)
                ) && 
                (
                    this.FirstPaidAt == input.FirstPaidAt ||
                    this.FirstPaidAt.Equals(input.FirstPaidAt)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.AccountCreatedAt.GetHashCode();
                hashCode = (hashCode * 59) + this.FirstPaidAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
