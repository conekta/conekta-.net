/*
 * Conekta API
 *
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.2.0
 * Contact: engineering@conekta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Conekta.net.Client.OpenAPIDateConverter;

namespace Conekta.net.Model
{
    /// <summary>
    /// Payment method used in the charge. Go to the [payment methods](https://developers.conekta.com/reference/m%C3%A9todos-de-pago) section for more details 
    /// </summary>
    [DataContract(Name = "payment_method_general_request")]
    public partial class PaymentMethodGeneralRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentMethodGeneralRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PaymentMethodGeneralRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentMethodGeneralRequest" /> class.
        /// </summary>
        /// <param name="expiresAt">Method expiration date as unix timestamp.</param>
        /// <param name="monthlyInstallments">How many months without interest to apply, it can be 3, 6, 9, 12 or 18.</param>
        /// <param name="type">Type of payment method (required).</param>
        /// <param name="tokenId">tokenId.</param>
        /// <param name="paymentSourceId">paymentSourceId.</param>
        /// <param name="cvc">Optional, It is a value that allows identifying the security code of the card. Only for PCI merchants.</param>
        /// <param name="contractId">Optional id sent to indicate the bank contract for recurrent card charges..</param>
        /// <param name="customerIpAddress">Optional field used to capture the customer&#39;s IP address for fraud prevention and security monitoring purposes.</param>
        public PaymentMethodGeneralRequest(long expiresAt = default(long), int monthlyInstallments = default(int), string type = default(string), string tokenId = default(string), string paymentSourceId = default(string), string cvc = default(string), string contractId = default(string), string customerIpAddress = default(string))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for PaymentMethodGeneralRequest and cannot be null");
            }
            this.Type = type;
            this.ExpiresAt = expiresAt;
            this.MonthlyInstallments = monthlyInstallments;
            this.TokenId = tokenId;
            this.PaymentSourceId = paymentSourceId;
            this.Cvc = cvc;
            this.ContractId = contractId;
            this.CustomerIpAddress = customerIpAddress;
        }

        /// <summary>
        /// Method expiration date as unix timestamp
        /// </summary>
        /// <value>Method expiration date as unix timestamp</value>
        /*
        <example>1677196303</example>
        */
        [DataMember(Name = "expires_at", EmitDefaultValue = false)]
        public long ExpiresAt { get; set; }

        /// <summary>
        /// How many months without interest to apply, it can be 3, 6, 9, 12 or 18
        /// </summary>
        /// <value>How many months without interest to apply, it can be 3, 6, 9, 12 or 18</value>
        [DataMember(Name = "monthly_installments", EmitDefaultValue = false)]
        public int MonthlyInstallments { get; set; }

        /// <summary>
        /// Type of payment method
        /// </summary>
        /// <value>Type of payment method</value>
        /*
        <example>card</example>
        */
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets TokenId
        /// </summary>
        /*
        <example>tok_2897348234</example>
        */
        [DataMember(Name = "token_id", EmitDefaultValue = false)]
        public string TokenId { get; set; }

        /// <summary>
        /// Gets or Sets PaymentSourceId
        /// </summary>
        /*
        <example>src_2tLkkyfMPh6v7pFry</example>
        */
        [DataMember(Name = "payment_source_id", EmitDefaultValue = false)]
        public string PaymentSourceId { get; set; }

        /// <summary>
        /// Optional, It is a value that allows identifying the security code of the card. Only for PCI merchants
        /// </summary>
        /// <value>Optional, It is a value that allows identifying the security code of the card. Only for PCI merchants</value>
        /*
        <example>123</example>
        */
        [DataMember(Name = "cvc", EmitDefaultValue = false)]
        public string Cvc { get; set; }

        /// <summary>
        /// Optional id sent to indicate the bank contract for recurrent card charges.
        /// </summary>
        /// <value>Optional id sent to indicate the bank contract for recurrent card charges.</value>
        /*
        <example>S781317595</example>
        */
        [DataMember(Name = "contract_id", EmitDefaultValue = false)]
        public string ContractId { get; set; }

        /// <summary>
        /// Optional field used to capture the customer&#39;s IP address for fraud prevention and security monitoring purposes
        /// </summary>
        /// <value>Optional field used to capture the customer&#39;s IP address for fraud prevention and security monitoring purposes</value>
        /*
        <example>0.0.0.0</example>
        */
        [DataMember(Name = "customer_ip_address", EmitDefaultValue = false)]
        public string CustomerIpAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentMethodGeneralRequest {\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  MonthlyInstallments: ").Append(MonthlyInstallments).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  TokenId: ").Append(TokenId).Append("\n");
            sb.Append("  PaymentSourceId: ").Append(PaymentSourceId).Append("\n");
            sb.Append("  Cvc: ").Append(Cvc).Append("\n");
            sb.Append("  ContractId: ").Append(ContractId).Append("\n");
            sb.Append("  CustomerIpAddress: ").Append(CustomerIpAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
