/*
 * Conekta API
 *
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Conekta.net.Client.OpenAPIDateConverter;

namespace Conekta.net.Model
{
    /// <summary>
    /// RiskRulesData
    /// </summary>
    [DataContract(Name = "risk_rules_data")]
    public partial class RiskRulesData : IEquatable<RiskRulesData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RiskRulesData" /> class.
        /// </summary>
        /// <param name="id">rule id.</param>
        /// <param name="field">field to be used for the rule.</param>
        /// <param name="createdAt">rule creation date.</param>
        /// <param name="value">value to be used for the rule.</param>
        /// <param name="isGlobal">if the rule is global.</param>
        /// <param name="isTest">if the rule is test.</param>
        /// <param name="description">description of the rule.</param>
        public RiskRulesData(string id = default(string), string field = default(string), string createdAt = default(string), string value = default(string), bool isGlobal = default(bool), bool isTest = default(bool), string description = default(string))
        {
            this.Id = id;
            this.Field = field;
            this.CreatedAt = createdAt;
            this.Value = value;
            this.IsGlobal = isGlobal;
            this.IsTest = isTest;
            this.Description = description;
        }

        /// <summary>
        /// rule id
        /// </summary>
        /// <value>rule id</value>
        /// <example>618c3f2fdb8b8da9be376af9</example>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// field to be used for the rule
        /// </summary>
        /// <value>field to be used for the rule</value>
        /// <example>email</example>
        [DataMember(Name = "field", EmitDefaultValue = false)]
        public string Field { get; set; }

        /// <summary>
        /// rule creation date
        /// </summary>
        /// <value>rule creation date</value>
        /// <example>2021-11-10T21:52:47.339Z</example>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// value to be used for the rule
        /// </summary>
        /// <value>value to be used for the rule</value>
        /// <example>email@example.com</example>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public string Value { get; set; }

        /// <summary>
        /// if the rule is global
        /// </summary>
        /// <value>if the rule is global</value>
        /// <example>false</example>
        [DataMember(Name = "is_global", EmitDefaultValue = true)]
        public bool IsGlobal { get; set; }

        /// <summary>
        /// if the rule is test
        /// </summary>
        /// <value>if the rule is test</value>
        /// <example>false</example>
        [DataMember(Name = "is_test", EmitDefaultValue = true)]
        public bool IsTest { get; set; }

        /// <summary>
        /// description of the rule
        /// </summary>
        /// <value>description of the rule</value>
        /// <example>secure customer example@example.com</example>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RiskRulesData {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  IsGlobal: ").Append(IsGlobal).Append("\n");
            sb.Append("  IsTest: ").Append(IsTest).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RiskRulesData);
        }

        /// <summary>
        /// Returns true if RiskRulesData instances are equal
        /// </summary>
        /// <param name="input">Instance of RiskRulesData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RiskRulesData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Field == input.Field ||
                    (this.Field != null &&
                    this.Field.Equals(input.Field))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.IsGlobal == input.IsGlobal ||
                    this.IsGlobal.Equals(input.IsGlobal)
                ) && 
                (
                    this.IsTest == input.IsTest ||
                    this.IsTest.Equals(input.IsTest)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Field != null)
                {
                    hashCode = (hashCode * 59) + this.Field.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Value.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsGlobal.GetHashCode();
                hashCode = (hashCode * 59) + this.IsTest.GetHashCode();
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
