/*
 * Conekta API
 *
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Conekta.net.Client.OpenAPIDateConverter;

namespace Conekta.net.Model
{
    /// <summary>
    /// PaymentMethodBnplRequest
    /// </summary>
    [DataContract(Name = "payment_method_bnpl_request")]
    public partial class PaymentMethodBnplRequest : IValidatableObject
    {
        /// <summary>
        /// Product type of the payment method, use for the payment method to know the product type
        /// </summary>
        /// <value>Product type of the payment method, use for the payment method to know the product type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProductTypeEnum
        {
            /// <summary>
            /// Enum KlarnaBnpl for value: klarna_bnpl
            /// </summary>
            [EnumMember(Value = "klarna_bnpl")]
            KlarnaBnpl = 1,

            /// <summary>
            /// Enum CrediteaBnpl for value: creditea_bnpl
            /// </summary>
            [EnumMember(Value = "creditea_bnpl")]
            CrediteaBnpl = 2
        }


        /// <summary>
        /// Product type of the payment method, use for the payment method to know the product type
        /// </summary>
        /// <value>Product type of the payment method, use for the payment method to know the product type</value>
        /*
        <example>klarna_bnpl</example>
        */
        [DataMember(Name = "product_type", IsRequired = true, EmitDefaultValue = true)]
        public ProductTypeEnum ProductType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentMethodBnplRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PaymentMethodBnplRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentMethodBnplRequest" /> class.
        /// </summary>
        /// <param name="type">Type of the payment method (required).</param>
        /// <param name="cancelUrl">URL to redirect the customer after a canceled payment (required).</param>
        /// <param name="canNotExpire">Indicates if the payment method can not expire (required).</param>
        /// <param name="failureUrl">URL to redirect the customer after a failed payment (required).</param>
        /// <param name="productType">Product type of the payment method, use for the payment method to know the product type (required).</param>
        /// <param name="successUrl">URL to redirect the customer after a successful payment (required).</param>
        public PaymentMethodBnplRequest(string type = default(string), string cancelUrl = default(string), bool canNotExpire = default(bool), string failureUrl = default(string), ProductTypeEnum productType = default(ProductTypeEnum), string successUrl = default(string))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for PaymentMethodBnplRequest and cannot be null");
            }
            this.Type = type;
            // to ensure "cancelUrl" is required (not null)
            if (cancelUrl == null)
            {
                throw new ArgumentNullException("cancelUrl is a required property for PaymentMethodBnplRequest and cannot be null");
            }
            this.CancelUrl = cancelUrl;
            this.CanNotExpire = canNotExpire;
            // to ensure "failureUrl" is required (not null)
            if (failureUrl == null)
            {
                throw new ArgumentNullException("failureUrl is a required property for PaymentMethodBnplRequest and cannot be null");
            }
            this.FailureUrl = failureUrl;
            this.ProductType = productType;
            // to ensure "successUrl" is required (not null)
            if (successUrl == null)
            {
                throw new ArgumentNullException("successUrl is a required property for PaymentMethodBnplRequest and cannot be null");
            }
            this.SuccessUrl = successUrl;
        }

        /// <summary>
        /// Type of the payment method
        /// </summary>
        /// <value>Type of the payment method</value>
        /*
        <example>bnpl</example>
        */
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// URL to redirect the customer after a canceled payment
        /// </summary>
        /// <value>URL to redirect the customer after a canceled payment</value>
        /*
        <example>https://example.com/cancel</example>
        */
        [DataMember(Name = "cancel_url", IsRequired = true, EmitDefaultValue = true)]
        public string CancelUrl { get; set; }

        /// <summary>
        /// Indicates if the payment method can not expire
        /// </summary>
        /// <value>Indicates if the payment method can not expire</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "can_not_expire", IsRequired = true, EmitDefaultValue = true)]
        public bool CanNotExpire { get; set; }

        /// <summary>
        /// URL to redirect the customer after a failed payment
        /// </summary>
        /// <value>URL to redirect the customer after a failed payment</value>
        /*
        <example>https://example.com/failure</example>
        */
        [DataMember(Name = "failure_url", IsRequired = true, EmitDefaultValue = true)]
        public string FailureUrl { get; set; }

        /// <summary>
        /// URL to redirect the customer after a successful payment
        /// </summary>
        /// <value>URL to redirect the customer after a successful payment</value>
        /*
        <example>https://example.com/success</example>
        */
        [DataMember(Name = "success_url", IsRequired = true, EmitDefaultValue = true)]
        public string SuccessUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentMethodBnplRequest {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  CancelUrl: ").Append(CancelUrl).Append("\n");
            sb.Append("  CanNotExpire: ").Append(CanNotExpire).Append("\n");
            sb.Append("  FailureUrl: ").Append(FailureUrl).Append("\n");
            sb.Append("  ProductType: ").Append(ProductType).Append("\n");
            sb.Append("  SuccessUrl: ").Append(SuccessUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
