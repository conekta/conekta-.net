/*
 * Conekta API
 *
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Conekta.net.Client.OpenAPIDateConverter;

namespace Conekta.net.Model
{
    /// <summary>
    /// PaymentMethodBnplPayment
    /// </summary>
    [DataContract(Name = "payment_method_bnpl_payment")]
    public partial class PaymentMethodBnplPayment : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentMethodBnplPayment" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PaymentMethodBnplPayment() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentMethodBnplPayment" /> class.
        /// </summary>
        /// <param name="type">type.</param>
        /// <param name="varObject">varObject (required).</param>
        /// <param name="cancelUrl">URL to redirect the customer after a canceled payment.</param>
        /// <param name="expiresAt">Expiration date of the charge (required).</param>
        /// <param name="failureUrl">URL to redirect the customer after a failed payment.</param>
        /// <param name="productType">Product type of the charge (required).</param>
        /// <param name="redirectUrl">URL to redirect the customer to complete the payment.</param>
        /// <param name="successUrl">URL to redirect the customer after a successful payment.</param>
        public PaymentMethodBnplPayment(string type = default(string), string varObject = default(string), string cancelUrl = default(string), long expiresAt = default(long), string failureUrl = default(string), string productType = default(string), string redirectUrl = default(string), string successUrl = default(string))
        {
            // to ensure "varObject" is required (not null)
            if (varObject == null)
            {
                throw new ArgumentNullException("varObject is a required property for PaymentMethodBnplPayment and cannot be null");
            }
            this.Object = varObject;
            this.ExpiresAt = expiresAt;
            // to ensure "productType" is required (not null)
            if (productType == null)
            {
                throw new ArgumentNullException("productType is a required property for PaymentMethodBnplPayment and cannot be null");
            }
            this.ProductType = productType;
            this.Type = type;
            this.CancelUrl = cancelUrl;
            this.FailureUrl = failureUrl;
            this.RedirectUrl = redirectUrl;
            this.SuccessUrl = successUrl;
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Object
        /// </summary>
        /*
        <example>payment_source</example>
        */
        [DataMember(Name = "object", IsRequired = true, EmitDefaultValue = true)]
        public string Object { get; set; }

        /// <summary>
        /// URL to redirect the customer after a canceled payment
        /// </summary>
        /// <value>URL to redirect the customer after a canceled payment</value>
        /*
        <example>https://example.com/cancel</example>
        */
        [DataMember(Name = "cancel_url", EmitDefaultValue = false)]
        public string CancelUrl { get; set; }

        /// <summary>
        /// Expiration date of the charge
        /// </summary>
        /// <value>Expiration date of the charge</value>
        /*
        <example>1683053729</example>
        */
        [DataMember(Name = "expires_at", IsRequired = true, EmitDefaultValue = true)]
        public long ExpiresAt { get; set; }

        /// <summary>
        /// URL to redirect the customer after a failed payment
        /// </summary>
        /// <value>URL to redirect the customer after a failed payment</value>
        /*
        <example>https://example.com/failure</example>
        */
        [DataMember(Name = "failure_url", EmitDefaultValue = false)]
        public string FailureUrl { get; set; }

        /// <summary>
        /// Product type of the charge
        /// </summary>
        /// <value>Product type of the charge</value>
        [DataMember(Name = "product_type", IsRequired = true, EmitDefaultValue = true)]
        public string ProductType { get; set; }

        /// <summary>
        /// URL to redirect the customer to complete the payment
        /// </summary>
        /// <value>URL to redirect the customer to complete the payment</value>
        /*
        <example>https://example.com/redirect</example>
        */
        [DataMember(Name = "redirect_url", EmitDefaultValue = false)]
        public string RedirectUrl { get; set; }

        /// <summary>
        /// URL to redirect the customer after a successful payment
        /// </summary>
        /// <value>URL to redirect the customer after a successful payment</value>
        /*
        <example>https://example.com/success</example>
        */
        [DataMember(Name = "success_url", EmitDefaultValue = false)]
        public string SuccessUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentMethodBnplPayment {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("  CancelUrl: ").Append(CancelUrl).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  FailureUrl: ").Append(FailureUrl).Append("\n");
            sb.Append("  ProductType: ").Append(ProductType).Append("\n");
            sb.Append("  RedirectUrl: ").Append(RedirectUrl).Append("\n");
            sb.Append("  SuccessUrl: ").Append(SuccessUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
