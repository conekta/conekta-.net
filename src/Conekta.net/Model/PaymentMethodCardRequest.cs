/*
 * Conekta API
 *
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.2.0
 * Contact: engineering@conekta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Conekta.net.Client.OpenAPIDateConverter;

namespace Conekta.net.Model
{
    /// <summary>
    /// PaymentMethodCardRequest
    /// </summary>
    [DataContract(Name = "payment_method_card_request")]
    public partial class PaymentMethodCardRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentMethodCardRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PaymentMethodCardRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentMethodCardRequest" /> class.
        /// </summary>
        /// <param name="type">Type of payment method (required).</param>
        /// <param name="cvc">Card security code (required).</param>
        /// <param name="expMonth">Card expiration month (required).</param>
        /// <param name="expYear">Card expiration year (required).</param>
        /// <param name="name">Cardholder name (required).</param>
        /// <param name="number">Card number (required).</param>
        /// <param name="customerIpAddress">Optional field used to capture the customer&#39;s IP address for fraud prevention and security monitoring purposes.</param>
        public PaymentMethodCardRequest(string type = default(string), string cvc = default(string), string expMonth = default(string), string expYear = default(string), string name = default(string), string number = default(string), string customerIpAddress = default(string))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for PaymentMethodCardRequest and cannot be null");
            }
            this.Type = type;
            // to ensure "cvc" is required (not null)
            if (cvc == null)
            {
                throw new ArgumentNullException("cvc is a required property for PaymentMethodCardRequest and cannot be null");
            }
            this.Cvc = cvc;
            // to ensure "expMonth" is required (not null)
            if (expMonth == null)
            {
                throw new ArgumentNullException("expMonth is a required property for PaymentMethodCardRequest and cannot be null");
            }
            this.ExpMonth = expMonth;
            // to ensure "expYear" is required (not null)
            if (expYear == null)
            {
                throw new ArgumentNullException("expYear is a required property for PaymentMethodCardRequest and cannot be null");
            }
            this.ExpYear = expYear;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for PaymentMethodCardRequest and cannot be null");
            }
            this.Name = name;
            // to ensure "number" is required (not null)
            if (number == null)
            {
                throw new ArgumentNullException("number is a required property for PaymentMethodCardRequest and cannot be null");
            }
            this.Number = number;
            this.CustomerIpAddress = customerIpAddress;
        }

        /// <summary>
        /// Type of payment method
        /// </summary>
        /// <value>Type of payment method</value>
        /*
        <example>card | cash | spei | bnpl | pay_by_bank</example>
        */
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Card security code
        /// </summary>
        /// <value>Card security code</value>
        /*
        <example>198</example>
        */
        [DataMember(Name = "cvc", IsRequired = true, EmitDefaultValue = true)]
        public string Cvc { get; set; }

        /// <summary>
        /// Card expiration month
        /// </summary>
        /// <value>Card expiration month</value>
        /*
        <example>12</example>
        */
        [DataMember(Name = "exp_month", IsRequired = true, EmitDefaultValue = true)]
        public string ExpMonth { get; set; }

        /// <summary>
        /// Card expiration year
        /// </summary>
        /// <value>Card expiration year</value>
        /*
        <example>2025</example>
        */
        [DataMember(Name = "exp_year", IsRequired = true, EmitDefaultValue = true)]
        public string ExpYear { get; set; }

        /// <summary>
        /// Cardholder name
        /// </summary>
        /// <value>Cardholder name</value>
        /*
        <example>John Doe</example>
        */
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Card number
        /// </summary>
        /// <value>Card number</value>
        /*
        <example>4242424242424242</example>
        */
        [DataMember(Name = "number", IsRequired = true, EmitDefaultValue = true)]
        public string Number { get; set; }

        /// <summary>
        /// Optional field used to capture the customer&#39;s IP address for fraud prevention and security monitoring purposes
        /// </summary>
        /// <value>Optional field used to capture the customer&#39;s IP address for fraud prevention and security monitoring purposes</value>
        /*
        <example>0.0.0.0</example>
        */
        [DataMember(Name = "customer_ip_address", EmitDefaultValue = false)]
        public string CustomerIpAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentMethodCardRequest {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Cvc: ").Append(Cvc).Append("\n");
            sb.Append("  ExpMonth: ").Append(ExpMonth).Append("\n");
            sb.Append("  ExpYear: ").Append(ExpYear).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  CustomerIpAddress: ").Append(CustomerIpAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Cvc (string) maxLength
            if (this.Cvc != null && this.Cvc.Length > 4)
            {
                yield return new ValidationResult("Invalid value for Cvc, length must be less than 4.", new [] { "Cvc" });
            }

            // Cvc (string) minLength
            if (this.Cvc != null && this.Cvc.Length < 3)
            {
                yield return new ValidationResult("Invalid value for Cvc, length must be greater than 3.", new [] { "Cvc" });
            }

            // ExpMonth (string) maxLength
            if (this.ExpMonth != null && this.ExpMonth.Length > 2)
            {
                yield return new ValidationResult("Invalid value for ExpMonth, length must be less than 2.", new [] { "ExpMonth" });
            }

            // ExpMonth (string) minLength
            if (this.ExpMonth != null && this.ExpMonth.Length < 2)
            {
                yield return new ValidationResult("Invalid value for ExpMonth, length must be greater than 2.", new [] { "ExpMonth" });
            }

            // ExpYear (string) maxLength
            if (this.ExpYear != null && this.ExpYear.Length > 4)
            {
                yield return new ValidationResult("Invalid value for ExpYear, length must be less than 4.", new [] { "ExpYear" });
            }

            // ExpYear (string) minLength
            if (this.ExpYear != null && this.ExpYear.Length < 4)
            {
                yield return new ValidationResult("Invalid value for ExpYear, length must be greater than 4.", new [] { "ExpYear" });
            }

            yield break;
        }
    }

}
