/*
 * Conekta API
 *
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Conekta.net.Client.OpenAPIDateConverter;

namespace Conekta.net.Model
{
    /// <summary>
    /// use for bank transfer responses
    /// </summary>
    [DataContract(Name = "charge_data_payment_method_bank_transfer_response")]
    public partial class ChargeDataPaymentMethodBankTransferResponse : IEquatable<ChargeDataPaymentMethodBankTransferResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChargeDataPaymentMethodBankTransferResponse" /> class.
        /// </summary>
        /// <param name="bank">bank.</param>
        /// <param name="clabe">clabe.</param>
        /// <param name="description">description.</param>
        /// <param name="executedAt">executedAt.</param>
        /// <param name="expiresAt">expiresAt.</param>
        /// <param name="issuingAccountBank">issuingAccountBank.</param>
        /// <param name="issuingAccountNumber">issuingAccountNumber.</param>
        /// <param name="issuingAccountHolderName">issuingAccountHolderName.</param>
        /// <param name="issuingAccountTaxId">issuingAccountTaxId.</param>
        /// <param name="paymentAttempts">paymentAttempts.</param>
        /// <param name="receivingAccountHolderName">receivingAccountHolderName.</param>
        /// <param name="receivingAccountNumber">receivingAccountNumber.</param>
        /// <param name="receivingAccountBank">receivingAccountBank.</param>
        /// <param name="receivingAccountTaxId">receivingAccountTaxId.</param>
        /// <param name="referenceNumber">referenceNumber.</param>
        /// <param name="trackingCode">trackingCode.</param>
        public ChargeDataPaymentMethodBankTransferResponse(string bank = default(string), string clabe = default(string), string description = default(string), int? executedAt = default(int?), long expiresAt = default(long), string issuingAccountBank = default(string), string issuingAccountNumber = default(string), string issuingAccountHolderName = default(string), string issuingAccountTaxId = default(string), List<Object> paymentAttempts = default(List<Object>), string receivingAccountHolderName = default(string), string receivingAccountNumber = default(string), string receivingAccountBank = default(string), string receivingAccountTaxId = default(string), string referenceNumber = default(string), string trackingCode = default(string))
        {
            this.Bank = bank;
            this.Clabe = clabe;
            this.Description = description;
            this.ExecutedAt = executedAt;
            this.ExpiresAt = expiresAt;
            this.IssuingAccountBank = issuingAccountBank;
            this.IssuingAccountNumber = issuingAccountNumber;
            this.IssuingAccountHolderName = issuingAccountHolderName;
            this.IssuingAccountTaxId = issuingAccountTaxId;
            this.PaymentAttempts = paymentAttempts;
            this.ReceivingAccountHolderName = receivingAccountHolderName;
            this.ReceivingAccountNumber = receivingAccountNumber;
            this.ReceivingAccountBank = receivingAccountBank;
            this.ReceivingAccountTaxId = receivingAccountTaxId;
            this.ReferenceNumber = referenceNumber;
            this.TrackingCode = trackingCode;
        }

        /// <summary>
        /// Gets or Sets Bank
        /// </summary>
        /// <example>STP</example>
        [DataMember(Name = "bank", EmitDefaultValue = false)]
        public string Bank { get; set; }

        /// <summary>
        /// Gets or Sets Clabe
        /// </summary>
        /// <example>646180111805034237</example>
        [DataMember(Name = "clabe", EmitDefaultValue = false)]
        public string Clabe { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets ExecutedAt
        /// </summary>
        [DataMember(Name = "executed_at", EmitDefaultValue = true)]
        public int? ExecutedAt { get; set; }

        /// <summary>
        /// Gets or Sets ExpiresAt
        /// </summary>
        /// <example>1683053729</example>
        [DataMember(Name = "expires_at", EmitDefaultValue = false)]
        public long ExpiresAt { get; set; }

        /// <summary>
        /// Gets or Sets IssuingAccountBank
        /// </summary>
        [DataMember(Name = "issuing_account_bank", EmitDefaultValue = true)]
        public string IssuingAccountBank { get; set; }

        /// <summary>
        /// Gets or Sets IssuingAccountNumber
        /// </summary>
        [DataMember(Name = "issuing_account_number", EmitDefaultValue = true)]
        public string IssuingAccountNumber { get; set; }

        /// <summary>
        /// Gets or Sets IssuingAccountHolderName
        /// </summary>
        [DataMember(Name = "issuing_account_holder_name", EmitDefaultValue = true)]
        public string IssuingAccountHolderName { get; set; }

        /// <summary>
        /// Gets or Sets IssuingAccountTaxId
        /// </summary>
        [DataMember(Name = "issuing_account_tax_id", EmitDefaultValue = true)]
        public string IssuingAccountTaxId { get; set; }

        /// <summary>
        /// Gets or Sets PaymentAttempts
        /// </summary>
        [DataMember(Name = "payment_attempts", EmitDefaultValue = false)]
        public List<Object> PaymentAttempts { get; set; }

        /// <summary>
        /// Gets or Sets ReceivingAccountHolderName
        /// </summary>
        [DataMember(Name = "receiving_account_holder_name", EmitDefaultValue = true)]
        public string ReceivingAccountHolderName { get; set; }

        /// <summary>
        /// Gets or Sets ReceivingAccountNumber
        /// </summary>
        /// <example>646180111805034237</example>
        [DataMember(Name = "receiving_account_number", EmitDefaultValue = false)]
        public string ReceivingAccountNumber { get; set; }

        /// <summary>
        /// Gets or Sets ReceivingAccountBank
        /// </summary>
        /// <example>STP</example>
        [DataMember(Name = "receiving_account_bank", EmitDefaultValue = false)]
        public string ReceivingAccountBank { get; set; }

        /// <summary>
        /// Gets or Sets ReceivingAccountTaxId
        /// </summary>
        [DataMember(Name = "receiving_account_tax_id", EmitDefaultValue = true)]
        public string ReceivingAccountTaxId { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceNumber
        /// </summary>
        [DataMember(Name = "reference_number", EmitDefaultValue = true)]
        public string ReferenceNumber { get; set; }

        /// <summary>
        /// Gets or Sets TrackingCode
        /// </summary>
        [DataMember(Name = "tracking_code", EmitDefaultValue = true)]
        public string TrackingCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChargeDataPaymentMethodBankTransferResponse {\n");
            sb.Append("  Bank: ").Append(Bank).Append("\n");
            sb.Append("  Clabe: ").Append(Clabe).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ExecutedAt: ").Append(ExecutedAt).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  IssuingAccountBank: ").Append(IssuingAccountBank).Append("\n");
            sb.Append("  IssuingAccountNumber: ").Append(IssuingAccountNumber).Append("\n");
            sb.Append("  IssuingAccountHolderName: ").Append(IssuingAccountHolderName).Append("\n");
            sb.Append("  IssuingAccountTaxId: ").Append(IssuingAccountTaxId).Append("\n");
            sb.Append("  PaymentAttempts: ").Append(PaymentAttempts).Append("\n");
            sb.Append("  ReceivingAccountHolderName: ").Append(ReceivingAccountHolderName).Append("\n");
            sb.Append("  ReceivingAccountNumber: ").Append(ReceivingAccountNumber).Append("\n");
            sb.Append("  ReceivingAccountBank: ").Append(ReceivingAccountBank).Append("\n");
            sb.Append("  ReceivingAccountTaxId: ").Append(ReceivingAccountTaxId).Append("\n");
            sb.Append("  ReferenceNumber: ").Append(ReferenceNumber).Append("\n");
            sb.Append("  TrackingCode: ").Append(TrackingCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChargeDataPaymentMethodBankTransferResponse);
        }

        /// <summary>
        /// Returns true if ChargeDataPaymentMethodBankTransferResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ChargeDataPaymentMethodBankTransferResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChargeDataPaymentMethodBankTransferResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Bank == input.Bank ||
                    (this.Bank != null &&
                    this.Bank.Equals(input.Bank))
                ) && 
                (
                    this.Clabe == input.Clabe ||
                    (this.Clabe != null &&
                    this.Clabe.Equals(input.Clabe))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ExecutedAt == input.ExecutedAt ||
                    (this.ExecutedAt != null &&
                    this.ExecutedAt.Equals(input.ExecutedAt))
                ) && 
                (
                    this.ExpiresAt == input.ExpiresAt ||
                    this.ExpiresAt.Equals(input.ExpiresAt)
                ) && 
                (
                    this.IssuingAccountBank == input.IssuingAccountBank ||
                    (this.IssuingAccountBank != null &&
                    this.IssuingAccountBank.Equals(input.IssuingAccountBank))
                ) && 
                (
                    this.IssuingAccountNumber == input.IssuingAccountNumber ||
                    (this.IssuingAccountNumber != null &&
                    this.IssuingAccountNumber.Equals(input.IssuingAccountNumber))
                ) && 
                (
                    this.IssuingAccountHolderName == input.IssuingAccountHolderName ||
                    (this.IssuingAccountHolderName != null &&
                    this.IssuingAccountHolderName.Equals(input.IssuingAccountHolderName))
                ) && 
                (
                    this.IssuingAccountTaxId == input.IssuingAccountTaxId ||
                    (this.IssuingAccountTaxId != null &&
                    this.IssuingAccountTaxId.Equals(input.IssuingAccountTaxId))
                ) && 
                (
                    this.PaymentAttempts == input.PaymentAttempts ||
                    this.PaymentAttempts != null &&
                    input.PaymentAttempts != null &&
                    this.PaymentAttempts.SequenceEqual(input.PaymentAttempts)
                ) && 
                (
                    this.ReceivingAccountHolderName == input.ReceivingAccountHolderName ||
                    (this.ReceivingAccountHolderName != null &&
                    this.ReceivingAccountHolderName.Equals(input.ReceivingAccountHolderName))
                ) && 
                (
                    this.ReceivingAccountNumber == input.ReceivingAccountNumber ||
                    (this.ReceivingAccountNumber != null &&
                    this.ReceivingAccountNumber.Equals(input.ReceivingAccountNumber))
                ) && 
                (
                    this.ReceivingAccountBank == input.ReceivingAccountBank ||
                    (this.ReceivingAccountBank != null &&
                    this.ReceivingAccountBank.Equals(input.ReceivingAccountBank))
                ) && 
                (
                    this.ReceivingAccountTaxId == input.ReceivingAccountTaxId ||
                    (this.ReceivingAccountTaxId != null &&
                    this.ReceivingAccountTaxId.Equals(input.ReceivingAccountTaxId))
                ) && 
                (
                    this.ReferenceNumber == input.ReferenceNumber ||
                    (this.ReferenceNumber != null &&
                    this.ReferenceNumber.Equals(input.ReferenceNumber))
                ) && 
                (
                    this.TrackingCode == input.TrackingCode ||
                    (this.TrackingCode != null &&
                    this.TrackingCode.Equals(input.TrackingCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Bank != null)
                {
                    hashCode = (hashCode * 59) + this.Bank.GetHashCode();
                }
                if (this.Clabe != null)
                {
                    hashCode = (hashCode * 59) + this.Clabe.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.ExecutedAt != null)
                {
                    hashCode = (hashCode * 59) + this.ExecutedAt.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ExpiresAt.GetHashCode();
                if (this.IssuingAccountBank != null)
                {
                    hashCode = (hashCode * 59) + this.IssuingAccountBank.GetHashCode();
                }
                if (this.IssuingAccountNumber != null)
                {
                    hashCode = (hashCode * 59) + this.IssuingAccountNumber.GetHashCode();
                }
                if (this.IssuingAccountHolderName != null)
                {
                    hashCode = (hashCode * 59) + this.IssuingAccountHolderName.GetHashCode();
                }
                if (this.IssuingAccountTaxId != null)
                {
                    hashCode = (hashCode * 59) + this.IssuingAccountTaxId.GetHashCode();
                }
                if (this.PaymentAttempts != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentAttempts.GetHashCode();
                }
                if (this.ReceivingAccountHolderName != null)
                {
                    hashCode = (hashCode * 59) + this.ReceivingAccountHolderName.GetHashCode();
                }
                if (this.ReceivingAccountNumber != null)
                {
                    hashCode = (hashCode * 59) + this.ReceivingAccountNumber.GetHashCode();
                }
                if (this.ReceivingAccountBank != null)
                {
                    hashCode = (hashCode * 59) + this.ReceivingAccountBank.GetHashCode();
                }
                if (this.ReceivingAccountTaxId != null)
                {
                    hashCode = (hashCode * 59) + this.ReceivingAccountTaxId.GetHashCode();
                }
                if (this.ReferenceNumber != null)
                {
                    hashCode = (hashCode * 59) + this.ReferenceNumber.GetHashCode();
                }
                if (this.TrackingCode != null)
                {
                    hashCode = (hashCode * 59) + this.TrackingCode.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
