/*
 * Conekta API
 *
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.2.0
 * Contact: engineering@conekta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Conekta.net.Client.OpenAPIDateConverter;

namespace Conekta.net.Model
{
    /// <summary>
    /// [Checkout](https://developers.conekta.com/v2.2.0/reference/payment-link) details 
    /// </summary>
    [DataContract(Name = "checkout_request")]
    public partial class CheckoutRequest : IValidatableObject
    {
        /// <summary>
        /// Defines AllowedPaymentMethods
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AllowedPaymentMethodsEnum
        {
            /// <summary>
            /// Enum Cash for value: cash
            /// </summary>
            [EnumMember(Value = "cash")]
            Cash = 1,

            /// <summary>
            /// Enum Card for value: card
            /// </summary>
            [EnumMember(Value = "card")]
            Card = 2,

            /// <summary>
            /// Enum BankTransfer for value: bank_transfer
            /// </summary>
            [EnumMember(Value = "bank_transfer")]
            BankTransfer = 3,

            /// <summary>
            /// Enum Bnpl for value: bnpl
            /// </summary>
            [EnumMember(Value = "bnpl")]
            Bnpl = 4,

            /// <summary>
            /// Enum PayByBank for value: pay_by_bank
            /// </summary>
            [EnumMember(Value = "pay_by_bank")]
            PayByBank = 5
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CheckoutRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutRequest" /> class.
        /// </summary>
        /// <param name="allowedPaymentMethods">Are the payment methods available for this link. For subscriptions, only &#39;card&#39; is allowed due to the recurring nature of the payments. (required).</param>
        /// <param name="planIds">List of plan IDs that will be available for subscription. This field is required for subscription payments..</param>
        /// <param name="expiresAt">Unix timestamp of checkout expiration.</param>
        /// <param name="failureUrl">Redirection url back to the site in case of failed payment, applies only to HostedPayment..</param>
        /// <param name="monthlyInstallmentsEnabled">monthlyInstallmentsEnabled.</param>
        /// <param name="monthlyInstallmentsOptions">monthlyInstallmentsOptions.</param>
        /// <param name="maxFailedRetries">Number of retries allowed before the checkout is marked as failed.</param>
        /// <param name="name">Reason for payment.</param>
        /// <param name="onDemandEnabled">onDemandEnabled.</param>
        /// <param name="redirectionTime">number of seconds to wait before redirecting to the success_url.</param>
        /// <param name="successUrl">Redirection url back to the site in case of successful payment, applies only to HostedPayment.</param>
        /// <param name="type">This field represents the type of checkout.</param>
        public CheckoutRequest(List<AllowedPaymentMethodsEnum> allowedPaymentMethods = default(List<AllowedPaymentMethodsEnum>), List<string> planIds = default(List<string>), long expiresAt = default(long), string failureUrl = default(string), bool monthlyInstallmentsEnabled = default(bool), List<int> monthlyInstallmentsOptions = default(List<int>), int maxFailedRetries = default(int), string name = default(string), bool onDemandEnabled = default(bool), int redirectionTime = default(int), string successUrl = default(string), string type = default(string))
        {
            // to ensure "allowedPaymentMethods" is required (not null)
            if (allowedPaymentMethods == null)
            {
                throw new ArgumentNullException("allowedPaymentMethods is a required property for CheckoutRequest and cannot be null");
            }
            this.AllowedPaymentMethods = allowedPaymentMethods;
            this.PlanIds = planIds;
            this.ExpiresAt = expiresAt;
            this.FailureUrl = failureUrl;
            this.MonthlyInstallmentsEnabled = monthlyInstallmentsEnabled;
            this.MonthlyInstallmentsOptions = monthlyInstallmentsOptions;
            this.MaxFailedRetries = maxFailedRetries;
            this.Name = name;
            this.OnDemandEnabled = onDemandEnabled;
            this.RedirectionTime = redirectionTime;
            this.SuccessUrl = successUrl;
            this.Type = type;
        }

        /// <summary>
        /// Are the payment methods available for this link. For subscriptions, only &#39;card&#39; is allowed due to the recurring nature of the payments.
        /// </summary>
        /// <value>Are the payment methods available for this link. For subscriptions, only &#39;card&#39; is allowed due to the recurring nature of the payments.</value>
        /*
        <example>[&quot;cash&quot;,&quot;card&quot;,&quot;bank_transfer&quot;,&quot;bnpl&quot;,&quot;pay_by_bank&quot;]</example>
        */
        [DataMember(Name = "allowed_payment_methods", IsRequired = true, EmitDefaultValue = true)]
        public List<CheckoutRequest.AllowedPaymentMethodsEnum> AllowedPaymentMethods { get; set; }

        /// <summary>
        /// List of plan IDs that will be available for subscription. This field is required for subscription payments.
        /// </summary>
        /// <value>List of plan IDs that will be available for subscription. This field is required for subscription payments.</value>
        /*
        <example>[&quot;plan_123&quot;,&quot;plan_456&quot;]</example>
        */
        [DataMember(Name = "plan_ids", EmitDefaultValue = false)]
        public List<string> PlanIds { get; set; }

        /// <summary>
        /// Unix timestamp of checkout expiration
        /// </summary>
        /// <value>Unix timestamp of checkout expiration</value>
        [DataMember(Name = "expires_at", EmitDefaultValue = false)]
        public long ExpiresAt { get; set; }

        /// <summary>
        /// Redirection url back to the site in case of failed payment, applies only to HostedPayment.
        /// </summary>
        /// <value>Redirection url back to the site in case of failed payment, applies only to HostedPayment.</value>
        [DataMember(Name = "failure_url", EmitDefaultValue = false)]
        public string FailureUrl { get; set; }

        /// <summary>
        /// Gets or Sets MonthlyInstallmentsEnabled
        /// </summary>
        /*
        <example>false</example>
        */
        [DataMember(Name = "monthly_installments_enabled", EmitDefaultValue = true)]
        public bool MonthlyInstallmentsEnabled { get; set; }

        /// <summary>
        /// Gets or Sets MonthlyInstallmentsOptions
        /// </summary>
        /*
        <example>[3,6,12]</example>
        */
        [DataMember(Name = "monthly_installments_options", EmitDefaultValue = false)]
        public List<int> MonthlyInstallmentsOptions { get; set; }

        /// <summary>
        /// Number of retries allowed before the checkout is marked as failed
        /// </summary>
        /// <value>Number of retries allowed before the checkout is marked as failed</value>
        /*
        <example>3</example>
        */
        [DataMember(Name = "max_failed_retries", EmitDefaultValue = false)]
        public int MaxFailedRetries { get; set; }

        /// <summary>
        /// Reason for payment
        /// </summary>
        /// <value>Reason for payment</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets OnDemandEnabled
        /// </summary>
        /*
        <example>true</example>
        */
        [DataMember(Name = "on_demand_enabled", EmitDefaultValue = true)]
        public bool OnDemandEnabled { get; set; }

        /// <summary>
        /// number of seconds to wait before redirecting to the success_url
        /// </summary>
        /// <value>number of seconds to wait before redirecting to the success_url</value>
        /*
        <example>10</example>
        */
        [DataMember(Name = "redirection_time", EmitDefaultValue = false)]
        public int RedirectionTime { get; set; }

        /// <summary>
        /// Redirection url back to the site in case of successful payment, applies only to HostedPayment
        /// </summary>
        /// <value>Redirection url back to the site in case of successful payment, applies only to HostedPayment</value>
        [DataMember(Name = "success_url", EmitDefaultValue = false)]
        public string SuccessUrl { get; set; }

        /// <summary>
        /// This field represents the type of checkout
        /// </summary>
        /// <value>This field represents the type of checkout</value>
        /*
        <example>Integration</example>
        */
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CheckoutRequest {\n");
            sb.Append("  AllowedPaymentMethods: ").Append(AllowedPaymentMethods).Append("\n");
            sb.Append("  PlanIds: ").Append(PlanIds).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  FailureUrl: ").Append(FailureUrl).Append("\n");
            sb.Append("  MonthlyInstallmentsEnabled: ").Append(MonthlyInstallmentsEnabled).Append("\n");
            sb.Append("  MonthlyInstallmentsOptions: ").Append(MonthlyInstallmentsOptions).Append("\n");
            sb.Append("  MaxFailedRetries: ").Append(MaxFailedRetries).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OnDemandEnabled: ").Append(OnDemandEnabled).Append("\n");
            sb.Append("  RedirectionTime: ").Append(RedirectionTime).Append("\n");
            sb.Append("  SuccessUrl: ").Append(SuccessUrl).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
