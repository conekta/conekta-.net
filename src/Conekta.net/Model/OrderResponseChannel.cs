/*
 * Conekta API
 *
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Conekta.net.Client.OpenAPIDateConverter;

namespace Conekta.net.Model
{
    /// <summary>
    /// OrderResponseChannel
    /// </summary>
    [DataContract(Name = "order_response_channel")]
    public partial class OrderResponseChannel : IEquatable<OrderResponseChannel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderResponseChannel" /> class.
        /// </summary>
        /// <param name="segment">segment.</param>
        /// <param name="checkoutRequestId">checkoutRequestId.</param>
        /// <param name="checkoutRequestType">checkoutRequestType.</param>
        /// <param name="id">id.</param>
        public OrderResponseChannel(string segment = default(string), string checkoutRequestId = default(string), string checkoutRequestType = default(string), string id = default(string))
        {
            this.Segment = segment;
            this.CheckoutRequestId = checkoutRequestId;
            this.CheckoutRequestType = checkoutRequestType;
            this.Id = id;
        }

        /// <summary>
        /// Gets or Sets Segment
        /// </summary>
        /// <example>&quot;Checkout&quot;</example>
        [DataMember(Name = "segment", EmitDefaultValue = false)]
        public string Segment { get; set; }

        /// <summary>
        /// Gets or Sets CheckoutRequestId
        /// </summary>
        /// <example>&quot;6fca054a-8519-4c43-971e-cea35cc519bb&quot;</example>
        [DataMember(Name = "checkout_request_id", EmitDefaultValue = false)]
        public string CheckoutRequestId { get; set; }

        /// <summary>
        /// Gets or Sets CheckoutRequestType
        /// </summary>
        /// <example>&quot;HostedPayment&quot;</example>
        [DataMember(Name = "checkout_request_type", EmitDefaultValue = false)]
        public string CheckoutRequestType { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        /// <example>&quot;channel_2tNDzhA4Akmzj11AU&quot;</example>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderResponseChannel {\n");
            sb.Append("  Segment: ").Append(Segment).Append("\n");
            sb.Append("  CheckoutRequestId: ").Append(CheckoutRequestId).Append("\n");
            sb.Append("  CheckoutRequestType: ").Append(CheckoutRequestType).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderResponseChannel);
        }

        /// <summary>
        /// Returns true if OrderResponseChannel instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderResponseChannel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderResponseChannel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Segment == input.Segment ||
                    (this.Segment != null &&
                    this.Segment.Equals(input.Segment))
                ) && 
                (
                    this.CheckoutRequestId == input.CheckoutRequestId ||
                    (this.CheckoutRequestId != null &&
                    this.CheckoutRequestId.Equals(input.CheckoutRequestId))
                ) && 
                (
                    this.CheckoutRequestType == input.CheckoutRequestType ||
                    (this.CheckoutRequestType != null &&
                    this.CheckoutRequestType.Equals(input.CheckoutRequestType))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Segment != null)
                {
                    hashCode = (hashCode * 59) + this.Segment.GetHashCode();
                }
                if (this.CheckoutRequestId != null)
                {
                    hashCode = (hashCode * 59) + this.CheckoutRequestId.GetHashCode();
                }
                if (this.CheckoutRequestType != null)
                {
                    hashCode = (hashCode * 59) + this.CheckoutRequestType.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
