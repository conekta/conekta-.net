/*
 * Conekta API
 *
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.2.0
 * Contact: engineering@conekta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Conekta.net.Client;
using Conekta.net.Model;

namespace Conekta.net.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICompaniesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Company
        /// </summary>
        /// <remarks>
        /// Create a new company.
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCompanyRequest">Company data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CompanyResponse</returns>
        CompanyResponse CreateCompany(CreateCompanyRequest createCompanyRequest, int operationIndex = 0);

        /// <summary>
        /// Create Company
        /// </summary>
        /// <remarks>
        /// Create a new company.
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCompanyRequest">Company data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CompanyResponse</returns>
        ApiResponse<CompanyResponse> CreateCompanyWithHttpInfo(CreateCompanyRequest createCompanyRequest, int operationIndex = 0);
        /// <summary>
        /// Get List of Companies
        /// </summary>
        /// <remarks>
        /// Consume the list of child companies.  This is used for holding companies with several child entities.
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
        /// <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
        /// <param name="next">next page (optional)</param>
        /// <param name="previous">previous page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetCompaniesResponse</returns>
        GetCompaniesResponse GetCompanies(string acceptLanguage = default(string), int? limit = default(int?), string search = default(string), string next = default(string), string previous = default(string), int operationIndex = 0);

        /// <summary>
        /// Get List of Companies
        /// </summary>
        /// <remarks>
        /// Consume the list of child companies.  This is used for holding companies with several child entities.
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
        /// <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
        /// <param name="next">next page (optional)</param>
        /// <param name="previous">previous page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetCompaniesResponse</returns>
        ApiResponse<GetCompaniesResponse> GetCompaniesWithHttpInfo(string acceptLanguage = default(string), int? limit = default(int?), string search = default(string), string next = default(string), string previous = default(string), int operationIndex = 0);
        /// <summary>
        /// Get Company
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CompanyResponse</returns>
        CompanyResponse GetCompany(string id, string acceptLanguage = default(string), int operationIndex = 0);

        /// <summary>
        /// Get Company
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CompanyResponse</returns>
        ApiResponse<CompanyResponse> GetCompanyWithHttpInfo(string id, string acceptLanguage = default(string), int operationIndex = 0);
        /// <summary>
        /// Get Company Documents
        /// </summary>
        /// <remarks>
        /// Retrieve a list of documents associated with a specific company.
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The unique identifier of the company.</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CompanyDocumentResponse&gt;</returns>
        List<CompanyDocumentResponse> GetCompanyDocuments(string companyId, string acceptLanguage = default(string), int operationIndex = 0);

        /// <summary>
        /// Get Company Documents
        /// </summary>
        /// <remarks>
        /// Retrieve a list of documents associated with a specific company.
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The unique identifier of the company.</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CompanyDocumentResponse&gt;</returns>
        ApiResponse<List<CompanyDocumentResponse>> GetCompanyDocumentsWithHttpInfo(string companyId, string acceptLanguage = default(string), int operationIndex = 0);
        /// <summary>
        /// Get Current Company
        /// </summary>
        /// <remarks>
        /// Retrieves information about the currently authenticated company. This endpoint returns the same data as the standard company endpoint but automatically uses the current company&#39;s context.
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CompanyResponse</returns>
        CompanyResponse GetCurrentCompany(string acceptLanguage = default(string), int operationIndex = 0);

        /// <summary>
        /// Get Current Company
        /// </summary>
        /// <remarks>
        /// Retrieves information about the currently authenticated company. This endpoint returns the same data as the standard company endpoint but automatically uses the current company&#39;s context.
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CompanyResponse</returns>
        ApiResponse<CompanyResponse> GetCurrentCompanyWithHttpInfo(string acceptLanguage = default(string), int operationIndex = 0);
        /// <summary>
        /// Update Company Document
        /// </summary>
        /// <remarks>
        /// Updates an existing document associated with a specific company.
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The unique identifier of the company.</param>
        /// <param name="companyDocumentRequest">Document information to update.</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CompanyDocumentResponse</returns>
        CompanyDocumentResponse UpdateCompanyDocument(string companyId, CompanyDocumentRequest companyDocumentRequest, string acceptLanguage = default(string), int operationIndex = 0);

        /// <summary>
        /// Update Company Document
        /// </summary>
        /// <remarks>
        /// Updates an existing document associated with a specific company.
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The unique identifier of the company.</param>
        /// <param name="companyDocumentRequest">Document information to update.</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CompanyDocumentResponse</returns>
        ApiResponse<CompanyDocumentResponse> UpdateCompanyDocumentWithHttpInfo(string companyId, CompanyDocumentRequest companyDocumentRequest, string acceptLanguage = default(string), int operationIndex = 0);
        /// <summary>
        /// Upload Company Document
        /// </summary>
        /// <remarks>
        /// Uploads a document associated with a specific company.
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The unique identifier of the company.</param>
        /// <param name="companyDocumentRequest">Document information to upload.</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CompanyDocumentResponse</returns>
        CompanyDocumentResponse UploadCompanyDocument(string companyId, CompanyDocumentRequest companyDocumentRequest, string acceptLanguage = default(string), int operationIndex = 0);

        /// <summary>
        /// Upload Company Document
        /// </summary>
        /// <remarks>
        /// Uploads a document associated with a specific company.
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The unique identifier of the company.</param>
        /// <param name="companyDocumentRequest">Document information to upload.</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CompanyDocumentResponse</returns>
        ApiResponse<CompanyDocumentResponse> UploadCompanyDocumentWithHttpInfo(string companyId, CompanyDocumentRequest companyDocumentRequest, string acceptLanguage = default(string), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICompaniesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Company
        /// </summary>
        /// <remarks>
        /// Create a new company.
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCompanyRequest">Company data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompanyResponse</returns>
        System.Threading.Tasks.Task<CompanyResponse> CreateCompanyAsync(CreateCompanyRequest createCompanyRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create Company
        /// </summary>
        /// <remarks>
        /// Create a new company.
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCompanyRequest">Company data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompanyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CompanyResponse>> CreateCompanyWithHttpInfoAsync(CreateCompanyRequest createCompanyRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get List of Companies
        /// </summary>
        /// <remarks>
        /// Consume the list of child companies.  This is used for holding companies with several child entities.
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
        /// <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
        /// <param name="next">next page (optional)</param>
        /// <param name="previous">previous page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCompaniesResponse</returns>
        System.Threading.Tasks.Task<GetCompaniesResponse> GetCompaniesAsync(string acceptLanguage = default(string), int? limit = default(int?), string search = default(string), string next = default(string), string previous = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get List of Companies
        /// </summary>
        /// <remarks>
        /// Consume the list of child companies.  This is used for holding companies with several child entities.
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
        /// <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
        /// <param name="next">next page (optional)</param>
        /// <param name="previous">previous page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCompaniesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCompaniesResponse>> GetCompaniesWithHttpInfoAsync(string acceptLanguage = default(string), int? limit = default(int?), string search = default(string), string next = default(string), string previous = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Company
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompanyResponse</returns>
        System.Threading.Tasks.Task<CompanyResponse> GetCompanyAsync(string id, string acceptLanguage = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Company
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompanyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CompanyResponse>> GetCompanyWithHttpInfoAsync(string id, string acceptLanguage = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Company Documents
        /// </summary>
        /// <remarks>
        /// Retrieve a list of documents associated with a specific company.
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The unique identifier of the company.</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CompanyDocumentResponse&gt;</returns>
        System.Threading.Tasks.Task<List<CompanyDocumentResponse>> GetCompanyDocumentsAsync(string companyId, string acceptLanguage = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Company Documents
        /// </summary>
        /// <remarks>
        /// Retrieve a list of documents associated with a specific company.
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The unique identifier of the company.</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CompanyDocumentResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CompanyDocumentResponse>>> GetCompanyDocumentsWithHttpInfoAsync(string companyId, string acceptLanguage = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Current Company
        /// </summary>
        /// <remarks>
        /// Retrieves information about the currently authenticated company. This endpoint returns the same data as the standard company endpoint but automatically uses the current company&#39;s context.
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompanyResponse</returns>
        System.Threading.Tasks.Task<CompanyResponse> GetCurrentCompanyAsync(string acceptLanguage = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Current Company
        /// </summary>
        /// <remarks>
        /// Retrieves information about the currently authenticated company. This endpoint returns the same data as the standard company endpoint but automatically uses the current company&#39;s context.
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompanyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CompanyResponse>> GetCurrentCompanyWithHttpInfoAsync(string acceptLanguage = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update Company Document
        /// </summary>
        /// <remarks>
        /// Updates an existing document associated with a specific company.
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The unique identifier of the company.</param>
        /// <param name="companyDocumentRequest">Document information to update.</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompanyDocumentResponse</returns>
        System.Threading.Tasks.Task<CompanyDocumentResponse> UpdateCompanyDocumentAsync(string companyId, CompanyDocumentRequest companyDocumentRequest, string acceptLanguage = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update Company Document
        /// </summary>
        /// <remarks>
        /// Updates an existing document associated with a specific company.
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The unique identifier of the company.</param>
        /// <param name="companyDocumentRequest">Document information to update.</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompanyDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CompanyDocumentResponse>> UpdateCompanyDocumentWithHttpInfoAsync(string companyId, CompanyDocumentRequest companyDocumentRequest, string acceptLanguage = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Upload Company Document
        /// </summary>
        /// <remarks>
        /// Uploads a document associated with a specific company.
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The unique identifier of the company.</param>
        /// <param name="companyDocumentRequest">Document information to upload.</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompanyDocumentResponse</returns>
        System.Threading.Tasks.Task<CompanyDocumentResponse> UploadCompanyDocumentAsync(string companyId, CompanyDocumentRequest companyDocumentRequest, string acceptLanguage = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Upload Company Document
        /// </summary>
        /// <remarks>
        /// Uploads a document associated with a specific company.
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The unique identifier of the company.</param>
        /// <param name="companyDocumentRequest">Document information to upload.</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompanyDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CompanyDocumentResponse>> UploadCompanyDocumentWithHttpInfoAsync(string companyId, CompanyDocumentRequest companyDocumentRequest, string acceptLanguage = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICompaniesApi : ICompaniesApiSync, ICompaniesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CompaniesApi : ICompaniesApi
    {
        private Conekta.net.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CompaniesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CompaniesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CompaniesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CompaniesApi(string basePath)
        {
            this.Configuration = Conekta.net.Client.Configuration.MergeConfigurations(
                Conekta.net.Client.GlobalConfiguration.Instance,
                new Conekta.net.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Conekta.net.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Conekta.net.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Conekta.net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CompaniesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CompaniesApi(Conekta.net.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Conekta.net.Client.Configuration.MergeConfigurations(
                Conekta.net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Conekta.net.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Conekta.net.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Conekta.net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CompaniesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CompaniesApi(Conekta.net.Client.ISynchronousClient client, Conekta.net.Client.IAsynchronousClient asyncClient, Conekta.net.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Conekta.net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Conekta.net.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Conekta.net.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Conekta.net.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Conekta.net.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Company Create a new company.
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCompanyRequest">Company data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CompanyResponse</returns>
        public CompanyResponse CreateCompany(CreateCompanyRequest createCompanyRequest, int operationIndex = 0)
        {
            Conekta.net.Client.ApiResponse<CompanyResponse> localVarResponse = CreateCompanyWithHttpInfo(createCompanyRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Company Create a new company.
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCompanyRequest">Company data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CompanyResponse</returns>
        public Conekta.net.Client.ApiResponse<CompanyResponse> CreateCompanyWithHttpInfo(CreateCompanyRequest createCompanyRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createCompanyRequest' is set
            if (createCompanyRequest == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'createCompanyRequest' when calling CompaniesApi->CreateCompany");
            }

            Conekta.net.Client.RequestOptions localVarRequestOptions = new Conekta.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.conekta-v2.2.0+json"
            };

            var localVarContentType = Conekta.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Conekta.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createCompanyRequest;

            localVarRequestOptions.Operation = "CompaniesApi.CreateCompany";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CompanyResponse>("/companies", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCompany", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Company Create a new company.
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCompanyRequest">Company data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompanyResponse</returns>
        public async System.Threading.Tasks.Task<CompanyResponse> CreateCompanyAsync(CreateCompanyRequest createCompanyRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Conekta.net.Client.ApiResponse<CompanyResponse> localVarResponse = await CreateCompanyWithHttpInfoAsync(createCompanyRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Company Create a new company.
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCompanyRequest">Company data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompanyResponse)</returns>
        public async System.Threading.Tasks.Task<Conekta.net.Client.ApiResponse<CompanyResponse>> CreateCompanyWithHttpInfoAsync(CreateCompanyRequest createCompanyRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'createCompanyRequest' is set
            if (createCompanyRequest == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'createCompanyRequest' when calling CompaniesApi->CreateCompany");
            }


            Conekta.net.Client.RequestOptions localVarRequestOptions = new Conekta.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.conekta-v2.2.0+json"
            };

            var localVarContentType = Conekta.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Conekta.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createCompanyRequest;

            localVarRequestOptions.Operation = "CompaniesApi.CreateCompany";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CompanyResponse>("/companies", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCompany", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get List of Companies Consume the list of child companies.  This is used for holding companies with several child entities.
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
        /// <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
        /// <param name="next">next page (optional)</param>
        /// <param name="previous">previous page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetCompaniesResponse</returns>
        public GetCompaniesResponse GetCompanies(string acceptLanguage = default(string), int? limit = default(int?), string search = default(string), string next = default(string), string previous = default(string), int operationIndex = 0)
        {
            Conekta.net.Client.ApiResponse<GetCompaniesResponse> localVarResponse = GetCompaniesWithHttpInfo(acceptLanguage, limit, search, next, previous);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get List of Companies Consume the list of child companies.  This is used for holding companies with several child entities.
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
        /// <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
        /// <param name="next">next page (optional)</param>
        /// <param name="previous">previous page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetCompaniesResponse</returns>
        public Conekta.net.Client.ApiResponse<GetCompaniesResponse> GetCompaniesWithHttpInfo(string acceptLanguage = default(string), int? limit = default(int?), string search = default(string), string next = default(string), string previous = default(string), int operationIndex = 0)
        {
            Conekta.net.Client.RequestOptions localVarRequestOptions = new Conekta.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.conekta-v2.2.0+json"
            };

            var localVarContentType = Conekta.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Conekta.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Conekta.net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(Conekta.net.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (next != null)
            {
                localVarRequestOptions.QueryParameters.Add(Conekta.net.Client.ClientUtils.ParameterToMultiMap("", "next", next));
            }
            if (previous != null)
            {
                localVarRequestOptions.QueryParameters.Add(Conekta.net.Client.ClientUtils.ParameterToMultiMap("", "previous", previous));
            }
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Conekta.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }

            localVarRequestOptions.Operation = "CompaniesApi.GetCompanies";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetCompaniesResponse>("/companies", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCompanies", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get List of Companies Consume the list of child companies.  This is used for holding companies with several child entities.
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
        /// <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
        /// <param name="next">next page (optional)</param>
        /// <param name="previous">previous page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCompaniesResponse</returns>
        public async System.Threading.Tasks.Task<GetCompaniesResponse> GetCompaniesAsync(string acceptLanguage = default(string), int? limit = default(int?), string search = default(string), string next = default(string), string previous = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Conekta.net.Client.ApiResponse<GetCompaniesResponse> localVarResponse = await GetCompaniesWithHttpInfoAsync(acceptLanguage, limit, search, next, previous, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get List of Companies Consume the list of child companies.  This is used for holding companies with several child entities.
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
        /// <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
        /// <param name="next">next page (optional)</param>
        /// <param name="previous">previous page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCompaniesResponse)</returns>
        public async System.Threading.Tasks.Task<Conekta.net.Client.ApiResponse<GetCompaniesResponse>> GetCompaniesWithHttpInfoAsync(string acceptLanguage = default(string), int? limit = default(int?), string search = default(string), string next = default(string), string previous = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Conekta.net.Client.RequestOptions localVarRequestOptions = new Conekta.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.conekta-v2.2.0+json"
            };

            var localVarContentType = Conekta.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Conekta.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Conekta.net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(Conekta.net.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (next != null)
            {
                localVarRequestOptions.QueryParameters.Add(Conekta.net.Client.ClientUtils.ParameterToMultiMap("", "next", next));
            }
            if (previous != null)
            {
                localVarRequestOptions.QueryParameters.Add(Conekta.net.Client.ClientUtils.ParameterToMultiMap("", "previous", previous));
            }
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Conekta.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }

            localVarRequestOptions.Operation = "CompaniesApi.GetCompanies";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetCompaniesResponse>("/companies", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCompanies", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Company 
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CompanyResponse</returns>
        public CompanyResponse GetCompany(string id, string acceptLanguage = default(string), int operationIndex = 0)
        {
            Conekta.net.Client.ApiResponse<CompanyResponse> localVarResponse = GetCompanyWithHttpInfo(id, acceptLanguage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Company 
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CompanyResponse</returns>
        public Conekta.net.Client.ApiResponse<CompanyResponse> GetCompanyWithHttpInfo(string id, string acceptLanguage = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'id' when calling CompaniesApi->GetCompany");
            }

            Conekta.net.Client.RequestOptions localVarRequestOptions = new Conekta.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.conekta-v2.2.0+json"
            };

            var localVarContentType = Conekta.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Conekta.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Conekta.net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Conekta.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }

            localVarRequestOptions.Operation = "CompaniesApi.GetCompany";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CompanyResponse>("/companies/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCompany", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Company 
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompanyResponse</returns>
        public async System.Threading.Tasks.Task<CompanyResponse> GetCompanyAsync(string id, string acceptLanguage = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Conekta.net.Client.ApiResponse<CompanyResponse> localVarResponse = await GetCompanyWithHttpInfoAsync(id, acceptLanguage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Company 
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompanyResponse)</returns>
        public async System.Threading.Tasks.Task<Conekta.net.Client.ApiResponse<CompanyResponse>> GetCompanyWithHttpInfoAsync(string id, string acceptLanguage = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'id' when calling CompaniesApi->GetCompany");
            }


            Conekta.net.Client.RequestOptions localVarRequestOptions = new Conekta.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.conekta-v2.2.0+json"
            };

            var localVarContentType = Conekta.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Conekta.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Conekta.net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Conekta.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }

            localVarRequestOptions.Operation = "CompaniesApi.GetCompany";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CompanyResponse>("/companies/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCompany", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Company Documents Retrieve a list of documents associated with a specific company.
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The unique identifier of the company.</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CompanyDocumentResponse&gt;</returns>
        public List<CompanyDocumentResponse> GetCompanyDocuments(string companyId, string acceptLanguage = default(string), int operationIndex = 0)
        {
            Conekta.net.Client.ApiResponse<List<CompanyDocumentResponse>> localVarResponse = GetCompanyDocumentsWithHttpInfo(companyId, acceptLanguage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Company Documents Retrieve a list of documents associated with a specific company.
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The unique identifier of the company.</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CompanyDocumentResponse&gt;</returns>
        public Conekta.net.Client.ApiResponse<List<CompanyDocumentResponse>> GetCompanyDocumentsWithHttpInfo(string companyId, string acceptLanguage = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'companyId' when calling CompaniesApi->GetCompanyDocuments");
            }

            Conekta.net.Client.RequestOptions localVarRequestOptions = new Conekta.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.conekta-v2.2.0+json"
            };

            var localVarContentType = Conekta.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Conekta.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", Conekta.net.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Conekta.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }

            localVarRequestOptions.Operation = "CompaniesApi.GetCompanyDocuments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CompanyDocumentResponse>>("/companies/{company_id}/documents", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCompanyDocuments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Company Documents Retrieve a list of documents associated with a specific company.
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The unique identifier of the company.</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CompanyDocumentResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<CompanyDocumentResponse>> GetCompanyDocumentsAsync(string companyId, string acceptLanguage = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Conekta.net.Client.ApiResponse<List<CompanyDocumentResponse>> localVarResponse = await GetCompanyDocumentsWithHttpInfoAsync(companyId, acceptLanguage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Company Documents Retrieve a list of documents associated with a specific company.
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The unique identifier of the company.</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CompanyDocumentResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<Conekta.net.Client.ApiResponse<List<CompanyDocumentResponse>>> GetCompanyDocumentsWithHttpInfoAsync(string companyId, string acceptLanguage = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'companyId' when calling CompaniesApi->GetCompanyDocuments");
            }


            Conekta.net.Client.RequestOptions localVarRequestOptions = new Conekta.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.conekta-v2.2.0+json"
            };

            var localVarContentType = Conekta.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Conekta.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", Conekta.net.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Conekta.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }

            localVarRequestOptions.Operation = "CompaniesApi.GetCompanyDocuments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CompanyDocumentResponse>>("/companies/{company_id}/documents", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCompanyDocuments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Current Company Retrieves information about the currently authenticated company. This endpoint returns the same data as the standard company endpoint but automatically uses the current company&#39;s context.
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CompanyResponse</returns>
        public CompanyResponse GetCurrentCompany(string acceptLanguage = default(string), int operationIndex = 0)
        {
            Conekta.net.Client.ApiResponse<CompanyResponse> localVarResponse = GetCurrentCompanyWithHttpInfo(acceptLanguage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Current Company Retrieves information about the currently authenticated company. This endpoint returns the same data as the standard company endpoint but automatically uses the current company&#39;s context.
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CompanyResponse</returns>
        public Conekta.net.Client.ApiResponse<CompanyResponse> GetCurrentCompanyWithHttpInfo(string acceptLanguage = default(string), int operationIndex = 0)
        {
            Conekta.net.Client.RequestOptions localVarRequestOptions = new Conekta.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.conekta-v2.2.0+json"
            };

            var localVarContentType = Conekta.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Conekta.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Conekta.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }

            localVarRequestOptions.Operation = "CompaniesApi.GetCurrentCompany";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CompanyResponse>("/companies/current", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCurrentCompany", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Current Company Retrieves information about the currently authenticated company. This endpoint returns the same data as the standard company endpoint but automatically uses the current company&#39;s context.
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompanyResponse</returns>
        public async System.Threading.Tasks.Task<CompanyResponse> GetCurrentCompanyAsync(string acceptLanguage = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Conekta.net.Client.ApiResponse<CompanyResponse> localVarResponse = await GetCurrentCompanyWithHttpInfoAsync(acceptLanguage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Current Company Retrieves information about the currently authenticated company. This endpoint returns the same data as the standard company endpoint but automatically uses the current company&#39;s context.
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompanyResponse)</returns>
        public async System.Threading.Tasks.Task<Conekta.net.Client.ApiResponse<CompanyResponse>> GetCurrentCompanyWithHttpInfoAsync(string acceptLanguage = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Conekta.net.Client.RequestOptions localVarRequestOptions = new Conekta.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.conekta-v2.2.0+json"
            };

            var localVarContentType = Conekta.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Conekta.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Conekta.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }

            localVarRequestOptions.Operation = "CompaniesApi.GetCurrentCompany";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CompanyResponse>("/companies/current", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCurrentCompany", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Company Document Updates an existing document associated with a specific company.
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The unique identifier of the company.</param>
        /// <param name="companyDocumentRequest">Document information to update.</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CompanyDocumentResponse</returns>
        public CompanyDocumentResponse UpdateCompanyDocument(string companyId, CompanyDocumentRequest companyDocumentRequest, string acceptLanguage = default(string), int operationIndex = 0)
        {
            Conekta.net.Client.ApiResponse<CompanyDocumentResponse> localVarResponse = UpdateCompanyDocumentWithHttpInfo(companyId, companyDocumentRequest, acceptLanguage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Company Document Updates an existing document associated with a specific company.
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The unique identifier of the company.</param>
        /// <param name="companyDocumentRequest">Document information to update.</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CompanyDocumentResponse</returns>
        public Conekta.net.Client.ApiResponse<CompanyDocumentResponse> UpdateCompanyDocumentWithHttpInfo(string companyId, CompanyDocumentRequest companyDocumentRequest, string acceptLanguage = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'companyId' when calling CompaniesApi->UpdateCompanyDocument");
            }

            // verify the required parameter 'companyDocumentRequest' is set
            if (companyDocumentRequest == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'companyDocumentRequest' when calling CompaniesApi->UpdateCompanyDocument");
            }

            Conekta.net.Client.RequestOptions localVarRequestOptions = new Conekta.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.conekta-v2.2.0+json"
            };

            var localVarContentType = Conekta.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Conekta.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", Conekta.net.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Conekta.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            localVarRequestOptions.Data = companyDocumentRequest;

            localVarRequestOptions.Operation = "CompaniesApi.UpdateCompanyDocument";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<CompanyDocumentResponse>("/companies/{company_id}/document", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCompanyDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Company Document Updates an existing document associated with a specific company.
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The unique identifier of the company.</param>
        /// <param name="companyDocumentRequest">Document information to update.</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompanyDocumentResponse</returns>
        public async System.Threading.Tasks.Task<CompanyDocumentResponse> UpdateCompanyDocumentAsync(string companyId, CompanyDocumentRequest companyDocumentRequest, string acceptLanguage = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Conekta.net.Client.ApiResponse<CompanyDocumentResponse> localVarResponse = await UpdateCompanyDocumentWithHttpInfoAsync(companyId, companyDocumentRequest, acceptLanguage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Company Document Updates an existing document associated with a specific company.
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The unique identifier of the company.</param>
        /// <param name="companyDocumentRequest">Document information to update.</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompanyDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<Conekta.net.Client.ApiResponse<CompanyDocumentResponse>> UpdateCompanyDocumentWithHttpInfoAsync(string companyId, CompanyDocumentRequest companyDocumentRequest, string acceptLanguage = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'companyId' when calling CompaniesApi->UpdateCompanyDocument");
            }

            // verify the required parameter 'companyDocumentRequest' is set
            if (companyDocumentRequest == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'companyDocumentRequest' when calling CompaniesApi->UpdateCompanyDocument");
            }


            Conekta.net.Client.RequestOptions localVarRequestOptions = new Conekta.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.conekta-v2.2.0+json"
            };

            var localVarContentType = Conekta.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Conekta.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", Conekta.net.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Conekta.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            localVarRequestOptions.Data = companyDocumentRequest;

            localVarRequestOptions.Operation = "CompaniesApi.UpdateCompanyDocument";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<CompanyDocumentResponse>("/companies/{company_id}/document", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCompanyDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload Company Document Uploads a document associated with a specific company.
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The unique identifier of the company.</param>
        /// <param name="companyDocumentRequest">Document information to upload.</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CompanyDocumentResponse</returns>
        public CompanyDocumentResponse UploadCompanyDocument(string companyId, CompanyDocumentRequest companyDocumentRequest, string acceptLanguage = default(string), int operationIndex = 0)
        {
            Conekta.net.Client.ApiResponse<CompanyDocumentResponse> localVarResponse = UploadCompanyDocumentWithHttpInfo(companyId, companyDocumentRequest, acceptLanguage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload Company Document Uploads a document associated with a specific company.
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The unique identifier of the company.</param>
        /// <param name="companyDocumentRequest">Document information to upload.</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CompanyDocumentResponse</returns>
        public Conekta.net.Client.ApiResponse<CompanyDocumentResponse> UploadCompanyDocumentWithHttpInfo(string companyId, CompanyDocumentRequest companyDocumentRequest, string acceptLanguage = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'companyId' when calling CompaniesApi->UploadCompanyDocument");
            }

            // verify the required parameter 'companyDocumentRequest' is set
            if (companyDocumentRequest == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'companyDocumentRequest' when calling CompaniesApi->UploadCompanyDocument");
            }

            Conekta.net.Client.RequestOptions localVarRequestOptions = new Conekta.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.conekta-v2.2.0+json"
            };

            var localVarContentType = Conekta.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Conekta.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", Conekta.net.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Conekta.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            localVarRequestOptions.Data = companyDocumentRequest;

            localVarRequestOptions.Operation = "CompaniesApi.UploadCompanyDocument";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CompanyDocumentResponse>("/companies/{company_id}/document", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadCompanyDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload Company Document Uploads a document associated with a specific company.
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The unique identifier of the company.</param>
        /// <param name="companyDocumentRequest">Document information to upload.</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompanyDocumentResponse</returns>
        public async System.Threading.Tasks.Task<CompanyDocumentResponse> UploadCompanyDocumentAsync(string companyId, CompanyDocumentRequest companyDocumentRequest, string acceptLanguage = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Conekta.net.Client.ApiResponse<CompanyDocumentResponse> localVarResponse = await UploadCompanyDocumentWithHttpInfoAsync(companyId, companyDocumentRequest, acceptLanguage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload Company Document Uploads a document associated with a specific company.
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The unique identifier of the company.</param>
        /// <param name="companyDocumentRequest">Document information to upload.</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompanyDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<Conekta.net.Client.ApiResponse<CompanyDocumentResponse>> UploadCompanyDocumentWithHttpInfoAsync(string companyId, CompanyDocumentRequest companyDocumentRequest, string acceptLanguage = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'companyId' when calling CompaniesApi->UploadCompanyDocument");
            }

            // verify the required parameter 'companyDocumentRequest' is set
            if (companyDocumentRequest == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'companyDocumentRequest' when calling CompaniesApi->UploadCompanyDocument");
            }


            Conekta.net.Client.RequestOptions localVarRequestOptions = new Conekta.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.conekta-v2.2.0+json"
            };

            var localVarContentType = Conekta.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Conekta.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", Conekta.net.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Conekta.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            localVarRequestOptions.Data = companyDocumentRequest;

            localVarRequestOptions.Operation = "CompaniesApi.UploadCompanyDocument";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CompanyDocumentResponse>("/companies/{company_id}/document", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadCompanyDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
