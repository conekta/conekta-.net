/*
 * Conekta API
 *
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Conekta.net.Client;
using Conekta.net.Model;

namespace Conekta.net.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPaymentMethodsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Payment Method
        /// </summary>
        /// <remarks>
        /// Create a payment method for a customer.
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="createCustomerPaymentMethodsRequest">requested field for customer payment methods</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateCustomerPaymentMethodsResponse</returns>
        CreateCustomerPaymentMethodsResponse CreateCustomerPaymentMethods(string id, CreateCustomerPaymentMethodsRequest createCustomerPaymentMethodsRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0);

        /// <summary>
        /// Create Payment Method
        /// </summary>
        /// <remarks>
        /// Create a payment method for a customer.
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="createCustomerPaymentMethodsRequest">requested field for customer payment methods</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateCustomerPaymentMethodsResponse</returns>
        ApiResponse<CreateCustomerPaymentMethodsResponse> CreateCustomerPaymentMethodsWithHttpInfo(string id, CreateCustomerPaymentMethodsRequest createCustomerPaymentMethodsRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0);
        /// <summary>
        /// Delete Payment Method
        /// </summary>
        /// <remarks>
        /// Delete an existing payment method
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="paymentMethodId">Identifier of the payment method</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateCustomerPaymentMethodsResponse</returns>
        UpdateCustomerPaymentMethodsResponse DeleteCustomerPaymentMethods(string id, string paymentMethodId, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0);

        /// <summary>
        /// Delete Payment Method
        /// </summary>
        /// <remarks>
        /// Delete an existing payment method
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="paymentMethodId">Identifier of the payment method</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateCustomerPaymentMethodsResponse</returns>
        ApiResponse<UpdateCustomerPaymentMethodsResponse> DeleteCustomerPaymentMethodsWithHttpInfo(string id, string paymentMethodId, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0);
        /// <summary>
        /// Get Payment Methods
        /// </summary>
        /// <remarks>
        /// Get a list of Payment Methods
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
        /// <param name="next">next page (optional)</param>
        /// <param name="previous">previous page (optional)</param>
        /// <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetPaymentMethodResponse</returns>
        GetPaymentMethodResponse GetCustomerPaymentMethods(string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int? limit = default(int?), string next = default(string), string previous = default(string), string search = default(string), int operationIndex = 0);

        /// <summary>
        /// Get Payment Methods
        /// </summary>
        /// <remarks>
        /// Get a list of Payment Methods
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
        /// <param name="next">next page (optional)</param>
        /// <param name="previous">previous page (optional)</param>
        /// <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetPaymentMethodResponse</returns>
        ApiResponse<GetPaymentMethodResponse> GetCustomerPaymentMethodsWithHttpInfo(string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int? limit = default(int?), string next = default(string), string previous = default(string), string search = default(string), int operationIndex = 0);
        /// <summary>
        /// Update Payment Method
        /// </summary>
        /// <remarks>
        /// Gets a payment Method that corresponds to a customer ID.
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="paymentMethodId">Identifier of the payment method</param>
        /// <param name="updatePaymentMethods">requested field for customer payment methods</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateCustomerPaymentMethodsResponse</returns>
        UpdateCustomerPaymentMethodsResponse UpdateCustomerPaymentMethods(string id, string paymentMethodId, UpdatePaymentMethods updatePaymentMethods, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0);

        /// <summary>
        /// Update Payment Method
        /// </summary>
        /// <remarks>
        /// Gets a payment Method that corresponds to a customer ID.
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="paymentMethodId">Identifier of the payment method</param>
        /// <param name="updatePaymentMethods">requested field for customer payment methods</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateCustomerPaymentMethodsResponse</returns>
        ApiResponse<UpdateCustomerPaymentMethodsResponse> UpdateCustomerPaymentMethodsWithHttpInfo(string id, string paymentMethodId, UpdatePaymentMethods updatePaymentMethods, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPaymentMethodsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Payment Method
        /// </summary>
        /// <remarks>
        /// Create a payment method for a customer.
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="createCustomerPaymentMethodsRequest">requested field for customer payment methods</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateCustomerPaymentMethodsResponse</returns>
        System.Threading.Tasks.Task<CreateCustomerPaymentMethodsResponse> CreateCustomerPaymentMethodsAsync(string id, CreateCustomerPaymentMethodsRequest createCustomerPaymentMethodsRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Payment Method
        /// </summary>
        /// <remarks>
        /// Create a payment method for a customer.
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="createCustomerPaymentMethodsRequest">requested field for customer payment methods</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateCustomerPaymentMethodsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateCustomerPaymentMethodsResponse>> CreateCustomerPaymentMethodsWithHttpInfoAsync(string id, CreateCustomerPaymentMethodsRequest createCustomerPaymentMethodsRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Payment Method
        /// </summary>
        /// <remarks>
        /// Delete an existing payment method
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="paymentMethodId">Identifier of the payment method</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateCustomerPaymentMethodsResponse</returns>
        System.Threading.Tasks.Task<UpdateCustomerPaymentMethodsResponse> DeleteCustomerPaymentMethodsAsync(string id, string paymentMethodId, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Payment Method
        /// </summary>
        /// <remarks>
        /// Delete an existing payment method
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="paymentMethodId">Identifier of the payment method</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateCustomerPaymentMethodsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateCustomerPaymentMethodsResponse>> DeleteCustomerPaymentMethodsWithHttpInfoAsync(string id, string paymentMethodId, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Payment Methods
        /// </summary>
        /// <remarks>
        /// Get a list of Payment Methods
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
        /// <param name="next">next page (optional)</param>
        /// <param name="previous">previous page (optional)</param>
        /// <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPaymentMethodResponse</returns>
        System.Threading.Tasks.Task<GetPaymentMethodResponse> GetCustomerPaymentMethodsAsync(string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int? limit = default(int?), string next = default(string), string previous = default(string), string search = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Payment Methods
        /// </summary>
        /// <remarks>
        /// Get a list of Payment Methods
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
        /// <param name="next">next page (optional)</param>
        /// <param name="previous">previous page (optional)</param>
        /// <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPaymentMethodResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPaymentMethodResponse>> GetCustomerPaymentMethodsWithHttpInfoAsync(string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int? limit = default(int?), string next = default(string), string previous = default(string), string search = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Payment Method
        /// </summary>
        /// <remarks>
        /// Gets a payment Method that corresponds to a customer ID.
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="paymentMethodId">Identifier of the payment method</param>
        /// <param name="updatePaymentMethods">requested field for customer payment methods</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateCustomerPaymentMethodsResponse</returns>
        System.Threading.Tasks.Task<UpdateCustomerPaymentMethodsResponse> UpdateCustomerPaymentMethodsAsync(string id, string paymentMethodId, UpdatePaymentMethods updatePaymentMethods, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Payment Method
        /// </summary>
        /// <remarks>
        /// Gets a payment Method that corresponds to a customer ID.
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="paymentMethodId">Identifier of the payment method</param>
        /// <param name="updatePaymentMethods">requested field for customer payment methods</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateCustomerPaymentMethodsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateCustomerPaymentMethodsResponse>> UpdateCustomerPaymentMethodsWithHttpInfoAsync(string id, string paymentMethodId, UpdatePaymentMethods updatePaymentMethods, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPaymentMethodsApi : IPaymentMethodsApiSync, IPaymentMethodsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PaymentMethodsApi : IPaymentMethodsApi
    {
        private Conekta.net.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentMethodsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PaymentMethodsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentMethodsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PaymentMethodsApi(string basePath)
        {
            this.Configuration = Conekta.net.Client.Configuration.MergeConfigurations(
                Conekta.net.Client.GlobalConfiguration.Instance,
                new Conekta.net.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Conekta.net.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Conekta.net.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Conekta.net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentMethodsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PaymentMethodsApi(Conekta.net.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Conekta.net.Client.Configuration.MergeConfigurations(
                Conekta.net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Conekta.net.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Conekta.net.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Conekta.net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentMethodsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PaymentMethodsApi(Conekta.net.Client.ISynchronousClient client, Conekta.net.Client.IAsynchronousClient asyncClient, Conekta.net.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Conekta.net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Conekta.net.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Conekta.net.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Conekta.net.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Conekta.net.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Payment Method Create a payment method for a customer.
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="createCustomerPaymentMethodsRequest">requested field for customer payment methods</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateCustomerPaymentMethodsResponse</returns>
        public CreateCustomerPaymentMethodsResponse CreateCustomerPaymentMethods(string id, CreateCustomerPaymentMethodsRequest createCustomerPaymentMethodsRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0)
        {
            Conekta.net.Client.ApiResponse<CreateCustomerPaymentMethodsResponse> localVarResponse = CreateCustomerPaymentMethodsWithHttpInfo(id, createCustomerPaymentMethodsRequest, acceptLanguage, xChildCompanyId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Payment Method Create a payment method for a customer.
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="createCustomerPaymentMethodsRequest">requested field for customer payment methods</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateCustomerPaymentMethodsResponse</returns>
        public Conekta.net.Client.ApiResponse<CreateCustomerPaymentMethodsResponse> CreateCustomerPaymentMethodsWithHttpInfo(string id, CreateCustomerPaymentMethodsRequest createCustomerPaymentMethodsRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'id' when calling PaymentMethodsApi->CreateCustomerPaymentMethods");
            }

            // verify the required parameter 'createCustomerPaymentMethodsRequest' is set
            if (createCustomerPaymentMethodsRequest == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'createCustomerPaymentMethodsRequest' when calling PaymentMethodsApi->CreateCustomerPaymentMethods");
            }

            Conekta.net.Client.RequestOptions localVarRequestOptions = new Conekta.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.conekta-v2.1.0+json"
            };

            var localVarContentType = Conekta.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Conekta.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Conekta.net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Conekta.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (xChildCompanyId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Child-Company-Id", Conekta.net.Client.ClientUtils.ParameterToString(xChildCompanyId)); // header parameter
            }
            localVarRequestOptions.Data = createCustomerPaymentMethodsRequest;

            localVarRequestOptions.Operation = "PaymentMethodsApi.CreateCustomerPaymentMethods";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateCustomerPaymentMethodsResponse>("/customers/{id}/payment_sources", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCustomerPaymentMethods", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Payment Method Create a payment method for a customer.
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="createCustomerPaymentMethodsRequest">requested field for customer payment methods</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateCustomerPaymentMethodsResponse</returns>
        public async System.Threading.Tasks.Task<CreateCustomerPaymentMethodsResponse> CreateCustomerPaymentMethodsAsync(string id, CreateCustomerPaymentMethodsRequest createCustomerPaymentMethodsRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Conekta.net.Client.ApiResponse<CreateCustomerPaymentMethodsResponse> localVarResponse = await CreateCustomerPaymentMethodsWithHttpInfoAsync(id, createCustomerPaymentMethodsRequest, acceptLanguage, xChildCompanyId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Payment Method Create a payment method for a customer.
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="createCustomerPaymentMethodsRequest">requested field for customer payment methods</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateCustomerPaymentMethodsResponse)</returns>
        public async System.Threading.Tasks.Task<Conekta.net.Client.ApiResponse<CreateCustomerPaymentMethodsResponse>> CreateCustomerPaymentMethodsWithHttpInfoAsync(string id, CreateCustomerPaymentMethodsRequest createCustomerPaymentMethodsRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'id' when calling PaymentMethodsApi->CreateCustomerPaymentMethods");
            }

            // verify the required parameter 'createCustomerPaymentMethodsRequest' is set
            if (createCustomerPaymentMethodsRequest == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'createCustomerPaymentMethodsRequest' when calling PaymentMethodsApi->CreateCustomerPaymentMethods");
            }


            Conekta.net.Client.RequestOptions localVarRequestOptions = new Conekta.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.conekta-v2.1.0+json"
            };

            var localVarContentType = Conekta.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Conekta.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Conekta.net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Conekta.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (xChildCompanyId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Child-Company-Id", Conekta.net.Client.ClientUtils.ParameterToString(xChildCompanyId)); // header parameter
            }
            localVarRequestOptions.Data = createCustomerPaymentMethodsRequest;

            localVarRequestOptions.Operation = "PaymentMethodsApi.CreateCustomerPaymentMethods";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateCustomerPaymentMethodsResponse>("/customers/{id}/payment_sources", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCustomerPaymentMethods", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Payment Method Delete an existing payment method
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="paymentMethodId">Identifier of the payment method</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateCustomerPaymentMethodsResponse</returns>
        public UpdateCustomerPaymentMethodsResponse DeleteCustomerPaymentMethods(string id, string paymentMethodId, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0)
        {
            Conekta.net.Client.ApiResponse<UpdateCustomerPaymentMethodsResponse> localVarResponse = DeleteCustomerPaymentMethodsWithHttpInfo(id, paymentMethodId, acceptLanguage, xChildCompanyId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Payment Method Delete an existing payment method
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="paymentMethodId">Identifier of the payment method</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateCustomerPaymentMethodsResponse</returns>
        public Conekta.net.Client.ApiResponse<UpdateCustomerPaymentMethodsResponse> DeleteCustomerPaymentMethodsWithHttpInfo(string id, string paymentMethodId, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'id' when calling PaymentMethodsApi->DeleteCustomerPaymentMethods");
            }

            // verify the required parameter 'paymentMethodId' is set
            if (paymentMethodId == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'paymentMethodId' when calling PaymentMethodsApi->DeleteCustomerPaymentMethods");
            }

            Conekta.net.Client.RequestOptions localVarRequestOptions = new Conekta.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.conekta-v2.1.0+json"
            };

            var localVarContentType = Conekta.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Conekta.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Conekta.net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("payment_method_id", Conekta.net.Client.ClientUtils.ParameterToString(paymentMethodId)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Conekta.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (xChildCompanyId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Child-Company-Id", Conekta.net.Client.ClientUtils.ParameterToString(xChildCompanyId)); // header parameter
            }

            localVarRequestOptions.Operation = "PaymentMethodsApi.DeleteCustomerPaymentMethods";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<UpdateCustomerPaymentMethodsResponse>("/customers/{id}/payment_sources/{payment_method_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCustomerPaymentMethods", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Payment Method Delete an existing payment method
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="paymentMethodId">Identifier of the payment method</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateCustomerPaymentMethodsResponse</returns>
        public async System.Threading.Tasks.Task<UpdateCustomerPaymentMethodsResponse> DeleteCustomerPaymentMethodsAsync(string id, string paymentMethodId, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Conekta.net.Client.ApiResponse<UpdateCustomerPaymentMethodsResponse> localVarResponse = await DeleteCustomerPaymentMethodsWithHttpInfoAsync(id, paymentMethodId, acceptLanguage, xChildCompanyId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Payment Method Delete an existing payment method
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="paymentMethodId">Identifier of the payment method</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateCustomerPaymentMethodsResponse)</returns>
        public async System.Threading.Tasks.Task<Conekta.net.Client.ApiResponse<UpdateCustomerPaymentMethodsResponse>> DeleteCustomerPaymentMethodsWithHttpInfoAsync(string id, string paymentMethodId, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'id' when calling PaymentMethodsApi->DeleteCustomerPaymentMethods");
            }

            // verify the required parameter 'paymentMethodId' is set
            if (paymentMethodId == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'paymentMethodId' when calling PaymentMethodsApi->DeleteCustomerPaymentMethods");
            }


            Conekta.net.Client.RequestOptions localVarRequestOptions = new Conekta.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.conekta-v2.1.0+json"
            };

            var localVarContentType = Conekta.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Conekta.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Conekta.net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("payment_method_id", Conekta.net.Client.ClientUtils.ParameterToString(paymentMethodId)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Conekta.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (xChildCompanyId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Child-Company-Id", Conekta.net.Client.ClientUtils.ParameterToString(xChildCompanyId)); // header parameter
            }

            localVarRequestOptions.Operation = "PaymentMethodsApi.DeleteCustomerPaymentMethods";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<UpdateCustomerPaymentMethodsResponse>("/customers/{id}/payment_sources/{payment_method_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCustomerPaymentMethods", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Payment Methods Get a list of Payment Methods
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
        /// <param name="next">next page (optional)</param>
        /// <param name="previous">previous page (optional)</param>
        /// <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetPaymentMethodResponse</returns>
        public GetPaymentMethodResponse GetCustomerPaymentMethods(string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int? limit = default(int?), string next = default(string), string previous = default(string), string search = default(string), int operationIndex = 0)
        {
            Conekta.net.Client.ApiResponse<GetPaymentMethodResponse> localVarResponse = GetCustomerPaymentMethodsWithHttpInfo(id, acceptLanguage, xChildCompanyId, limit, next, previous, search);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Payment Methods Get a list of Payment Methods
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
        /// <param name="next">next page (optional)</param>
        /// <param name="previous">previous page (optional)</param>
        /// <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetPaymentMethodResponse</returns>
        public Conekta.net.Client.ApiResponse<GetPaymentMethodResponse> GetCustomerPaymentMethodsWithHttpInfo(string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int? limit = default(int?), string next = default(string), string previous = default(string), string search = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'id' when calling PaymentMethodsApi->GetCustomerPaymentMethods");
            }

            Conekta.net.Client.RequestOptions localVarRequestOptions = new Conekta.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.conekta-v2.1.0+json"
            };

            var localVarContentType = Conekta.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Conekta.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Conekta.net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Conekta.net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (next != null)
            {
                localVarRequestOptions.QueryParameters.Add(Conekta.net.Client.ClientUtils.ParameterToMultiMap("", "next", next));
            }
            if (previous != null)
            {
                localVarRequestOptions.QueryParameters.Add(Conekta.net.Client.ClientUtils.ParameterToMultiMap("", "previous", previous));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(Conekta.net.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Conekta.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (xChildCompanyId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Child-Company-Id", Conekta.net.Client.ClientUtils.ParameterToString(xChildCompanyId)); // header parameter
            }

            localVarRequestOptions.Operation = "PaymentMethodsApi.GetCustomerPaymentMethods";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetPaymentMethodResponse>("/customers/{id}/payment_sources", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerPaymentMethods", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Payment Methods Get a list of Payment Methods
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
        /// <param name="next">next page (optional)</param>
        /// <param name="previous">previous page (optional)</param>
        /// <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPaymentMethodResponse</returns>
        public async System.Threading.Tasks.Task<GetPaymentMethodResponse> GetCustomerPaymentMethodsAsync(string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int? limit = default(int?), string next = default(string), string previous = default(string), string search = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Conekta.net.Client.ApiResponse<GetPaymentMethodResponse> localVarResponse = await GetCustomerPaymentMethodsWithHttpInfoAsync(id, acceptLanguage, xChildCompanyId, limit, next, previous, search, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Payment Methods Get a list of Payment Methods
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
        /// <param name="next">next page (optional)</param>
        /// <param name="previous">previous page (optional)</param>
        /// <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPaymentMethodResponse)</returns>
        public async System.Threading.Tasks.Task<Conekta.net.Client.ApiResponse<GetPaymentMethodResponse>> GetCustomerPaymentMethodsWithHttpInfoAsync(string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int? limit = default(int?), string next = default(string), string previous = default(string), string search = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'id' when calling PaymentMethodsApi->GetCustomerPaymentMethods");
            }


            Conekta.net.Client.RequestOptions localVarRequestOptions = new Conekta.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.conekta-v2.1.0+json"
            };

            var localVarContentType = Conekta.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Conekta.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Conekta.net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Conekta.net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (next != null)
            {
                localVarRequestOptions.QueryParameters.Add(Conekta.net.Client.ClientUtils.ParameterToMultiMap("", "next", next));
            }
            if (previous != null)
            {
                localVarRequestOptions.QueryParameters.Add(Conekta.net.Client.ClientUtils.ParameterToMultiMap("", "previous", previous));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(Conekta.net.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Conekta.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (xChildCompanyId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Child-Company-Id", Conekta.net.Client.ClientUtils.ParameterToString(xChildCompanyId)); // header parameter
            }

            localVarRequestOptions.Operation = "PaymentMethodsApi.GetCustomerPaymentMethods";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetPaymentMethodResponse>("/customers/{id}/payment_sources", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerPaymentMethods", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Payment Method Gets a payment Method that corresponds to a customer ID.
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="paymentMethodId">Identifier of the payment method</param>
        /// <param name="updatePaymentMethods">requested field for customer payment methods</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateCustomerPaymentMethodsResponse</returns>
        public UpdateCustomerPaymentMethodsResponse UpdateCustomerPaymentMethods(string id, string paymentMethodId, UpdatePaymentMethods updatePaymentMethods, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0)
        {
            Conekta.net.Client.ApiResponse<UpdateCustomerPaymentMethodsResponse> localVarResponse = UpdateCustomerPaymentMethodsWithHttpInfo(id, paymentMethodId, updatePaymentMethods, acceptLanguage, xChildCompanyId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Payment Method Gets a payment Method that corresponds to a customer ID.
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="paymentMethodId">Identifier of the payment method</param>
        /// <param name="updatePaymentMethods">requested field for customer payment methods</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateCustomerPaymentMethodsResponse</returns>
        public Conekta.net.Client.ApiResponse<UpdateCustomerPaymentMethodsResponse> UpdateCustomerPaymentMethodsWithHttpInfo(string id, string paymentMethodId, UpdatePaymentMethods updatePaymentMethods, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'id' when calling PaymentMethodsApi->UpdateCustomerPaymentMethods");
            }

            // verify the required parameter 'paymentMethodId' is set
            if (paymentMethodId == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'paymentMethodId' when calling PaymentMethodsApi->UpdateCustomerPaymentMethods");
            }

            // verify the required parameter 'updatePaymentMethods' is set
            if (updatePaymentMethods == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'updatePaymentMethods' when calling PaymentMethodsApi->UpdateCustomerPaymentMethods");
            }

            Conekta.net.Client.RequestOptions localVarRequestOptions = new Conekta.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.conekta-v2.1.0+json"
            };

            var localVarContentType = Conekta.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Conekta.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Conekta.net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("payment_method_id", Conekta.net.Client.ClientUtils.ParameterToString(paymentMethodId)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Conekta.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (xChildCompanyId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Child-Company-Id", Conekta.net.Client.ClientUtils.ParameterToString(xChildCompanyId)); // header parameter
            }
            localVarRequestOptions.Data = updatePaymentMethods;

            localVarRequestOptions.Operation = "PaymentMethodsApi.UpdateCustomerPaymentMethods";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<UpdateCustomerPaymentMethodsResponse>("/customers/{id}/payment_sources/{payment_method_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCustomerPaymentMethods", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Payment Method Gets a payment Method that corresponds to a customer ID.
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="paymentMethodId">Identifier of the payment method</param>
        /// <param name="updatePaymentMethods">requested field for customer payment methods</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateCustomerPaymentMethodsResponse</returns>
        public async System.Threading.Tasks.Task<UpdateCustomerPaymentMethodsResponse> UpdateCustomerPaymentMethodsAsync(string id, string paymentMethodId, UpdatePaymentMethods updatePaymentMethods, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Conekta.net.Client.ApiResponse<UpdateCustomerPaymentMethodsResponse> localVarResponse = await UpdateCustomerPaymentMethodsWithHttpInfoAsync(id, paymentMethodId, updatePaymentMethods, acceptLanguage, xChildCompanyId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Payment Method Gets a payment Method that corresponds to a customer ID.
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="paymentMethodId">Identifier of the payment method</param>
        /// <param name="updatePaymentMethods">requested field for customer payment methods</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateCustomerPaymentMethodsResponse)</returns>
        public async System.Threading.Tasks.Task<Conekta.net.Client.ApiResponse<UpdateCustomerPaymentMethodsResponse>> UpdateCustomerPaymentMethodsWithHttpInfoAsync(string id, string paymentMethodId, UpdatePaymentMethods updatePaymentMethods, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'id' when calling PaymentMethodsApi->UpdateCustomerPaymentMethods");
            }

            // verify the required parameter 'paymentMethodId' is set
            if (paymentMethodId == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'paymentMethodId' when calling PaymentMethodsApi->UpdateCustomerPaymentMethods");
            }

            // verify the required parameter 'updatePaymentMethods' is set
            if (updatePaymentMethods == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'updatePaymentMethods' when calling PaymentMethodsApi->UpdateCustomerPaymentMethods");
            }


            Conekta.net.Client.RequestOptions localVarRequestOptions = new Conekta.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.conekta-v2.1.0+json"
            };

            var localVarContentType = Conekta.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Conekta.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Conekta.net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("payment_method_id", Conekta.net.Client.ClientUtils.ParameterToString(paymentMethodId)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Conekta.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (xChildCompanyId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Child-Company-Id", Conekta.net.Client.ClientUtils.ParameterToString(xChildCompanyId)); // header parameter
            }
            localVarRequestOptions.Data = updatePaymentMethods;

            localVarRequestOptions.Operation = "PaymentMethodsApi.UpdateCustomerPaymentMethods";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<UpdateCustomerPaymentMethodsResponse>("/customers/{id}/payment_sources/{payment_method_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCustomerPaymentMethods", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
