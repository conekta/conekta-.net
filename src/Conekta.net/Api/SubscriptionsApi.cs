/*
 * Conekta API
 *
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.2.0
 * Contact: engineering@conekta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Conekta.net.Client;
using Conekta.net.Model;

namespace Conekta.net.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubscriptionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel Subscription [Deprecated]
        /// </summary>
        /// <remarks>
        /// DEPRECATED: This endpoint will be removed in version 2.3.0.
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionResponse</returns>
        [Obsolete]
        SubscriptionResponse CancelSubscription(string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0);

        /// <summary>
        /// Cancel Subscription [Deprecated]
        /// </summary>
        /// <remarks>
        /// DEPRECATED: This endpoint will be removed in version 2.3.0.
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionResponse</returns>
        [Obsolete]
        ApiResponse<SubscriptionResponse> CancelSubscriptionWithHttpInfo(string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0);
        /// <summary>
        /// Create Subscription [Deprecated]
        /// </summary>
        /// <remarks>
        /// DEPRECATED: This endpoint will be removed in version 2.3.0. You can create the subscription to include the plans that your customers consume
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="subscriptionRequest">requested field for subscriptions</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionResponse</returns>
        [Obsolete]
        SubscriptionResponse CreateSubscription(string id, SubscriptionRequest subscriptionRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0);

        /// <summary>
        /// Create Subscription [Deprecated]
        /// </summary>
        /// <remarks>
        /// DEPRECATED: This endpoint will be removed in version 2.3.0. You can create the subscription to include the plans that your customers consume
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="subscriptionRequest">requested field for subscriptions</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionResponse</returns>
        [Obsolete]
        ApiResponse<SubscriptionResponse> CreateSubscriptionWithHttpInfo(string id, SubscriptionRequest subscriptionRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0);
        /// <summary>
        /// Get Subscription [Deprecated]
        /// </summary>
        /// <remarks>
        /// DEPRECATED: This endpoint will be removed in version 2.3.0.
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionResponse</returns>
        [Obsolete]
        SubscriptionResponse GetSubscription(string id, string acceptLanguage = default(string), int operationIndex = 0);

        /// <summary>
        /// Get Subscription [Deprecated]
        /// </summary>
        /// <remarks>
        /// DEPRECATED: This endpoint will be removed in version 2.3.0.
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionResponse</returns>
        [Obsolete]
        ApiResponse<SubscriptionResponse> GetSubscriptionWithHttpInfo(string id, string acceptLanguage = default(string), int operationIndex = 0);
        /// <summary>
        /// Get Subscription Events [Deprecated]
        /// </summary>
        /// <remarks>
        /// DEPRECATED: This endpoint will be removed in version 2.3.0. You can get the events of the subscription(s) of a client, with the customer id
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionEventsResponse</returns>
        [Obsolete]
        SubscriptionEventsResponse GetSubscriptionEvents(string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0);

        /// <summary>
        /// Get Subscription Events [Deprecated]
        /// </summary>
        /// <remarks>
        /// DEPRECATED: This endpoint will be removed in version 2.3.0. You can get the events of the subscription(s) of a client, with the customer id
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionEventsResponse</returns>
        [Obsolete]
        ApiResponse<SubscriptionEventsResponse> GetSubscriptionEventsWithHttpInfo(string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0);
        /// <summary>
        /// Pause Subscription [Deprecated]
        /// </summary>
        /// <remarks>
        /// DEPRECATED: This endpoint will be removed in version 2.3.0.
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionResponse</returns>
        [Obsolete]
        SubscriptionResponse PauseSubscription(string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0);

        /// <summary>
        /// Pause Subscription [Deprecated]
        /// </summary>
        /// <remarks>
        /// DEPRECATED: This endpoint will be removed in version 2.3.0.
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionResponse</returns>
        [Obsolete]
        ApiResponse<SubscriptionResponse> PauseSubscriptionWithHttpInfo(string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0);
        /// <summary>
        /// Resume Subscription [Deprecated]
        /// </summary>
        /// <remarks>
        /// DEPRECATED: This endpoint will be removed in version 2.3.0.
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionResponse</returns>
        [Obsolete]
        SubscriptionResponse ResumeSubscription(string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0);

        /// <summary>
        /// Resume Subscription [Deprecated]
        /// </summary>
        /// <remarks>
        /// DEPRECATED: This endpoint will be removed in version 2.3.0.
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionResponse</returns>
        [Obsolete]
        ApiResponse<SubscriptionResponse> ResumeSubscriptionWithHttpInfo(string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0);
        /// <summary>
        /// Cancel Subscription
        /// </summary>
        /// <remarks>
        /// Cancel a specific subscription
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="id">Identifier of the subscription resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionResponse</returns>
        SubscriptionResponse SubscriptionCancel(string customerId, string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0);

        /// <summary>
        /// Cancel Subscription
        /// </summary>
        /// <remarks>
        /// Cancel a specific subscription
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="id">Identifier of the subscription resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionResponse</returns>
        ApiResponse<SubscriptionResponse> SubscriptionCancelWithHttpInfo(string customerId, string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0);
        /// <summary>
        /// Create Subscription
        /// </summary>
        /// <remarks>
        /// Create a new subscription for a customer (keeps existing subscriptions active)
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="subscriptionRequest">requested field for subscriptions</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionResponse</returns>
        SubscriptionResponse SubscriptionCreate(string customerId, SubscriptionRequest subscriptionRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0);

        /// <summary>
        /// Create Subscription
        /// </summary>
        /// <remarks>
        /// Create a new subscription for a customer (keeps existing subscriptions active)
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="subscriptionRequest">requested field for subscriptions</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionResponse</returns>
        ApiResponse<SubscriptionResponse> SubscriptionCreateWithHttpInfo(string customerId, SubscriptionRequest subscriptionRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0);
        /// <summary>
        /// Get Subscription Events
        /// </summary>
        /// <remarks>
        /// Get events for a specific subscription
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="id">Identifier of the subscription resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
        /// <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
        /// <param name="next">next page (optional)</param>
        /// <param name="previous">previous page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionEventsResponse</returns>
        SubscriptionEventsResponse SubscriptionEvents(string customerId, string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int? limit = default(int?), string search = default(string), string next = default(string), string previous = default(string), int operationIndex = 0);

        /// <summary>
        /// Get Subscription Events
        /// </summary>
        /// <remarks>
        /// Get events for a specific subscription
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="id">Identifier of the subscription resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
        /// <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
        /// <param name="next">next page (optional)</param>
        /// <param name="previous">previous page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionEventsResponse</returns>
        ApiResponse<SubscriptionEventsResponse> SubscriptionEventsWithHttpInfo(string customerId, string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int? limit = default(int?), string search = default(string), string next = default(string), string previous = default(string), int operationIndex = 0);
        /// <summary>
        /// List Subscriptions
        /// </summary>
        /// <remarks>
        /// Get a list of subscriptions for a customer
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
        /// <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
        /// <param name="next">next page (optional)</param>
        /// <param name="previous">previous page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionResponse</returns>
        SubscriptionResponse SubscriptionList(string customerId, string acceptLanguage = default(string), string xChildCompanyId = default(string), int? limit = default(int?), string search = default(string), string next = default(string), string previous = default(string), int operationIndex = 0);

        /// <summary>
        /// List Subscriptions
        /// </summary>
        /// <remarks>
        /// Get a list of subscriptions for a customer
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
        /// <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
        /// <param name="next">next page (optional)</param>
        /// <param name="previous">previous page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionResponse</returns>
        ApiResponse<SubscriptionResponse> SubscriptionListWithHttpInfo(string customerId, string acceptLanguage = default(string), string xChildCompanyId = default(string), int? limit = default(int?), string search = default(string), string next = default(string), string previous = default(string), int operationIndex = 0);
        /// <summary>
        /// Pause Subscription
        /// </summary>
        /// <remarks>
        /// Pause a specific subscription
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="id">Identifier of the subscription resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionResponse</returns>
        SubscriptionResponse SubscriptionPause(string customerId, string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0);

        /// <summary>
        /// Pause Subscription
        /// </summary>
        /// <remarks>
        /// Pause a specific subscription
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="id">Identifier of the subscription resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionResponse</returns>
        ApiResponse<SubscriptionResponse> SubscriptionPauseWithHttpInfo(string customerId, string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0);
        /// <summary>
        /// Resume Subscription
        /// </summary>
        /// <remarks>
        /// Resume a specific paused subscription
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="id">Identifier of the subscription resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionResponse</returns>
        SubscriptionResponse SubscriptionResume(string customerId, string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0);

        /// <summary>
        /// Resume Subscription
        /// </summary>
        /// <remarks>
        /// Resume a specific paused subscription
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="id">Identifier of the subscription resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionResponse</returns>
        ApiResponse<SubscriptionResponse> SubscriptionResumeWithHttpInfo(string customerId, string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0);
        /// <summary>
        /// Update Subscription
        /// </summary>
        /// <remarks>
        /// Update a specific subscription
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="id">Identifier of the subscription resource</param>
        /// <param name="subscriptionUpdateRequest">requested field for update a subscription</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionResponse</returns>
        SubscriptionResponse SubscriptionUpdate(string customerId, string id, SubscriptionUpdateRequest subscriptionUpdateRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0);

        /// <summary>
        /// Update Subscription
        /// </summary>
        /// <remarks>
        /// Update a specific subscription
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="id">Identifier of the subscription resource</param>
        /// <param name="subscriptionUpdateRequest">requested field for update a subscription</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionResponse</returns>
        ApiResponse<SubscriptionResponse> SubscriptionUpdateWithHttpInfo(string customerId, string id, SubscriptionUpdateRequest subscriptionUpdateRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0);
        /// <summary>
        /// Get Subscription
        /// </summary>
        /// <remarks>
        /// Retrieve a specific subscription
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="id">Identifier of the subscription resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionResponse</returns>
        SubscriptionResponse SubscriptionsGet(string customerId, string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0);

        /// <summary>
        /// Get Subscription
        /// </summary>
        /// <remarks>
        /// Retrieve a specific subscription
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="id">Identifier of the subscription resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionResponse</returns>
        ApiResponse<SubscriptionResponse> SubscriptionsGetWithHttpInfo(string customerId, string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0);
        /// <summary>
        /// Retry Failed Payment
        /// </summary>
        /// <remarks>
        /// Retry a failed payment for a specific subscription
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="id">Identifier of the subscription resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionResponse</returns>
        SubscriptionResponse SubscriptionsRetry(string customerId, string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0);

        /// <summary>
        /// Retry Failed Payment
        /// </summary>
        /// <remarks>
        /// Retry a failed payment for a specific subscription
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="id">Identifier of the subscription resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionResponse</returns>
        ApiResponse<SubscriptionResponse> SubscriptionsRetryWithHttpInfo(string customerId, string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0);
        /// <summary>
        /// Update Subscription [Deprecated]
        /// </summary>
        /// <remarks>
        /// DEPRECATED: This endpoint will be removed in version 2.3.0. You can modify the subscription to change the plans that your customers consume
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="subscriptionUpdateRequest">requested field for update a subscription</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionResponse</returns>
        [Obsolete]
        SubscriptionResponse UpdateSubscription(string id, SubscriptionUpdateRequest subscriptionUpdateRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0);

        /// <summary>
        /// Update Subscription [Deprecated]
        /// </summary>
        /// <remarks>
        /// DEPRECATED: This endpoint will be removed in version 2.3.0. You can modify the subscription to change the plans that your customers consume
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="subscriptionUpdateRequest">requested field for update a subscription</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionResponse</returns>
        [Obsolete]
        ApiResponse<SubscriptionResponse> UpdateSubscriptionWithHttpInfo(string id, SubscriptionUpdateRequest subscriptionUpdateRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubscriptionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Cancel Subscription [Deprecated]
        /// </summary>
        /// <remarks>
        /// DEPRECATED: This endpoint will be removed in version 2.3.0.
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<SubscriptionResponse> CancelSubscriptionAsync(string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Cancel Subscription [Deprecated]
        /// </summary>
        /// <remarks>
        /// DEPRECATED: This endpoint will be removed in version 2.3.0.
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<SubscriptionResponse>> CancelSubscriptionWithHttpInfoAsync(string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create Subscription [Deprecated]
        /// </summary>
        /// <remarks>
        /// DEPRECATED: This endpoint will be removed in version 2.3.0. You can create the subscription to include the plans that your customers consume
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="subscriptionRequest">requested field for subscriptions</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<SubscriptionResponse> CreateSubscriptionAsync(string id, SubscriptionRequest subscriptionRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create Subscription [Deprecated]
        /// </summary>
        /// <remarks>
        /// DEPRECATED: This endpoint will be removed in version 2.3.0. You can create the subscription to include the plans that your customers consume
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="subscriptionRequest">requested field for subscriptions</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<SubscriptionResponse>> CreateSubscriptionWithHttpInfoAsync(string id, SubscriptionRequest subscriptionRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Subscription [Deprecated]
        /// </summary>
        /// <remarks>
        /// DEPRECATED: This endpoint will be removed in version 2.3.0.
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<SubscriptionResponse> GetSubscriptionAsync(string id, string acceptLanguage = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Subscription [Deprecated]
        /// </summary>
        /// <remarks>
        /// DEPRECATED: This endpoint will be removed in version 2.3.0.
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<SubscriptionResponse>> GetSubscriptionWithHttpInfoAsync(string id, string acceptLanguage = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Subscription Events [Deprecated]
        /// </summary>
        /// <remarks>
        /// DEPRECATED: This endpoint will be removed in version 2.3.0. You can get the events of the subscription(s) of a client, with the customer id
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionEventsResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<SubscriptionEventsResponse> GetSubscriptionEventsAsync(string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Subscription Events [Deprecated]
        /// </summary>
        /// <remarks>
        /// DEPRECATED: This endpoint will be removed in version 2.3.0. You can get the events of the subscription(s) of a client, with the customer id
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionEventsResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<SubscriptionEventsResponse>> GetSubscriptionEventsWithHttpInfoAsync(string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Pause Subscription [Deprecated]
        /// </summary>
        /// <remarks>
        /// DEPRECATED: This endpoint will be removed in version 2.3.0.
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<SubscriptionResponse> PauseSubscriptionAsync(string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Pause Subscription [Deprecated]
        /// </summary>
        /// <remarks>
        /// DEPRECATED: This endpoint will be removed in version 2.3.0.
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<SubscriptionResponse>> PauseSubscriptionWithHttpInfoAsync(string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Resume Subscription [Deprecated]
        /// </summary>
        /// <remarks>
        /// DEPRECATED: This endpoint will be removed in version 2.3.0.
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<SubscriptionResponse> ResumeSubscriptionAsync(string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Resume Subscription [Deprecated]
        /// </summary>
        /// <remarks>
        /// DEPRECATED: This endpoint will be removed in version 2.3.0.
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<SubscriptionResponse>> ResumeSubscriptionWithHttpInfoAsync(string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Cancel Subscription
        /// </summary>
        /// <remarks>
        /// Cancel a specific subscription
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="id">Identifier of the subscription resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionResponse</returns>
        System.Threading.Tasks.Task<SubscriptionResponse> SubscriptionCancelAsync(string customerId, string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Cancel Subscription
        /// </summary>
        /// <remarks>
        /// Cancel a specific subscription
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="id">Identifier of the subscription resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionResponse>> SubscriptionCancelWithHttpInfoAsync(string customerId, string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create Subscription
        /// </summary>
        /// <remarks>
        /// Create a new subscription for a customer (keeps existing subscriptions active)
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="subscriptionRequest">requested field for subscriptions</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionResponse</returns>
        System.Threading.Tasks.Task<SubscriptionResponse> SubscriptionCreateAsync(string customerId, SubscriptionRequest subscriptionRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create Subscription
        /// </summary>
        /// <remarks>
        /// Create a new subscription for a customer (keeps existing subscriptions active)
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="subscriptionRequest">requested field for subscriptions</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionResponse>> SubscriptionCreateWithHttpInfoAsync(string customerId, SubscriptionRequest subscriptionRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Subscription Events
        /// </summary>
        /// <remarks>
        /// Get events for a specific subscription
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="id">Identifier of the subscription resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
        /// <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
        /// <param name="next">next page (optional)</param>
        /// <param name="previous">previous page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionEventsResponse</returns>
        System.Threading.Tasks.Task<SubscriptionEventsResponse> SubscriptionEventsAsync(string customerId, string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int? limit = default(int?), string search = default(string), string next = default(string), string previous = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Subscription Events
        /// </summary>
        /// <remarks>
        /// Get events for a specific subscription
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="id">Identifier of the subscription resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
        /// <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
        /// <param name="next">next page (optional)</param>
        /// <param name="previous">previous page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionEventsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionEventsResponse>> SubscriptionEventsWithHttpInfoAsync(string customerId, string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int? limit = default(int?), string search = default(string), string next = default(string), string previous = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Subscriptions
        /// </summary>
        /// <remarks>
        /// Get a list of subscriptions for a customer
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
        /// <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
        /// <param name="next">next page (optional)</param>
        /// <param name="previous">previous page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionResponse</returns>
        System.Threading.Tasks.Task<SubscriptionResponse> SubscriptionListAsync(string customerId, string acceptLanguage = default(string), string xChildCompanyId = default(string), int? limit = default(int?), string search = default(string), string next = default(string), string previous = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Subscriptions
        /// </summary>
        /// <remarks>
        /// Get a list of subscriptions for a customer
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
        /// <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
        /// <param name="next">next page (optional)</param>
        /// <param name="previous">previous page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionResponse>> SubscriptionListWithHttpInfoAsync(string customerId, string acceptLanguage = default(string), string xChildCompanyId = default(string), int? limit = default(int?), string search = default(string), string next = default(string), string previous = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Pause Subscription
        /// </summary>
        /// <remarks>
        /// Pause a specific subscription
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="id">Identifier of the subscription resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionResponse</returns>
        System.Threading.Tasks.Task<SubscriptionResponse> SubscriptionPauseAsync(string customerId, string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Pause Subscription
        /// </summary>
        /// <remarks>
        /// Pause a specific subscription
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="id">Identifier of the subscription resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionResponse>> SubscriptionPauseWithHttpInfoAsync(string customerId, string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Resume Subscription
        /// </summary>
        /// <remarks>
        /// Resume a specific paused subscription
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="id">Identifier of the subscription resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionResponse</returns>
        System.Threading.Tasks.Task<SubscriptionResponse> SubscriptionResumeAsync(string customerId, string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Resume Subscription
        /// </summary>
        /// <remarks>
        /// Resume a specific paused subscription
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="id">Identifier of the subscription resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionResponse>> SubscriptionResumeWithHttpInfoAsync(string customerId, string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update Subscription
        /// </summary>
        /// <remarks>
        /// Update a specific subscription
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="id">Identifier of the subscription resource</param>
        /// <param name="subscriptionUpdateRequest">requested field for update a subscription</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionResponse</returns>
        System.Threading.Tasks.Task<SubscriptionResponse> SubscriptionUpdateAsync(string customerId, string id, SubscriptionUpdateRequest subscriptionUpdateRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update Subscription
        /// </summary>
        /// <remarks>
        /// Update a specific subscription
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="id">Identifier of the subscription resource</param>
        /// <param name="subscriptionUpdateRequest">requested field for update a subscription</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionResponse>> SubscriptionUpdateWithHttpInfoAsync(string customerId, string id, SubscriptionUpdateRequest subscriptionUpdateRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Subscription
        /// </summary>
        /// <remarks>
        /// Retrieve a specific subscription
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="id">Identifier of the subscription resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionResponse</returns>
        System.Threading.Tasks.Task<SubscriptionResponse> SubscriptionsGetAsync(string customerId, string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Subscription
        /// </summary>
        /// <remarks>
        /// Retrieve a specific subscription
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="id">Identifier of the subscription resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionResponse>> SubscriptionsGetWithHttpInfoAsync(string customerId, string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retry Failed Payment
        /// </summary>
        /// <remarks>
        /// Retry a failed payment for a specific subscription
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="id">Identifier of the subscription resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionResponse</returns>
        System.Threading.Tasks.Task<SubscriptionResponse> SubscriptionsRetryAsync(string customerId, string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retry Failed Payment
        /// </summary>
        /// <remarks>
        /// Retry a failed payment for a specific subscription
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="id">Identifier of the subscription resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionResponse>> SubscriptionsRetryWithHttpInfoAsync(string customerId, string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update Subscription [Deprecated]
        /// </summary>
        /// <remarks>
        /// DEPRECATED: This endpoint will be removed in version 2.3.0. You can modify the subscription to change the plans that your customers consume
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="subscriptionUpdateRequest">requested field for update a subscription</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<SubscriptionResponse> UpdateSubscriptionAsync(string id, SubscriptionUpdateRequest subscriptionUpdateRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update Subscription [Deprecated]
        /// </summary>
        /// <remarks>
        /// DEPRECATED: This endpoint will be removed in version 2.3.0. You can modify the subscription to change the plans that your customers consume
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="subscriptionUpdateRequest">requested field for update a subscription</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<SubscriptionResponse>> UpdateSubscriptionWithHttpInfoAsync(string id, SubscriptionUpdateRequest subscriptionUpdateRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubscriptionsApi : ISubscriptionsApiSync, ISubscriptionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SubscriptionsApi : ISubscriptionsApi
    {
        private Conekta.net.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SubscriptionsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SubscriptionsApi(string basePath)
        {
            this.Configuration = Conekta.net.Client.Configuration.MergeConfigurations(
                Conekta.net.Client.GlobalConfiguration.Instance,
                new Conekta.net.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Conekta.net.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Conekta.net.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Conekta.net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SubscriptionsApi(Conekta.net.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Conekta.net.Client.Configuration.MergeConfigurations(
                Conekta.net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Conekta.net.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Conekta.net.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Conekta.net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SubscriptionsApi(Conekta.net.Client.ISynchronousClient client, Conekta.net.Client.IAsynchronousClient asyncClient, Conekta.net.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Conekta.net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Conekta.net.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Conekta.net.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Conekta.net.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Conekta.net.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Cancel Subscription [Deprecated] DEPRECATED: This endpoint will be removed in version 2.3.0.
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionResponse</returns>
        [Obsolete]
        public SubscriptionResponse CancelSubscription(string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0)
        {
            Conekta.net.Client.ApiResponse<SubscriptionResponse> localVarResponse = CancelSubscriptionWithHttpInfo(id, acceptLanguage, xChildCompanyId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel Subscription [Deprecated] DEPRECATED: This endpoint will be removed in version 2.3.0.
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionResponse</returns>
        [Obsolete]
        public Conekta.net.Client.ApiResponse<SubscriptionResponse> CancelSubscriptionWithHttpInfo(string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->CancelSubscription");
            }

            Conekta.net.Client.RequestOptions localVarRequestOptions = new Conekta.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.conekta-v2.2.0+json"
            };

            var localVarContentType = Conekta.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Conekta.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Conekta.net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Conekta.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (xChildCompanyId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Child-Company-Id", Conekta.net.Client.ClientUtils.ParameterToString(xChildCompanyId)); // header parameter
            }

            localVarRequestOptions.Operation = "SubscriptionsApi.CancelSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SubscriptionResponse>("/customers/{id}/subscription/cancel", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel Subscription [Deprecated] DEPRECATED: This endpoint will be removed in version 2.3.0.
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<SubscriptionResponse> CancelSubscriptionAsync(string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Conekta.net.Client.ApiResponse<SubscriptionResponse> localVarResponse = await CancelSubscriptionWithHttpInfoAsync(id, acceptLanguage, xChildCompanyId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel Subscription [Deprecated] DEPRECATED: This endpoint will be removed in version 2.3.0.
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Conekta.net.Client.ApiResponse<SubscriptionResponse>> CancelSubscriptionWithHttpInfoAsync(string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->CancelSubscription");
            }


            Conekta.net.Client.RequestOptions localVarRequestOptions = new Conekta.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.conekta-v2.2.0+json"
            };

            var localVarContentType = Conekta.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Conekta.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Conekta.net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Conekta.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (xChildCompanyId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Child-Company-Id", Conekta.net.Client.ClientUtils.ParameterToString(xChildCompanyId)); // header parameter
            }

            localVarRequestOptions.Operation = "SubscriptionsApi.CancelSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SubscriptionResponse>("/customers/{id}/subscription/cancel", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Subscription [Deprecated] DEPRECATED: This endpoint will be removed in version 2.3.0. You can create the subscription to include the plans that your customers consume
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="subscriptionRequest">requested field for subscriptions</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionResponse</returns>
        [Obsolete]
        public SubscriptionResponse CreateSubscription(string id, SubscriptionRequest subscriptionRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0)
        {
            Conekta.net.Client.ApiResponse<SubscriptionResponse> localVarResponse = CreateSubscriptionWithHttpInfo(id, subscriptionRequest, acceptLanguage, xChildCompanyId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Subscription [Deprecated] DEPRECATED: This endpoint will be removed in version 2.3.0. You can create the subscription to include the plans that your customers consume
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="subscriptionRequest">requested field for subscriptions</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionResponse</returns>
        [Obsolete]
        public Conekta.net.Client.ApiResponse<SubscriptionResponse> CreateSubscriptionWithHttpInfo(string id, SubscriptionRequest subscriptionRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->CreateSubscription");
            }

            // verify the required parameter 'subscriptionRequest' is set
            if (subscriptionRequest == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'subscriptionRequest' when calling SubscriptionsApi->CreateSubscription");
            }

            Conekta.net.Client.RequestOptions localVarRequestOptions = new Conekta.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.conekta-v2.2.0+json"
            };

            var localVarContentType = Conekta.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Conekta.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Conekta.net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Conekta.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (xChildCompanyId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Child-Company-Id", Conekta.net.Client.ClientUtils.ParameterToString(xChildCompanyId)); // header parameter
            }
            localVarRequestOptions.Data = subscriptionRequest;

            localVarRequestOptions.Operation = "SubscriptionsApi.CreateSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SubscriptionResponse>("/customers/{id}/subscription", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Subscription [Deprecated] DEPRECATED: This endpoint will be removed in version 2.3.0. You can create the subscription to include the plans that your customers consume
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="subscriptionRequest">requested field for subscriptions</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<SubscriptionResponse> CreateSubscriptionAsync(string id, SubscriptionRequest subscriptionRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Conekta.net.Client.ApiResponse<SubscriptionResponse> localVarResponse = await CreateSubscriptionWithHttpInfoAsync(id, subscriptionRequest, acceptLanguage, xChildCompanyId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Subscription [Deprecated] DEPRECATED: This endpoint will be removed in version 2.3.0. You can create the subscription to include the plans that your customers consume
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="subscriptionRequest">requested field for subscriptions</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Conekta.net.Client.ApiResponse<SubscriptionResponse>> CreateSubscriptionWithHttpInfoAsync(string id, SubscriptionRequest subscriptionRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->CreateSubscription");
            }

            // verify the required parameter 'subscriptionRequest' is set
            if (subscriptionRequest == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'subscriptionRequest' when calling SubscriptionsApi->CreateSubscription");
            }


            Conekta.net.Client.RequestOptions localVarRequestOptions = new Conekta.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.conekta-v2.2.0+json"
            };

            var localVarContentType = Conekta.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Conekta.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Conekta.net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Conekta.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (xChildCompanyId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Child-Company-Id", Conekta.net.Client.ClientUtils.ParameterToString(xChildCompanyId)); // header parameter
            }
            localVarRequestOptions.Data = subscriptionRequest;

            localVarRequestOptions.Operation = "SubscriptionsApi.CreateSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SubscriptionResponse>("/customers/{id}/subscription", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Subscription [Deprecated] DEPRECATED: This endpoint will be removed in version 2.3.0.
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionResponse</returns>
        [Obsolete]
        public SubscriptionResponse GetSubscription(string id, string acceptLanguage = default(string), int operationIndex = 0)
        {
            Conekta.net.Client.ApiResponse<SubscriptionResponse> localVarResponse = GetSubscriptionWithHttpInfo(id, acceptLanguage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Subscription [Deprecated] DEPRECATED: This endpoint will be removed in version 2.3.0.
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionResponse</returns>
        [Obsolete]
        public Conekta.net.Client.ApiResponse<SubscriptionResponse> GetSubscriptionWithHttpInfo(string id, string acceptLanguage = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->GetSubscription");
            }

            Conekta.net.Client.RequestOptions localVarRequestOptions = new Conekta.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.conekta-v2.2.0+json"
            };

            var localVarContentType = Conekta.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Conekta.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Conekta.net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Conekta.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }

            localVarRequestOptions.Operation = "SubscriptionsApi.GetSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SubscriptionResponse>("/customers/{id}/subscription", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Subscription [Deprecated] DEPRECATED: This endpoint will be removed in version 2.3.0.
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<SubscriptionResponse> GetSubscriptionAsync(string id, string acceptLanguage = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Conekta.net.Client.ApiResponse<SubscriptionResponse> localVarResponse = await GetSubscriptionWithHttpInfoAsync(id, acceptLanguage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Subscription [Deprecated] DEPRECATED: This endpoint will be removed in version 2.3.0.
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Conekta.net.Client.ApiResponse<SubscriptionResponse>> GetSubscriptionWithHttpInfoAsync(string id, string acceptLanguage = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->GetSubscription");
            }


            Conekta.net.Client.RequestOptions localVarRequestOptions = new Conekta.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.conekta-v2.2.0+json"
            };

            var localVarContentType = Conekta.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Conekta.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Conekta.net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Conekta.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }

            localVarRequestOptions.Operation = "SubscriptionsApi.GetSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SubscriptionResponse>("/customers/{id}/subscription", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Subscription Events [Deprecated] DEPRECATED: This endpoint will be removed in version 2.3.0. You can get the events of the subscription(s) of a client, with the customer id
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionEventsResponse</returns>
        [Obsolete]
        public SubscriptionEventsResponse GetSubscriptionEvents(string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0)
        {
            Conekta.net.Client.ApiResponse<SubscriptionEventsResponse> localVarResponse = GetSubscriptionEventsWithHttpInfo(id, acceptLanguage, xChildCompanyId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Subscription Events [Deprecated] DEPRECATED: This endpoint will be removed in version 2.3.0. You can get the events of the subscription(s) of a client, with the customer id
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionEventsResponse</returns>
        [Obsolete]
        public Conekta.net.Client.ApiResponse<SubscriptionEventsResponse> GetSubscriptionEventsWithHttpInfo(string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->GetSubscriptionEvents");
            }

            Conekta.net.Client.RequestOptions localVarRequestOptions = new Conekta.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.conekta-v2.2.0+json"
            };

            var localVarContentType = Conekta.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Conekta.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Conekta.net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Conekta.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (xChildCompanyId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Child-Company-Id", Conekta.net.Client.ClientUtils.ParameterToString(xChildCompanyId)); // header parameter
            }

            localVarRequestOptions.Operation = "SubscriptionsApi.GetSubscriptionEvents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SubscriptionEventsResponse>("/customers/{id}/subscription/events", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSubscriptionEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Subscription Events [Deprecated] DEPRECATED: This endpoint will be removed in version 2.3.0. You can get the events of the subscription(s) of a client, with the customer id
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionEventsResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<SubscriptionEventsResponse> GetSubscriptionEventsAsync(string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Conekta.net.Client.ApiResponse<SubscriptionEventsResponse> localVarResponse = await GetSubscriptionEventsWithHttpInfoAsync(id, acceptLanguage, xChildCompanyId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Subscription Events [Deprecated] DEPRECATED: This endpoint will be removed in version 2.3.0. You can get the events of the subscription(s) of a client, with the customer id
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionEventsResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Conekta.net.Client.ApiResponse<SubscriptionEventsResponse>> GetSubscriptionEventsWithHttpInfoAsync(string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->GetSubscriptionEvents");
            }


            Conekta.net.Client.RequestOptions localVarRequestOptions = new Conekta.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.conekta-v2.2.0+json"
            };

            var localVarContentType = Conekta.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Conekta.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Conekta.net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Conekta.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (xChildCompanyId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Child-Company-Id", Conekta.net.Client.ClientUtils.ParameterToString(xChildCompanyId)); // header parameter
            }

            localVarRequestOptions.Operation = "SubscriptionsApi.GetSubscriptionEvents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SubscriptionEventsResponse>("/customers/{id}/subscription/events", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSubscriptionEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pause Subscription [Deprecated] DEPRECATED: This endpoint will be removed in version 2.3.0.
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionResponse</returns>
        [Obsolete]
        public SubscriptionResponse PauseSubscription(string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0)
        {
            Conekta.net.Client.ApiResponse<SubscriptionResponse> localVarResponse = PauseSubscriptionWithHttpInfo(id, acceptLanguage, xChildCompanyId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Pause Subscription [Deprecated] DEPRECATED: This endpoint will be removed in version 2.3.0.
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionResponse</returns>
        [Obsolete]
        public Conekta.net.Client.ApiResponse<SubscriptionResponse> PauseSubscriptionWithHttpInfo(string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->PauseSubscription");
            }

            Conekta.net.Client.RequestOptions localVarRequestOptions = new Conekta.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.conekta-v2.2.0+json"
            };

            var localVarContentType = Conekta.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Conekta.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Conekta.net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Conekta.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (xChildCompanyId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Child-Company-Id", Conekta.net.Client.ClientUtils.ParameterToString(xChildCompanyId)); // header parameter
            }

            localVarRequestOptions.Operation = "SubscriptionsApi.PauseSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SubscriptionResponse>("/customers/{id}/subscription/pause", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PauseSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pause Subscription [Deprecated] DEPRECATED: This endpoint will be removed in version 2.3.0.
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<SubscriptionResponse> PauseSubscriptionAsync(string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Conekta.net.Client.ApiResponse<SubscriptionResponse> localVarResponse = await PauseSubscriptionWithHttpInfoAsync(id, acceptLanguage, xChildCompanyId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Pause Subscription [Deprecated] DEPRECATED: This endpoint will be removed in version 2.3.0.
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Conekta.net.Client.ApiResponse<SubscriptionResponse>> PauseSubscriptionWithHttpInfoAsync(string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->PauseSubscription");
            }


            Conekta.net.Client.RequestOptions localVarRequestOptions = new Conekta.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.conekta-v2.2.0+json"
            };

            var localVarContentType = Conekta.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Conekta.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Conekta.net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Conekta.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (xChildCompanyId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Child-Company-Id", Conekta.net.Client.ClientUtils.ParameterToString(xChildCompanyId)); // header parameter
            }

            localVarRequestOptions.Operation = "SubscriptionsApi.PauseSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SubscriptionResponse>("/customers/{id}/subscription/pause", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PauseSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resume Subscription [Deprecated] DEPRECATED: This endpoint will be removed in version 2.3.0.
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionResponse</returns>
        [Obsolete]
        public SubscriptionResponse ResumeSubscription(string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0)
        {
            Conekta.net.Client.ApiResponse<SubscriptionResponse> localVarResponse = ResumeSubscriptionWithHttpInfo(id, acceptLanguage, xChildCompanyId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Resume Subscription [Deprecated] DEPRECATED: This endpoint will be removed in version 2.3.0.
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionResponse</returns>
        [Obsolete]
        public Conekta.net.Client.ApiResponse<SubscriptionResponse> ResumeSubscriptionWithHttpInfo(string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->ResumeSubscription");
            }

            Conekta.net.Client.RequestOptions localVarRequestOptions = new Conekta.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.conekta-v2.2.0+json"
            };

            var localVarContentType = Conekta.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Conekta.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Conekta.net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Conekta.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (xChildCompanyId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Child-Company-Id", Conekta.net.Client.ClientUtils.ParameterToString(xChildCompanyId)); // header parameter
            }

            localVarRequestOptions.Operation = "SubscriptionsApi.ResumeSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SubscriptionResponse>("/customers/{id}/subscription/resume", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResumeSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resume Subscription [Deprecated] DEPRECATED: This endpoint will be removed in version 2.3.0.
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<SubscriptionResponse> ResumeSubscriptionAsync(string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Conekta.net.Client.ApiResponse<SubscriptionResponse> localVarResponse = await ResumeSubscriptionWithHttpInfoAsync(id, acceptLanguage, xChildCompanyId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Resume Subscription [Deprecated] DEPRECATED: This endpoint will be removed in version 2.3.0.
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Conekta.net.Client.ApiResponse<SubscriptionResponse>> ResumeSubscriptionWithHttpInfoAsync(string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->ResumeSubscription");
            }


            Conekta.net.Client.RequestOptions localVarRequestOptions = new Conekta.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.conekta-v2.2.0+json"
            };

            var localVarContentType = Conekta.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Conekta.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Conekta.net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Conekta.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (xChildCompanyId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Child-Company-Id", Conekta.net.Client.ClientUtils.ParameterToString(xChildCompanyId)); // header parameter
            }

            localVarRequestOptions.Operation = "SubscriptionsApi.ResumeSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SubscriptionResponse>("/customers/{id}/subscription/resume", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResumeSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel Subscription Cancel a specific subscription
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="id">Identifier of the subscription resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionResponse</returns>
        public SubscriptionResponse SubscriptionCancel(string customerId, string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0)
        {
            Conekta.net.Client.ApiResponse<SubscriptionResponse> localVarResponse = SubscriptionCancelWithHttpInfo(customerId, id, acceptLanguage, xChildCompanyId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel Subscription Cancel a specific subscription
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="id">Identifier of the subscription resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionResponse</returns>
        public Conekta.net.Client.ApiResponse<SubscriptionResponse> SubscriptionCancelWithHttpInfo(string customerId, string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'customerId' when calling SubscriptionsApi->SubscriptionCancel");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->SubscriptionCancel");
            }

            Conekta.net.Client.RequestOptions localVarRequestOptions = new Conekta.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.conekta-v2.2.0+json"
            };

            var localVarContentType = Conekta.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Conekta.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customer_id", Conekta.net.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Conekta.net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Conekta.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (xChildCompanyId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Child-Company-Id", Conekta.net.Client.ClientUtils.ParameterToString(xChildCompanyId)); // header parameter
            }

            localVarRequestOptions.Operation = "SubscriptionsApi.SubscriptionCancel";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SubscriptionResponse>("/customers/{customer_id}/subscriptions/{id}/cancel", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionCancel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel Subscription Cancel a specific subscription
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="id">Identifier of the subscription resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionResponse</returns>
        public async System.Threading.Tasks.Task<SubscriptionResponse> SubscriptionCancelAsync(string customerId, string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Conekta.net.Client.ApiResponse<SubscriptionResponse> localVarResponse = await SubscriptionCancelWithHttpInfoAsync(customerId, id, acceptLanguage, xChildCompanyId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel Subscription Cancel a specific subscription
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="id">Identifier of the subscription resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionResponse)</returns>
        public async System.Threading.Tasks.Task<Conekta.net.Client.ApiResponse<SubscriptionResponse>> SubscriptionCancelWithHttpInfoAsync(string customerId, string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'customerId' when calling SubscriptionsApi->SubscriptionCancel");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->SubscriptionCancel");
            }


            Conekta.net.Client.RequestOptions localVarRequestOptions = new Conekta.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.conekta-v2.2.0+json"
            };

            var localVarContentType = Conekta.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Conekta.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customer_id", Conekta.net.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Conekta.net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Conekta.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (xChildCompanyId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Child-Company-Id", Conekta.net.Client.ClientUtils.ParameterToString(xChildCompanyId)); // header parameter
            }

            localVarRequestOptions.Operation = "SubscriptionsApi.SubscriptionCancel";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SubscriptionResponse>("/customers/{customer_id}/subscriptions/{id}/cancel", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionCancel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Subscription Create a new subscription for a customer (keeps existing subscriptions active)
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="subscriptionRequest">requested field for subscriptions</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionResponse</returns>
        public SubscriptionResponse SubscriptionCreate(string customerId, SubscriptionRequest subscriptionRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0)
        {
            Conekta.net.Client.ApiResponse<SubscriptionResponse> localVarResponse = SubscriptionCreateWithHttpInfo(customerId, subscriptionRequest, acceptLanguage, xChildCompanyId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Subscription Create a new subscription for a customer (keeps existing subscriptions active)
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="subscriptionRequest">requested field for subscriptions</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionResponse</returns>
        public Conekta.net.Client.ApiResponse<SubscriptionResponse> SubscriptionCreateWithHttpInfo(string customerId, SubscriptionRequest subscriptionRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'customerId' when calling SubscriptionsApi->SubscriptionCreate");
            }

            // verify the required parameter 'subscriptionRequest' is set
            if (subscriptionRequest == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'subscriptionRequest' when calling SubscriptionsApi->SubscriptionCreate");
            }

            Conekta.net.Client.RequestOptions localVarRequestOptions = new Conekta.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.conekta-v2.2.0+json"
            };

            var localVarContentType = Conekta.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Conekta.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customer_id", Conekta.net.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Conekta.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (xChildCompanyId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Child-Company-Id", Conekta.net.Client.ClientUtils.ParameterToString(xChildCompanyId)); // header parameter
            }
            localVarRequestOptions.Data = subscriptionRequest;

            localVarRequestOptions.Operation = "SubscriptionsApi.SubscriptionCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SubscriptionResponse>("/customers/{customer_id}/subscriptions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Subscription Create a new subscription for a customer (keeps existing subscriptions active)
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="subscriptionRequest">requested field for subscriptions</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionResponse</returns>
        public async System.Threading.Tasks.Task<SubscriptionResponse> SubscriptionCreateAsync(string customerId, SubscriptionRequest subscriptionRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Conekta.net.Client.ApiResponse<SubscriptionResponse> localVarResponse = await SubscriptionCreateWithHttpInfoAsync(customerId, subscriptionRequest, acceptLanguage, xChildCompanyId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Subscription Create a new subscription for a customer (keeps existing subscriptions active)
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="subscriptionRequest">requested field for subscriptions</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionResponse)</returns>
        public async System.Threading.Tasks.Task<Conekta.net.Client.ApiResponse<SubscriptionResponse>> SubscriptionCreateWithHttpInfoAsync(string customerId, SubscriptionRequest subscriptionRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'customerId' when calling SubscriptionsApi->SubscriptionCreate");
            }

            // verify the required parameter 'subscriptionRequest' is set
            if (subscriptionRequest == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'subscriptionRequest' when calling SubscriptionsApi->SubscriptionCreate");
            }


            Conekta.net.Client.RequestOptions localVarRequestOptions = new Conekta.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.conekta-v2.2.0+json"
            };

            var localVarContentType = Conekta.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Conekta.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customer_id", Conekta.net.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Conekta.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (xChildCompanyId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Child-Company-Id", Conekta.net.Client.ClientUtils.ParameterToString(xChildCompanyId)); // header parameter
            }
            localVarRequestOptions.Data = subscriptionRequest;

            localVarRequestOptions.Operation = "SubscriptionsApi.SubscriptionCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SubscriptionResponse>("/customers/{customer_id}/subscriptions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Subscription Events Get events for a specific subscription
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="id">Identifier of the subscription resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
        /// <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
        /// <param name="next">next page (optional)</param>
        /// <param name="previous">previous page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionEventsResponse</returns>
        public SubscriptionEventsResponse SubscriptionEvents(string customerId, string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int? limit = default(int?), string search = default(string), string next = default(string), string previous = default(string), int operationIndex = 0)
        {
            Conekta.net.Client.ApiResponse<SubscriptionEventsResponse> localVarResponse = SubscriptionEventsWithHttpInfo(customerId, id, acceptLanguage, xChildCompanyId, limit, search, next, previous);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Subscription Events Get events for a specific subscription
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="id">Identifier of the subscription resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
        /// <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
        /// <param name="next">next page (optional)</param>
        /// <param name="previous">previous page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionEventsResponse</returns>
        public Conekta.net.Client.ApiResponse<SubscriptionEventsResponse> SubscriptionEventsWithHttpInfo(string customerId, string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int? limit = default(int?), string search = default(string), string next = default(string), string previous = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'customerId' when calling SubscriptionsApi->SubscriptionEvents");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->SubscriptionEvents");
            }

            Conekta.net.Client.RequestOptions localVarRequestOptions = new Conekta.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.conekta-v2.2.0+json"
            };

            var localVarContentType = Conekta.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Conekta.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customer_id", Conekta.net.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Conekta.net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Conekta.net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(Conekta.net.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (next != null)
            {
                localVarRequestOptions.QueryParameters.Add(Conekta.net.Client.ClientUtils.ParameterToMultiMap("", "next", next));
            }
            if (previous != null)
            {
                localVarRequestOptions.QueryParameters.Add(Conekta.net.Client.ClientUtils.ParameterToMultiMap("", "previous", previous));
            }
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Conekta.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (xChildCompanyId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Child-Company-Id", Conekta.net.Client.ClientUtils.ParameterToString(xChildCompanyId)); // header parameter
            }

            localVarRequestOptions.Operation = "SubscriptionsApi.SubscriptionEvents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SubscriptionEventsResponse>("/customers/{customer_id}/subscriptions/{id}/events", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Subscription Events Get events for a specific subscription
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="id">Identifier of the subscription resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
        /// <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
        /// <param name="next">next page (optional)</param>
        /// <param name="previous">previous page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionEventsResponse</returns>
        public async System.Threading.Tasks.Task<SubscriptionEventsResponse> SubscriptionEventsAsync(string customerId, string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int? limit = default(int?), string search = default(string), string next = default(string), string previous = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Conekta.net.Client.ApiResponse<SubscriptionEventsResponse> localVarResponse = await SubscriptionEventsWithHttpInfoAsync(customerId, id, acceptLanguage, xChildCompanyId, limit, search, next, previous, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Subscription Events Get events for a specific subscription
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="id">Identifier of the subscription resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
        /// <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
        /// <param name="next">next page (optional)</param>
        /// <param name="previous">previous page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionEventsResponse)</returns>
        public async System.Threading.Tasks.Task<Conekta.net.Client.ApiResponse<SubscriptionEventsResponse>> SubscriptionEventsWithHttpInfoAsync(string customerId, string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int? limit = default(int?), string search = default(string), string next = default(string), string previous = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'customerId' when calling SubscriptionsApi->SubscriptionEvents");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->SubscriptionEvents");
            }


            Conekta.net.Client.RequestOptions localVarRequestOptions = new Conekta.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.conekta-v2.2.0+json"
            };

            var localVarContentType = Conekta.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Conekta.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customer_id", Conekta.net.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Conekta.net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Conekta.net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(Conekta.net.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (next != null)
            {
                localVarRequestOptions.QueryParameters.Add(Conekta.net.Client.ClientUtils.ParameterToMultiMap("", "next", next));
            }
            if (previous != null)
            {
                localVarRequestOptions.QueryParameters.Add(Conekta.net.Client.ClientUtils.ParameterToMultiMap("", "previous", previous));
            }
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Conekta.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (xChildCompanyId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Child-Company-Id", Conekta.net.Client.ClientUtils.ParameterToString(xChildCompanyId)); // header parameter
            }

            localVarRequestOptions.Operation = "SubscriptionsApi.SubscriptionEvents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SubscriptionEventsResponse>("/customers/{customer_id}/subscriptions/{id}/events", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Subscriptions Get a list of subscriptions for a customer
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
        /// <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
        /// <param name="next">next page (optional)</param>
        /// <param name="previous">previous page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionResponse</returns>
        public SubscriptionResponse SubscriptionList(string customerId, string acceptLanguage = default(string), string xChildCompanyId = default(string), int? limit = default(int?), string search = default(string), string next = default(string), string previous = default(string), int operationIndex = 0)
        {
            Conekta.net.Client.ApiResponse<SubscriptionResponse> localVarResponse = SubscriptionListWithHttpInfo(customerId, acceptLanguage, xChildCompanyId, limit, search, next, previous);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Subscriptions Get a list of subscriptions for a customer
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
        /// <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
        /// <param name="next">next page (optional)</param>
        /// <param name="previous">previous page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionResponse</returns>
        public Conekta.net.Client.ApiResponse<SubscriptionResponse> SubscriptionListWithHttpInfo(string customerId, string acceptLanguage = default(string), string xChildCompanyId = default(string), int? limit = default(int?), string search = default(string), string next = default(string), string previous = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'customerId' when calling SubscriptionsApi->SubscriptionList");
            }

            Conekta.net.Client.RequestOptions localVarRequestOptions = new Conekta.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.conekta-v2.2.0+json"
            };

            var localVarContentType = Conekta.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Conekta.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customer_id", Conekta.net.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Conekta.net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(Conekta.net.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (next != null)
            {
                localVarRequestOptions.QueryParameters.Add(Conekta.net.Client.ClientUtils.ParameterToMultiMap("", "next", next));
            }
            if (previous != null)
            {
                localVarRequestOptions.QueryParameters.Add(Conekta.net.Client.ClientUtils.ParameterToMultiMap("", "previous", previous));
            }
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Conekta.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (xChildCompanyId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Child-Company-Id", Conekta.net.Client.ClientUtils.ParameterToString(xChildCompanyId)); // header parameter
            }

            localVarRequestOptions.Operation = "SubscriptionsApi.SubscriptionList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SubscriptionResponse>("/customers/{customer_id}/subscriptions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Subscriptions Get a list of subscriptions for a customer
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
        /// <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
        /// <param name="next">next page (optional)</param>
        /// <param name="previous">previous page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionResponse</returns>
        public async System.Threading.Tasks.Task<SubscriptionResponse> SubscriptionListAsync(string customerId, string acceptLanguage = default(string), string xChildCompanyId = default(string), int? limit = default(int?), string search = default(string), string next = default(string), string previous = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Conekta.net.Client.ApiResponse<SubscriptionResponse> localVarResponse = await SubscriptionListWithHttpInfoAsync(customerId, acceptLanguage, xChildCompanyId, limit, search, next, previous, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Subscriptions Get a list of subscriptions for a customer
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
        /// <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
        /// <param name="next">next page (optional)</param>
        /// <param name="previous">previous page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionResponse)</returns>
        public async System.Threading.Tasks.Task<Conekta.net.Client.ApiResponse<SubscriptionResponse>> SubscriptionListWithHttpInfoAsync(string customerId, string acceptLanguage = default(string), string xChildCompanyId = default(string), int? limit = default(int?), string search = default(string), string next = default(string), string previous = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'customerId' when calling SubscriptionsApi->SubscriptionList");
            }


            Conekta.net.Client.RequestOptions localVarRequestOptions = new Conekta.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.conekta-v2.2.0+json"
            };

            var localVarContentType = Conekta.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Conekta.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customer_id", Conekta.net.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Conekta.net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(Conekta.net.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (next != null)
            {
                localVarRequestOptions.QueryParameters.Add(Conekta.net.Client.ClientUtils.ParameterToMultiMap("", "next", next));
            }
            if (previous != null)
            {
                localVarRequestOptions.QueryParameters.Add(Conekta.net.Client.ClientUtils.ParameterToMultiMap("", "previous", previous));
            }
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Conekta.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (xChildCompanyId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Child-Company-Id", Conekta.net.Client.ClientUtils.ParameterToString(xChildCompanyId)); // header parameter
            }

            localVarRequestOptions.Operation = "SubscriptionsApi.SubscriptionList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SubscriptionResponse>("/customers/{customer_id}/subscriptions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pause Subscription Pause a specific subscription
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="id">Identifier of the subscription resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionResponse</returns>
        public SubscriptionResponse SubscriptionPause(string customerId, string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0)
        {
            Conekta.net.Client.ApiResponse<SubscriptionResponse> localVarResponse = SubscriptionPauseWithHttpInfo(customerId, id, acceptLanguage, xChildCompanyId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Pause Subscription Pause a specific subscription
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="id">Identifier of the subscription resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionResponse</returns>
        public Conekta.net.Client.ApiResponse<SubscriptionResponse> SubscriptionPauseWithHttpInfo(string customerId, string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'customerId' when calling SubscriptionsApi->SubscriptionPause");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->SubscriptionPause");
            }

            Conekta.net.Client.RequestOptions localVarRequestOptions = new Conekta.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.conekta-v2.2.0+json"
            };

            var localVarContentType = Conekta.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Conekta.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customer_id", Conekta.net.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Conekta.net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Conekta.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (xChildCompanyId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Child-Company-Id", Conekta.net.Client.ClientUtils.ParameterToString(xChildCompanyId)); // header parameter
            }

            localVarRequestOptions.Operation = "SubscriptionsApi.SubscriptionPause";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SubscriptionResponse>("/customers/{customer_id}/subscriptions/{id}/pause", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionPause", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pause Subscription Pause a specific subscription
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="id">Identifier of the subscription resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionResponse</returns>
        public async System.Threading.Tasks.Task<SubscriptionResponse> SubscriptionPauseAsync(string customerId, string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Conekta.net.Client.ApiResponse<SubscriptionResponse> localVarResponse = await SubscriptionPauseWithHttpInfoAsync(customerId, id, acceptLanguage, xChildCompanyId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Pause Subscription Pause a specific subscription
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="id">Identifier of the subscription resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionResponse)</returns>
        public async System.Threading.Tasks.Task<Conekta.net.Client.ApiResponse<SubscriptionResponse>> SubscriptionPauseWithHttpInfoAsync(string customerId, string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'customerId' when calling SubscriptionsApi->SubscriptionPause");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->SubscriptionPause");
            }


            Conekta.net.Client.RequestOptions localVarRequestOptions = new Conekta.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.conekta-v2.2.0+json"
            };

            var localVarContentType = Conekta.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Conekta.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customer_id", Conekta.net.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Conekta.net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Conekta.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (xChildCompanyId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Child-Company-Id", Conekta.net.Client.ClientUtils.ParameterToString(xChildCompanyId)); // header parameter
            }

            localVarRequestOptions.Operation = "SubscriptionsApi.SubscriptionPause";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SubscriptionResponse>("/customers/{customer_id}/subscriptions/{id}/pause", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionPause", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resume Subscription Resume a specific paused subscription
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="id">Identifier of the subscription resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionResponse</returns>
        public SubscriptionResponse SubscriptionResume(string customerId, string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0)
        {
            Conekta.net.Client.ApiResponse<SubscriptionResponse> localVarResponse = SubscriptionResumeWithHttpInfo(customerId, id, acceptLanguage, xChildCompanyId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Resume Subscription Resume a specific paused subscription
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="id">Identifier of the subscription resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionResponse</returns>
        public Conekta.net.Client.ApiResponse<SubscriptionResponse> SubscriptionResumeWithHttpInfo(string customerId, string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'customerId' when calling SubscriptionsApi->SubscriptionResume");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->SubscriptionResume");
            }

            Conekta.net.Client.RequestOptions localVarRequestOptions = new Conekta.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.conekta-v2.2.0+json"
            };

            var localVarContentType = Conekta.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Conekta.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customer_id", Conekta.net.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Conekta.net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Conekta.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (xChildCompanyId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Child-Company-Id", Conekta.net.Client.ClientUtils.ParameterToString(xChildCompanyId)); // header parameter
            }

            localVarRequestOptions.Operation = "SubscriptionsApi.SubscriptionResume";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SubscriptionResponse>("/customers/{customer_id}/subscriptions/{id}/resume", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionResume", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resume Subscription Resume a specific paused subscription
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="id">Identifier of the subscription resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionResponse</returns>
        public async System.Threading.Tasks.Task<SubscriptionResponse> SubscriptionResumeAsync(string customerId, string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Conekta.net.Client.ApiResponse<SubscriptionResponse> localVarResponse = await SubscriptionResumeWithHttpInfoAsync(customerId, id, acceptLanguage, xChildCompanyId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Resume Subscription Resume a specific paused subscription
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="id">Identifier of the subscription resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionResponse)</returns>
        public async System.Threading.Tasks.Task<Conekta.net.Client.ApiResponse<SubscriptionResponse>> SubscriptionResumeWithHttpInfoAsync(string customerId, string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'customerId' when calling SubscriptionsApi->SubscriptionResume");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->SubscriptionResume");
            }


            Conekta.net.Client.RequestOptions localVarRequestOptions = new Conekta.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.conekta-v2.2.0+json"
            };

            var localVarContentType = Conekta.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Conekta.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customer_id", Conekta.net.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Conekta.net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Conekta.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (xChildCompanyId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Child-Company-Id", Conekta.net.Client.ClientUtils.ParameterToString(xChildCompanyId)); // header parameter
            }

            localVarRequestOptions.Operation = "SubscriptionsApi.SubscriptionResume";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SubscriptionResponse>("/customers/{customer_id}/subscriptions/{id}/resume", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionResume", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Subscription Update a specific subscription
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="id">Identifier of the subscription resource</param>
        /// <param name="subscriptionUpdateRequest">requested field for update a subscription</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionResponse</returns>
        public SubscriptionResponse SubscriptionUpdate(string customerId, string id, SubscriptionUpdateRequest subscriptionUpdateRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0)
        {
            Conekta.net.Client.ApiResponse<SubscriptionResponse> localVarResponse = SubscriptionUpdateWithHttpInfo(customerId, id, subscriptionUpdateRequest, acceptLanguage, xChildCompanyId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Subscription Update a specific subscription
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="id">Identifier of the subscription resource</param>
        /// <param name="subscriptionUpdateRequest">requested field for update a subscription</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionResponse</returns>
        public Conekta.net.Client.ApiResponse<SubscriptionResponse> SubscriptionUpdateWithHttpInfo(string customerId, string id, SubscriptionUpdateRequest subscriptionUpdateRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'customerId' when calling SubscriptionsApi->SubscriptionUpdate");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->SubscriptionUpdate");
            }

            // verify the required parameter 'subscriptionUpdateRequest' is set
            if (subscriptionUpdateRequest == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'subscriptionUpdateRequest' when calling SubscriptionsApi->SubscriptionUpdate");
            }

            Conekta.net.Client.RequestOptions localVarRequestOptions = new Conekta.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.conekta-v2.2.0+json"
            };

            var localVarContentType = Conekta.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Conekta.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customer_id", Conekta.net.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Conekta.net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Conekta.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (xChildCompanyId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Child-Company-Id", Conekta.net.Client.ClientUtils.ParameterToString(xChildCompanyId)); // header parameter
            }
            localVarRequestOptions.Data = subscriptionUpdateRequest;

            localVarRequestOptions.Operation = "SubscriptionsApi.SubscriptionUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<SubscriptionResponse>("/customers/{customer_id}/subscriptions/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Subscription Update a specific subscription
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="id">Identifier of the subscription resource</param>
        /// <param name="subscriptionUpdateRequest">requested field for update a subscription</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionResponse</returns>
        public async System.Threading.Tasks.Task<SubscriptionResponse> SubscriptionUpdateAsync(string customerId, string id, SubscriptionUpdateRequest subscriptionUpdateRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Conekta.net.Client.ApiResponse<SubscriptionResponse> localVarResponse = await SubscriptionUpdateWithHttpInfoAsync(customerId, id, subscriptionUpdateRequest, acceptLanguage, xChildCompanyId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Subscription Update a specific subscription
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="id">Identifier of the subscription resource</param>
        /// <param name="subscriptionUpdateRequest">requested field for update a subscription</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionResponse)</returns>
        public async System.Threading.Tasks.Task<Conekta.net.Client.ApiResponse<SubscriptionResponse>> SubscriptionUpdateWithHttpInfoAsync(string customerId, string id, SubscriptionUpdateRequest subscriptionUpdateRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'customerId' when calling SubscriptionsApi->SubscriptionUpdate");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->SubscriptionUpdate");
            }

            // verify the required parameter 'subscriptionUpdateRequest' is set
            if (subscriptionUpdateRequest == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'subscriptionUpdateRequest' when calling SubscriptionsApi->SubscriptionUpdate");
            }


            Conekta.net.Client.RequestOptions localVarRequestOptions = new Conekta.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.conekta-v2.2.0+json"
            };

            var localVarContentType = Conekta.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Conekta.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customer_id", Conekta.net.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Conekta.net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Conekta.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (xChildCompanyId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Child-Company-Id", Conekta.net.Client.ClientUtils.ParameterToString(xChildCompanyId)); // header parameter
            }
            localVarRequestOptions.Data = subscriptionUpdateRequest;

            localVarRequestOptions.Operation = "SubscriptionsApi.SubscriptionUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<SubscriptionResponse>("/customers/{customer_id}/subscriptions/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Subscription Retrieve a specific subscription
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="id">Identifier of the subscription resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionResponse</returns>
        public SubscriptionResponse SubscriptionsGet(string customerId, string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0)
        {
            Conekta.net.Client.ApiResponse<SubscriptionResponse> localVarResponse = SubscriptionsGetWithHttpInfo(customerId, id, acceptLanguage, xChildCompanyId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Subscription Retrieve a specific subscription
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="id">Identifier of the subscription resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionResponse</returns>
        public Conekta.net.Client.ApiResponse<SubscriptionResponse> SubscriptionsGetWithHttpInfo(string customerId, string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'customerId' when calling SubscriptionsApi->SubscriptionsGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->SubscriptionsGet");
            }

            Conekta.net.Client.RequestOptions localVarRequestOptions = new Conekta.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.conekta-v2.2.0+json"
            };

            var localVarContentType = Conekta.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Conekta.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customer_id", Conekta.net.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Conekta.net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Conekta.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (xChildCompanyId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Child-Company-Id", Conekta.net.Client.ClientUtils.ParameterToString(xChildCompanyId)); // header parameter
            }

            localVarRequestOptions.Operation = "SubscriptionsApi.SubscriptionsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SubscriptionResponse>("/customers/{customer_id}/subscriptions/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Subscription Retrieve a specific subscription
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="id">Identifier of the subscription resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionResponse</returns>
        public async System.Threading.Tasks.Task<SubscriptionResponse> SubscriptionsGetAsync(string customerId, string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Conekta.net.Client.ApiResponse<SubscriptionResponse> localVarResponse = await SubscriptionsGetWithHttpInfoAsync(customerId, id, acceptLanguage, xChildCompanyId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Subscription Retrieve a specific subscription
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="id">Identifier of the subscription resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionResponse)</returns>
        public async System.Threading.Tasks.Task<Conekta.net.Client.ApiResponse<SubscriptionResponse>> SubscriptionsGetWithHttpInfoAsync(string customerId, string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'customerId' when calling SubscriptionsApi->SubscriptionsGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->SubscriptionsGet");
            }


            Conekta.net.Client.RequestOptions localVarRequestOptions = new Conekta.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.conekta-v2.2.0+json"
            };

            var localVarContentType = Conekta.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Conekta.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customer_id", Conekta.net.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Conekta.net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Conekta.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (xChildCompanyId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Child-Company-Id", Conekta.net.Client.ClientUtils.ParameterToString(xChildCompanyId)); // header parameter
            }

            localVarRequestOptions.Operation = "SubscriptionsApi.SubscriptionsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SubscriptionResponse>("/customers/{customer_id}/subscriptions/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retry Failed Payment Retry a failed payment for a specific subscription
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="id">Identifier of the subscription resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionResponse</returns>
        public SubscriptionResponse SubscriptionsRetry(string customerId, string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0)
        {
            Conekta.net.Client.ApiResponse<SubscriptionResponse> localVarResponse = SubscriptionsRetryWithHttpInfo(customerId, id, acceptLanguage, xChildCompanyId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retry Failed Payment Retry a failed payment for a specific subscription
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="id">Identifier of the subscription resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionResponse</returns>
        public Conekta.net.Client.ApiResponse<SubscriptionResponse> SubscriptionsRetryWithHttpInfo(string customerId, string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'customerId' when calling SubscriptionsApi->SubscriptionsRetry");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->SubscriptionsRetry");
            }

            Conekta.net.Client.RequestOptions localVarRequestOptions = new Conekta.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.conekta-v2.2.0+json"
            };

            var localVarContentType = Conekta.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Conekta.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customer_id", Conekta.net.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Conekta.net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Conekta.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (xChildCompanyId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Child-Company-Id", Conekta.net.Client.ClientUtils.ParameterToString(xChildCompanyId)); // header parameter
            }

            localVarRequestOptions.Operation = "SubscriptionsApi.SubscriptionsRetry";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SubscriptionResponse>("/customers/{customer_id}/subscriptions/{id}/retry", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionsRetry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retry Failed Payment Retry a failed payment for a specific subscription
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="id">Identifier of the subscription resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionResponse</returns>
        public async System.Threading.Tasks.Task<SubscriptionResponse> SubscriptionsRetryAsync(string customerId, string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Conekta.net.Client.ApiResponse<SubscriptionResponse> localVarResponse = await SubscriptionsRetryWithHttpInfoAsync(customerId, id, acceptLanguage, xChildCompanyId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retry Failed Payment Retry a failed payment for a specific subscription
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Identifier of the customer resource</param>
        /// <param name="id">Identifier of the subscription resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionResponse)</returns>
        public async System.Threading.Tasks.Task<Conekta.net.Client.ApiResponse<SubscriptionResponse>> SubscriptionsRetryWithHttpInfoAsync(string customerId, string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'customerId' when calling SubscriptionsApi->SubscriptionsRetry");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->SubscriptionsRetry");
            }


            Conekta.net.Client.RequestOptions localVarRequestOptions = new Conekta.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.conekta-v2.2.0+json"
            };

            var localVarContentType = Conekta.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Conekta.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customer_id", Conekta.net.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Conekta.net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Conekta.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (xChildCompanyId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Child-Company-Id", Conekta.net.Client.ClientUtils.ParameterToString(xChildCompanyId)); // header parameter
            }

            localVarRequestOptions.Operation = "SubscriptionsApi.SubscriptionsRetry";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SubscriptionResponse>("/customers/{customer_id}/subscriptions/{id}/retry", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionsRetry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Subscription [Deprecated] DEPRECATED: This endpoint will be removed in version 2.3.0. You can modify the subscription to change the plans that your customers consume
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="subscriptionUpdateRequest">requested field for update a subscription</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionResponse</returns>
        [Obsolete]
        public SubscriptionResponse UpdateSubscription(string id, SubscriptionUpdateRequest subscriptionUpdateRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0)
        {
            Conekta.net.Client.ApiResponse<SubscriptionResponse> localVarResponse = UpdateSubscriptionWithHttpInfo(id, subscriptionUpdateRequest, acceptLanguage, xChildCompanyId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Subscription [Deprecated] DEPRECATED: This endpoint will be removed in version 2.3.0. You can modify the subscription to change the plans that your customers consume
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="subscriptionUpdateRequest">requested field for update a subscription</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionResponse</returns>
        [Obsolete]
        public Conekta.net.Client.ApiResponse<SubscriptionResponse> UpdateSubscriptionWithHttpInfo(string id, SubscriptionUpdateRequest subscriptionUpdateRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->UpdateSubscription");
            }

            // verify the required parameter 'subscriptionUpdateRequest' is set
            if (subscriptionUpdateRequest == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'subscriptionUpdateRequest' when calling SubscriptionsApi->UpdateSubscription");
            }

            Conekta.net.Client.RequestOptions localVarRequestOptions = new Conekta.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.conekta-v2.2.0+json"
            };

            var localVarContentType = Conekta.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Conekta.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Conekta.net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Conekta.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (xChildCompanyId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Child-Company-Id", Conekta.net.Client.ClientUtils.ParameterToString(xChildCompanyId)); // header parameter
            }
            localVarRequestOptions.Data = subscriptionUpdateRequest;

            localVarRequestOptions.Operation = "SubscriptionsApi.UpdateSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<SubscriptionResponse>("/customers/{id}/subscription", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Subscription [Deprecated] DEPRECATED: This endpoint will be removed in version 2.3.0. You can modify the subscription to change the plans that your customers consume
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="subscriptionUpdateRequest">requested field for update a subscription</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<SubscriptionResponse> UpdateSubscriptionAsync(string id, SubscriptionUpdateRequest subscriptionUpdateRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Conekta.net.Client.ApiResponse<SubscriptionResponse> localVarResponse = await UpdateSubscriptionWithHttpInfoAsync(id, subscriptionUpdateRequest, acceptLanguage, xChildCompanyId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Subscription [Deprecated] DEPRECATED: This endpoint will be removed in version 2.3.0. You can modify the subscription to change the plans that your customers consume
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="subscriptionUpdateRequest">requested field for update a subscription</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Conekta.net.Client.ApiResponse<SubscriptionResponse>> UpdateSubscriptionWithHttpInfoAsync(string id, SubscriptionUpdateRequest subscriptionUpdateRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->UpdateSubscription");
            }

            // verify the required parameter 'subscriptionUpdateRequest' is set
            if (subscriptionUpdateRequest == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'subscriptionUpdateRequest' when calling SubscriptionsApi->UpdateSubscription");
            }


            Conekta.net.Client.RequestOptions localVarRequestOptions = new Conekta.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.conekta-v2.2.0+json"
            };

            var localVarContentType = Conekta.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Conekta.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Conekta.net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Conekta.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (xChildCompanyId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Child-Company-Id", Conekta.net.Client.ClientUtils.ParameterToString(xChildCompanyId)); // header parameter
            }
            localVarRequestOptions.Data = subscriptionUpdateRequest;

            localVarRequestOptions.Operation = "SubscriptionsApi.UpdateSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<SubscriptionResponse>("/customers/{id}/subscription", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
