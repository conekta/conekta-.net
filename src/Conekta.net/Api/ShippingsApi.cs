/*
 * Conekta API
 *
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Conekta.net.Client;
using Conekta.net.Model;

namespace Conekta.net.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IShippingsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Shipping
        /// </summary>
        /// <remarks>
        /// creates a new shipping lines for an existing orden
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="shippingLinesRequest">requested field for a shipping lines</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ShippingLinesOrderResponse</returns>
        ShippingLinesOrderResponse OrdersCreateShippingLines(string id, ShippingLinesRequest shippingLinesRequest, string acceptLanguage = default(string), int operationIndex = 0);

        /// <summary>
        /// Create Shipping
        /// </summary>
        /// <remarks>
        /// creates a new shipping lines for an existing orden
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="shippingLinesRequest">requested field for a shipping lines</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ShippingLinesOrderResponse</returns>
        ApiResponse<ShippingLinesOrderResponse> OrdersCreateShippingLinesWithHttpInfo(string id, ShippingLinesRequest shippingLinesRequest, string acceptLanguage = default(string), int operationIndex = 0);
        /// <summary>
        /// Update Shipping
        /// </summary>
        /// <remarks>
        /// updates an existing shipping lines for an existing orden
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="shippingLinesId">identifier</param>
        /// <param name="shippingLinesRequest">requested field for a shipping lines</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ShippingLinesOrderResponse</returns>
        ShippingLinesOrderResponse OrdersUpdateShippingLines(string id, string shippingLinesId, ShippingLinesRequest shippingLinesRequest, string acceptLanguage = default(string), int operationIndex = 0);

        /// <summary>
        /// Update Shipping
        /// </summary>
        /// <remarks>
        /// updates an existing shipping lines for an existing orden
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="shippingLinesId">identifier</param>
        /// <param name="shippingLinesRequest">requested field for a shipping lines</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ShippingLinesOrderResponse</returns>
        ApiResponse<ShippingLinesOrderResponse> OrdersUpdateShippingLinesWithHttpInfo(string id, string shippingLinesId, ShippingLinesRequest shippingLinesRequest, string acceptLanguage = default(string), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IShippingsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Shipping
        /// </summary>
        /// <remarks>
        /// creates a new shipping lines for an existing orden
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="shippingLinesRequest">requested field for a shipping lines</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShippingLinesOrderResponse</returns>
        System.Threading.Tasks.Task<ShippingLinesOrderResponse> OrdersCreateShippingLinesAsync(string id, ShippingLinesRequest shippingLinesRequest, string acceptLanguage = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Shipping
        /// </summary>
        /// <remarks>
        /// creates a new shipping lines for an existing orden
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="shippingLinesRequest">requested field for a shipping lines</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShippingLinesOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShippingLinesOrderResponse>> OrdersCreateShippingLinesWithHttpInfoAsync(string id, ShippingLinesRequest shippingLinesRequest, string acceptLanguage = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Shipping
        /// </summary>
        /// <remarks>
        /// updates an existing shipping lines for an existing orden
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="shippingLinesId">identifier</param>
        /// <param name="shippingLinesRequest">requested field for a shipping lines</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShippingLinesOrderResponse</returns>
        System.Threading.Tasks.Task<ShippingLinesOrderResponse> OrdersUpdateShippingLinesAsync(string id, string shippingLinesId, ShippingLinesRequest shippingLinesRequest, string acceptLanguage = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Shipping
        /// </summary>
        /// <remarks>
        /// updates an existing shipping lines for an existing orden
        /// </remarks>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="shippingLinesId">identifier</param>
        /// <param name="shippingLinesRequest">requested field for a shipping lines</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShippingLinesOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShippingLinesOrderResponse>> OrdersUpdateShippingLinesWithHttpInfoAsync(string id, string shippingLinesId, ShippingLinesRequest shippingLinesRequest, string acceptLanguage = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IShippingsApi : IShippingsApiSync, IShippingsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ShippingsApi : IShippingsApi
    {
        private Conekta.net.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ShippingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ShippingsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ShippingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ShippingsApi(string basePath)
        {
            this.Configuration = Conekta.net.Client.Configuration.MergeConfigurations(
                Conekta.net.Client.GlobalConfiguration.Instance,
                new Conekta.net.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Conekta.net.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Conekta.net.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Conekta.net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ShippingsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ShippingsApi(Conekta.net.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Conekta.net.Client.Configuration.MergeConfigurations(
                Conekta.net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Conekta.net.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Conekta.net.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Conekta.net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ShippingsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ShippingsApi(Conekta.net.Client.ISynchronousClient client, Conekta.net.Client.IAsynchronousClient asyncClient, Conekta.net.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Conekta.net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Conekta.net.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Conekta.net.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Conekta.net.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Conekta.net.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Shipping creates a new shipping lines for an existing orden
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="shippingLinesRequest">requested field for a shipping lines</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ShippingLinesOrderResponse</returns>
        public ShippingLinesOrderResponse OrdersCreateShippingLines(string id, ShippingLinesRequest shippingLinesRequest, string acceptLanguage = default(string), int operationIndex = 0)
        {
            Conekta.net.Client.ApiResponse<ShippingLinesOrderResponse> localVarResponse = OrdersCreateShippingLinesWithHttpInfo(id, shippingLinesRequest, acceptLanguage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Shipping creates a new shipping lines for an existing orden
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="shippingLinesRequest">requested field for a shipping lines</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ShippingLinesOrderResponse</returns>
        public Conekta.net.Client.ApiResponse<ShippingLinesOrderResponse> OrdersCreateShippingLinesWithHttpInfo(string id, ShippingLinesRequest shippingLinesRequest, string acceptLanguage = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'id' when calling ShippingsApi->OrdersCreateShippingLines");
            }

            // verify the required parameter 'shippingLinesRequest' is set
            if (shippingLinesRequest == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'shippingLinesRequest' when calling ShippingsApi->OrdersCreateShippingLines");
            }

            Conekta.net.Client.RequestOptions localVarRequestOptions = new Conekta.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.conekta-v2.1.0+json"
            };

            var localVarContentType = Conekta.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Conekta.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Conekta.net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Conekta.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            localVarRequestOptions.Data = shippingLinesRequest;

            localVarRequestOptions.Operation = "ShippingsApi.OrdersCreateShippingLines";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ShippingLinesOrderResponse>("/orders/{id}/shipping_lines", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrdersCreateShippingLines", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Shipping creates a new shipping lines for an existing orden
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="shippingLinesRequest">requested field for a shipping lines</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShippingLinesOrderResponse</returns>
        public async System.Threading.Tasks.Task<ShippingLinesOrderResponse> OrdersCreateShippingLinesAsync(string id, ShippingLinesRequest shippingLinesRequest, string acceptLanguage = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Conekta.net.Client.ApiResponse<ShippingLinesOrderResponse> localVarResponse = await OrdersCreateShippingLinesWithHttpInfoAsync(id, shippingLinesRequest, acceptLanguage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Shipping creates a new shipping lines for an existing orden
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="shippingLinesRequest">requested field for a shipping lines</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShippingLinesOrderResponse)</returns>
        public async System.Threading.Tasks.Task<Conekta.net.Client.ApiResponse<ShippingLinesOrderResponse>> OrdersCreateShippingLinesWithHttpInfoAsync(string id, ShippingLinesRequest shippingLinesRequest, string acceptLanguage = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'id' when calling ShippingsApi->OrdersCreateShippingLines");
            }

            // verify the required parameter 'shippingLinesRequest' is set
            if (shippingLinesRequest == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'shippingLinesRequest' when calling ShippingsApi->OrdersCreateShippingLines");
            }


            Conekta.net.Client.RequestOptions localVarRequestOptions = new Conekta.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.conekta-v2.1.0+json"
            };

            var localVarContentType = Conekta.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Conekta.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Conekta.net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Conekta.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            localVarRequestOptions.Data = shippingLinesRequest;

            localVarRequestOptions.Operation = "ShippingsApi.OrdersCreateShippingLines";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ShippingLinesOrderResponse>("/orders/{id}/shipping_lines", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrdersCreateShippingLines", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Shipping updates an existing shipping lines for an existing orden
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="shippingLinesId">identifier</param>
        /// <param name="shippingLinesRequest">requested field for a shipping lines</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ShippingLinesOrderResponse</returns>
        public ShippingLinesOrderResponse OrdersUpdateShippingLines(string id, string shippingLinesId, ShippingLinesRequest shippingLinesRequest, string acceptLanguage = default(string), int operationIndex = 0)
        {
            Conekta.net.Client.ApiResponse<ShippingLinesOrderResponse> localVarResponse = OrdersUpdateShippingLinesWithHttpInfo(id, shippingLinesId, shippingLinesRequest, acceptLanguage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Shipping updates an existing shipping lines for an existing orden
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="shippingLinesId">identifier</param>
        /// <param name="shippingLinesRequest">requested field for a shipping lines</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ShippingLinesOrderResponse</returns>
        public Conekta.net.Client.ApiResponse<ShippingLinesOrderResponse> OrdersUpdateShippingLinesWithHttpInfo(string id, string shippingLinesId, ShippingLinesRequest shippingLinesRequest, string acceptLanguage = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'id' when calling ShippingsApi->OrdersUpdateShippingLines");
            }

            // verify the required parameter 'shippingLinesId' is set
            if (shippingLinesId == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'shippingLinesId' when calling ShippingsApi->OrdersUpdateShippingLines");
            }

            // verify the required parameter 'shippingLinesRequest' is set
            if (shippingLinesRequest == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'shippingLinesRequest' when calling ShippingsApi->OrdersUpdateShippingLines");
            }

            Conekta.net.Client.RequestOptions localVarRequestOptions = new Conekta.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.conekta-v2.1.0+json"
            };

            var localVarContentType = Conekta.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Conekta.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Conekta.net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("shipping_lines_id", Conekta.net.Client.ClientUtils.ParameterToString(shippingLinesId)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Conekta.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            localVarRequestOptions.Data = shippingLinesRequest;

            localVarRequestOptions.Operation = "ShippingsApi.OrdersUpdateShippingLines";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ShippingLinesOrderResponse>("/orders/{id}/shipping_lines/{shipping_lines_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrdersUpdateShippingLines", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Shipping updates an existing shipping lines for an existing orden
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="shippingLinesId">identifier</param>
        /// <param name="shippingLinesRequest">requested field for a shipping lines</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShippingLinesOrderResponse</returns>
        public async System.Threading.Tasks.Task<ShippingLinesOrderResponse> OrdersUpdateShippingLinesAsync(string id, string shippingLinesId, ShippingLinesRequest shippingLinesRequest, string acceptLanguage = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Conekta.net.Client.ApiResponse<ShippingLinesOrderResponse> localVarResponse = await OrdersUpdateShippingLinesWithHttpInfoAsync(id, shippingLinesId, shippingLinesRequest, acceptLanguage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Shipping updates an existing shipping lines for an existing orden
        /// </summary>
        /// <exception cref="Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="shippingLinesId">identifier</param>
        /// <param name="shippingLinesRequest">requested field for a shipping lines</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShippingLinesOrderResponse)</returns>
        public async System.Threading.Tasks.Task<Conekta.net.Client.ApiResponse<ShippingLinesOrderResponse>> OrdersUpdateShippingLinesWithHttpInfoAsync(string id, string shippingLinesId, ShippingLinesRequest shippingLinesRequest, string acceptLanguage = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'id' when calling ShippingsApi->OrdersUpdateShippingLines");
            }

            // verify the required parameter 'shippingLinesId' is set
            if (shippingLinesId == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'shippingLinesId' when calling ShippingsApi->OrdersUpdateShippingLines");
            }

            // verify the required parameter 'shippingLinesRequest' is set
            if (shippingLinesRequest == null)
            {
                throw new Conekta.net.Client.ApiException(400, "Missing required parameter 'shippingLinesRequest' when calling ShippingsApi->OrdersUpdateShippingLines");
            }


            Conekta.net.Client.RequestOptions localVarRequestOptions = new Conekta.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.conekta-v2.1.0+json"
            };

            var localVarContentType = Conekta.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Conekta.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Conekta.net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("shipping_lines_id", Conekta.net.Client.ClientUtils.ParameterToString(shippingLinesId)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Conekta.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            localVarRequestOptions.Data = shippingLinesRequest;

            localVarRequestOptions.Operation = "ShippingsApi.OrdersUpdateShippingLines";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ShippingLinesOrderResponse>("/orders/{id}/shipping_lines/{shipping_lines_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrdersUpdateShippingLines", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
