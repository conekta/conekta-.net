/*
 * Conekta API
 *
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using Xunit;

using Conekta.net.Client;
using Conekta.net.Api;
using Conekta.net.Model;
using static Conekta.net.Model.PlanRequest;

namespace Conekta.net.Test.Api
{
    /// <summary>
    ///  Class for testing PlansApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class PlansApiTests
    {
        private readonly PlansApi _instance;

        public PlansApiTests()
        {
            Configuration configuration = new()
            {
                BasePath = BaseTest.BasePath,
                AccessToken = "key_uMxL6X1txuxyzQzJEXt72Aaaa"
            };
            _instance = new PlansApi(configuration);
        }


        /// <summary>
        /// Test an instance of PlansApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            Assert.IsType<PlansApi>(_instance);
        }

        /// <summary>
        /// Test CreatePlan
        /// </summary>
        [Fact]
        public void CreatePlanTest()
        {
            PlanRequest planRequest = new(
                name: "Gold Plan",
                amount: 10000,
                currency: "MXN",
                interval: IntervalEnum.Week,
                frequency: 1
            );

            var response = _instance.CreatePlan(planRequest);

            Assert.IsType<PlanResponse>(response);
            Assert.Null(response.ExpiryCount);
            Assert.True(response.Livemode);
            Assert.Equal(planRequest.Name, response.Name);
        }

        /// <summary>
        /// Test DeletePlan
        /// </summary>
        [Fact]
        public void DeletePlanTest()
        {
            var response = _instance.DeletePlan("plan_2tZb5q8Z3PYpg6SJd", "es");

            Assert.IsType<PlanResponse>(response);
        }

        /// <summary>
        /// Test GetPlan
        /// </summary>
        [Fact]
        public void GetPlanTest()
        {
            string id = "plan_2tZb5q8Z3PYpg6SJd";

            var response = _instance.GetPlan(id, "es");

            Assert.IsType<PlanResponse>(response);
            Assert.Equal(id, response.Id);
            Assert.Equal("MXN", response.Currency);
        }

        /// <summary>
        /// Test GetPlans
        /// </summary>
        [Fact]
        public void GetPlansTest()
        {
            var response = _instance.GetPlans("es",null, 20);

            Assert.IsType<GetPlansResponse>(response);
            Assert.Equal(10, response.Data.Count);
            Assert.False(response.HasMore);
            Assert.Null(response.NextPageUrl);
            Assert.Null(response.PreviousPageUrl);
        }

        /// <summary>
        /// Test UpdatePlan
        /// </summary>
        [Fact]
        public void UpdatePlanTest()
        {
            string id = "plan_2tZb5q8Z3PYpg6SJd";
            PlanUpdateRequest planUpdateRequest = new(
               name: "updated name"
            );

            var response = _instance.UpdatePlan(id, planUpdateRequest);

            Assert.IsType<PlanResponse>(response);
            Assert.Equal(planUpdateRequest.Name, response.Name);
            Assert.Equal(id, response.Id);
        }
    }
}
