/*
 * Conekta API
 *
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using Xunit;

using Conekta.net.Client;
using Conekta.net.Api;
using Conekta.net.Model;

namespace Conekta.net.Test.Api
{
    /// <summary>
    ///  Class for testing PaymentMethodsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class PaymentMethodsApiTests
    {
        private readonly PaymentMethodsApi _instance;

        public PaymentMethodsApiTests()
        {
            Configuration configuration = new Configuration()
            {
                BasePath = BaseTest.BasePath,
                AccessToken = "key_uMxL6X1txuxyzQzJEXt72A"
            };
            _instance = new PaymentMethodsApi(configuration);
        }

        /// <summary>
        /// Test an instance of PaymentMethodsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            Assert.IsType<PaymentMethodsApi>(_instance);
        }

        /// <summary>
        /// Test CreateCustomerPaymentMethods
        /// </summary>
        [Fact]
        public void CreateCustomerPaymentMethodsTest()
        {
            string id = "cus_2tXyF9BwPG14UMkkg";
            CreateCustomerPaymentMethodsRequest createCustomerPaymentMethodRequest = new CreateCustomerPaymentMethodsRequest(
                new PaymentMethodCashRequest("oxxo_recurrent")
            );
            var response = _instance.CreateCustomerPaymentMethods(id, createCustomerPaymentMethodRequest);

            Assert.IsType<CreateCustomerPaymentMethodsResponse>(response);
            Assert.IsType<PaymentMethodCashResponse>(response.ActualInstance);
            Assert.Equal(id, response.GetPaymentMethodCashResponse().ParentId);
            Assert.False(string.IsNullOrEmpty(response.GetPaymentMethodCashResponse().Id));
            Assert.False(string.IsNullOrEmpty(response.GetPaymentMethodCashResponse().BarcodeUrl));
        }

        /// <summary>
        /// Test DeleteCustomerPaymentMethods
        /// </summary>
        [Fact]
        public void DeleteCustomerPaymentMethodsTest()
        {
            string id = "cus_2tZWxbTPtQgGJGh8P";
            string paymentId = "src_2tZWxbTPtQgGJGh8R";

            var response = _instance.DeleteCustomerPaymentMethods(id, paymentId, "en");

            Assert.IsType<UpdateCustomerPaymentMethodsResponse>(response);
            Assert.Equal(id, response.GetPaymentMethodCardResponse().ParentId);
            Assert.Equal(paymentId, response.GetPaymentMethodCardResponse().Id);
        }

        /// <summary>
        /// Test UpdateCustomerPaymentMethods
        /// </summary>
        [Fact]
        public void UpdateCustomerPaymentMethodTest()
        {
            string id = "cus_2tZWxbTPtQgGJGh8P";
            string paymentId = "src_2tZWxbTPtQgGJGh8R";
            UpdatePaymentMethods updatePaymentMethods = new UpdatePaymentMethods( 
               name: "name of person"
            );
            var response = _instance.UpdateCustomerPaymentMethods(id, paymentId, updatePaymentMethods);

            Assert.IsType<UpdateCustomerPaymentMethodsResponse>(response);
            Assert.Equal(updatePaymentMethods.Name, response.GetPaymentMethodCardResponse().Name);
            Assert.Equal(id, response.GetPaymentMethodCardResponse().ParentId);
            Assert.Equal(paymentId, response.GetPaymentMethodCardResponse().Id);
        }
        /// <summary>
        /// Test GetCustomerPaymentMethods
        /// </summary>
        [Fact]
        public void GetCustomerPaymentMethodsTest()
        {
            var getPaymentMethodsResponse = _instance.GetCustomerPaymentMethods("src_2tbd5Bgy67RL9oycM");

            Assert.IsType<GetPaymentMethodResponse>(getPaymentMethodsResponse);
            Assert.Equal("src_2tbd5Bgy67RL9oycM", getPaymentMethodsResponse.Data[0].GetPaymentMethodCardResponse().Id);
            Assert.IsType<PaymentMethodCardResponse>(getPaymentMethodsResponse.Data[0].ActualInstance);
            Assert.Null(getPaymentMethodsResponse.NextPageUrl);
            Assert.Null(getPaymentMethodsResponse.PreviousPageUrl);
            Assert.False(getPaymentMethodsResponse.HasMore);
        }
    }
}
