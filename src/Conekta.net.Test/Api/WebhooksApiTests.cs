/*
 * Conekta API
 *
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using Xunit;

using Conekta.net.Client;
using Conekta.net.Api;
using Conekta.net.Model;

namespace Conekta.net.Test.Api
{
    /// <summary>
    ///  Class for testing WebhooksApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class WebhooksApiTests
    {
        private readonly WebhooksApi _instance;

        public WebhooksApiTests()
        {
            Configuration configuration = new()
            {
                BasePath = BaseTest.BasePath,
                AccessToken = "key_uMxL6X1txuxyzQzJEXt72Aaaa"
            };
            _instance = new WebhooksApi(configuration);
        }

        /// <summary>
        /// Test an instance of WebhooksApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            Assert.IsType<WebhooksApi>(_instance);
        }

        /// <summary>
        /// Test CreateWebhook
        /// </summary>
        [Fact]
        public void CreateWebhookTest()
        {
            WebhookRequest webhookRequest = new("https://webhook.site/0b8c9fa8-92c3-4a04-beea-a7ec037f6466", false);

            var response = _instance.CreateWebhook(webhookRequest);

            Assert.IsType<WebhookResponse>(response);
            Assert.Equal("listening", response.Status);
            Assert.Equal(webhookRequest.Synchronous, response.Synchronous);
            Assert.Equal("641b1d5662d7e00001eaa46b", response.Id);
            Assert.Equal(webhookRequest.Url, response.Url);
            Assert.Contains("charge.created", response.SubscribedEvents);
            Assert.True(response.ProductionEnabled);
            Assert.False(response.DevelopmentEnabled);
        }

        /// <summary>
        /// Test DeleteWebhook
        /// </summary>
        [Fact]
        public void DeleteWebhookTest()
        {
            string id = "641b1d5662d7e00001eaa46b";

            var response = _instance.DeleteWebhook(id, "es");

            Assert.IsType<WebhookResponse>(response);
            Assert.Equal(id, response.Id);
            Assert.True(response.Deleted);
        }

        /// <summary>
        /// Test GetWebhook
        /// </summary>
        [Fact]
        public void GetWebhookTest()
        {
            string id = "641b1d5662d7e00001eaa46b";
            var response = _instance.GetWebhook(id, "es");

            Assert.IsType<WebhookResponse>(response);
            Assert.Equal(id, response.Id);
            Assert.Equal("listening", response.Status);
        }

        /// <summary>
        /// Test GetWebhooks
        /// </summary>
        [Fact]
        public void GetWebhooksTest()
        {
            var response = _instance.GetWebhooks("es", null, 20);

            Assert.IsType<GetWebhooksResponse>(response);
            Assert.Equal(2, response.Data.Count);
            Assert.Null(response.NextPageUrl);
            Assert.Null(response.PreviousPageUrl);
            Assert.False(response.HasMore);
            Assert.Equal("list", response.Object);
        }

        /// <summary>
        /// Test UpdateWebhook
        /// </summary>
        [Fact]
        public void UpdateWebhookTest()
        {
            string id = "641b1d5662d7e00001eaa46b";
            WebhookUpdateRequest webhookRequest = new("https://updated.webhook.site/0b8c9fa8-92c3-4a04-beea-a7ec037f6466", false);

            var response = _instance.UpdateWebhook(id, webhookRequest);

            Assert.IsType<WebhookResponse>(response);
            Assert.Equal(webhookRequest.Url, response.Url);
            Assert.Equal("intermittent_errors", response.Status);
            Assert.Equal(id, response.Id);
        }
    }
}
