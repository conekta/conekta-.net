/*
 * Conekta API
 *
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using Xunit;

using Conekta.net.Client;
using Conekta.net.Api;
using Conekta.net.Model;

namespace Conekta.net.Test.Api
{
    /// <summary>
    ///  Class for testing WebhookKeysApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class WebhookKeysApiTests
    {
        private readonly WebhookKeysApi _instance;

        public WebhookKeysApiTests()
        {
            Configuration configuration = new()
            {
                BasePath = BaseTest.BasePath,
                AccessToken = "key_uMxL6X1txuxyzQzJEXt72Aaaa"
            };
            _instance = new WebhookKeysApi(configuration);
        }

        /// <summary>
        /// Test an instance of WebhookKeysApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            Assert.IsType<WebhookKeysApi>(_instance);
        }

        /// <summary>
        /// Test CreateWebhookKey
        /// </summary>
        [Fact]
        public void CreateWebhookKeyTest()
        {
            WebhookKeyRequest webhookKeyRequest = new();
            var response = _instance.CreateWebhookKey( webhookKeyRequest: webhookKeyRequest);
            
            Assert.IsType<WebhookKeyCreateResponse>(response);
            Assert.True(response.Livemode);
            Assert.Equal("645a59da22e7da0001cad283", response.Id);
        }

        /// <summary>
        /// Test DeleteWebhookKey
        /// </summary>
        [Fact]
        public void DeleteWebhookKeyTest()
        {
            const string id = "645a59da22e7da0001cad283";
            var response = _instance.DeleteWebhookKey(id);
            
            Assert.IsType<WebhookKeyDeleteResponse>(response);
            Assert.Equal(id, response.Id);
            Assert.False(response.Active);
            Assert.True(response.Deleted);
        }

        /// <summary>
        /// Test GetWebhookKeyActive
        /// </summary>
        [Fact]
        public void GetWebhookKeyActiveTest()
        {
            const string id = "645a5eb022e7da0001cad2a4";
            
            var response = _instance.GetWebhookKey(id);
            
            Assert.IsType<WebhookKeyResponse>(response);
            Assert.Equal(id, response.Id);
            Assert.True(response.Active);
            Assert.Null(response.DeactivatedAt);
        }
        /// <summary>
        /// Test GetWebhookKeyActive
        /// </summary>
        [Fact]
        public void GetWebhookKeyDeleteTest()
        {
            const string id = "635594352a1979000185a36a";
            
            var response = _instance.GetWebhookKey(id);
            
            Assert.IsType<WebhookKeyResponse>(response);
            Assert.Equal(id, response.Id);
            Assert.False(response.Active);
            Assert.NotNull(response.DeactivatedAt);
        }

        /// <summary>
        /// Test GetWebhookKeys
        /// </summary>
        [Fact]
        public void GetWebhookKeysTest()
        {
            const int limit = 2;
            var response = _instance.GetWebhookKeys(limit:limit);
            
            Assert.IsType<GetWebhookKeysResponse>(response);
            Assert.Equal(limit, response.Data.Count);
            Assert.False(response.HasMore);
            Assert.Null(response.NextPageUrl);
            Assert.Null(response.PreviousPageUrl);
        }

        /// <summary>
        /// Test UpdateWebhookKey
        /// </summary>
        [Fact]
        public void UpdateWebhookKeyTest()
        {
            const string id = "645a613622e7da0001cad882";
            WebhookKeyUpdateRequest request = new();
            
            var response = _instance.UpdateWebhookKey(id :id,  webhookKeyUpdateRequest: request);
            
            Assert.IsType<WebhookKeyResponse>(response);
            Assert.Equal(id, response.Id);
            Assert.False(response.Active);
            Assert.NotNull(response.DeactivatedAt);
        }
    }
}
