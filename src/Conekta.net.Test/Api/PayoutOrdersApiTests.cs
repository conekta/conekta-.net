/*
 * Conekta API
 *
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.2.0
 * Contact: engineering@conekta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Conekta.net.Client;
using Conekta.net.Api;
// uncomment below to import models
//using Conekta.net.Model;

namespace Conekta.net.Test.Api
{
    /// <summary>
    ///  Class for testing PayoutOrdersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class PayoutOrdersApiTests : IDisposable
    {
        private PayoutOrdersApi instance;

        public PayoutOrdersApiTests()
        {
            instance = new PayoutOrdersApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of PayoutOrdersApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' PayoutOrdersApi
            //Assert.IsType<PayoutOrdersApi>(instance);
        }

        /// <summary>
        /// Test CancelPayoutOrderById
        /// </summary>
        [Fact]
        public void CancelPayoutOrderByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string acceptLanguage = null;
            //var response = instance.CancelPayoutOrderById(id, acceptLanguage);
            //Assert.IsType<PayoutOrderResponse>(response);
        }

        /// <summary>
        /// Test CreatePayoutOrder
        /// </summary>
        [Fact]
        public void CreatePayoutOrderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PayoutOrder payoutOrder = null;
            //string acceptLanguage = null;
            //var response = instance.CreatePayoutOrder(payoutOrder, acceptLanguage);
            //Assert.IsType<PayoutOrderResponse>(response);
        }

        /// <summary>
        /// Test GetPayoutOrderById
        /// </summary>
        [Fact]
        public void GetPayoutOrderByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string acceptLanguage = null;
            //var response = instance.GetPayoutOrderById(id, acceptLanguage);
            //Assert.IsType<PayoutOrderResponse>(response);
        }

        /// <summary>
        /// Test GetPayoutOrders
        /// </summary>
        [Fact]
        public void GetPayoutOrdersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string acceptLanguage = null;
            //int? limit = null;
            //string search = null;
            //string next = null;
            //string previous = null;
            //var response = instance.GetPayoutOrders(acceptLanguage, limit, search, next, previous);
            //Assert.IsType<PayoutOrdersResponse>(response);
        }
    }
}
