/*
 * Conekta API
 *
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System.Collections.Generic;
using Xunit;

using Conekta.net.Client;
using Conekta.net.Api;
using Conekta.net.Model;

// uncomment below to import models
//using Conekta.net.Model;

namespace Conekta.net.Test.Api
{
    /// <summary>
    ///  Class for testing PayoutOrdersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class PayoutOrdersApiTests
    {
        private  readonly  PayoutOrdersApi  _instance;

        public PayoutOrdersApiTests()
        {
            Configuration configuration = new()
            {
                BasePath = BaseTest.BasePath,
                AccessToken = "key_uMxL6X1txuxyzQzJEXt72Aaaa"
            };
            _instance = new PayoutOrdersApi(configuration);
        }

        /// <summary>
        /// Test an instance of PayoutOrdersApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            Assert.IsType<PayoutOrdersApi>(_instance);
        }

        /// <summary>
        /// Test CreatePayoutOrder
        /// </summary>
        [Fact]
        public void CreatePayoutOrderTest()
        {
            PayoutOrder payoutOrder = new(
                currency : "MXN",
                amount : 3000,
                reason : "Payout order description",
                allowedPayoutMethods : new List<string> { "cashout" },
                customerInfo: new CustomerInfoJustCustomerId("cus_2f3r56f3r56f3r56f"),
                payout: new Payout(new PayoutMethod("cashout"))
            );
            
            var response = _instance.CreatePayoutOrder(payoutOrder);
            
            Assert.IsType<PayoutOrderResponse>(response);
            Assert.Equal(payoutOrder.Amount, response.Amount);
            Assert.NotNull(response.Id);
        }

        /// <summary>
        /// Test GetPayoutOrderById
        /// </summary>
        [Fact]
        public void GetPayoutOrderByIdTest()
        {
            const string id = "f2654d66-d740-457a-9a8c-f96b5196f44e";
            
            var response = _instance.GetPayoutOrderById(id, "es");
            
            Assert.IsType<PayoutOrderResponse>(response);
            Assert.Equal(id, response.Id);
            Assert.Equal(3000, response.Amount);
        }

        /// <summary>
        /// Test GetPayoutOrders
        /// </summary>
        [Fact]
        public void GetPayoutOrdersTest()
        {
            string acceptLanguage = "es";
            
            var response = _instance.GetPayoutOrders(acceptLanguage);
            
            Assert.IsType<PayoutOrdersResponse>(response);
            Assert.False(response.HasMore);
            Assert.Null(response.NextPageUrl);
            Assert.Null(response.PreviousPageUrl);
            Assert.Equal(3000, response.Data[0].Amount);
            Assert.NotNull(response.Data[0].Id);
            Assert.Equal(1710345479, response.Data[0].ExpiresAt);
        }
    }
}
