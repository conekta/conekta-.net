/*
 * Conekta API
 *
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using Xunit;

using Conekta.net.Client;
using Conekta.net.Api;
using Conekta.net.Model; 

namespace Conekta.net.Test.Api
{
    /// <summary>
    ///  Class for testing ApiKeysApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ApiKeysApiTests
    {
        private readonly ApiKeysApi _instance;

        public ApiKeysApiTests()
        {
            Configuration configuration = new()
            {
                BasePath = BaseTest.BasePath,
                AccessToken = "key_uMxL6X1txuxyzQzJEXt72Aaaa"
            };
            _instance = new ApiKeysApi(configuration);
        }

        /// <summary>
        /// Test an instance of ApiKeysApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            Assert.IsType<ApiKeysApi>(_instance);
        }

        /// <summary>
        /// Test CreateApiKey
        /// </summary>
        [Fact]
        public void CreateApiKeyTest()
        {
            var apiKeyRequest = new ApiKeyRequest("test", "private");

            var response = _instance.CreateApiKey(apiKeyRequest, "es");

            Assert.IsType<ApiKeyCreateResponse>(response);
            Assert.Equal("64625cc9f3e02c00163f5e4d", response.Id);
            Assert.Equal("key_rpHzxufNgjFCdprEEFZRTKi", response.AuthenticationToken);
            Assert.Equal("api_key", response.Object);
            Assert.Equal(apiKeyRequest.Role, response.Role);
        }

        /// <summary>
        /// Test DeleteApiKey
        /// </summary>
        [Fact]
        public void DeleteApiKeyTest()
        {
            string id = "64625cc9f3e02c00163f5e4d";
            
            var response = _instance.DeleteApiKey(id, "es");
            
            Assert.IsType<DeleteApiKeysResponse>(response);
            Assert.True(response.Deleted);
            Assert.Equal(id, response.Id);
        }

        /// <summary>
        /// Test GetApiKey
        /// </summary>
        [Fact]
        public void GetApiKeyTest()
        {
            string id = "64625cc9f3e02c00163f5e4d";

            var response = _instance.GetApiKey(id, "es");

            Assert.IsType<ApiKeyResponse>(response);
            Assert.Equal(id, response.Id);
            Assert.Equal("api_key", response.Object);
        }

        /// <summary>
        /// Test GetApiKeys
        /// </summary>
        [Fact]
        public void GetApiKeysTest()
        {
            string acceptLanguage = "es";

            var response = _instance.GetApiKeys(acceptLanguage, null, 20);

            Assert.IsType<GetApiKeysResponse>(response);
            Assert.False(response.HasMore);
            Assert.Single(response.Data);
            Assert.Equal("64625cc9f3e02c00163f5e4d", response.Data[0].Id);
            Assert.IsType<ApiKeyResponse>(response.Data[0]);
        }

        /// <summary>
        /// Test UpdateApiKey
        /// </summary>
        [Fact]
        public void UpdateApiKeyTest()
        {
            const string id = "64625cc9f3e02c00163f5e4d";
            ApiKeyUpdateRequest apiKeyUpdateRequest = new()
            {
                Description = "online store"
            };

            var response = _instance.UpdateApiKey(id, "es", apiKeyUpdateRequest);

            Assert.IsType<ApiKeyResponse>(response);
            Assert.Equal(id, response.Id);
            Assert.Equal("online store", response.Description);
        }
    }
}
