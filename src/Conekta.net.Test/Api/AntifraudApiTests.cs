/*
 * Conekta API
 *
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using Xunit;

using Conekta.net.Client;
using Conekta.net.Api;
using Conekta.net.Model;
using System.Collections.Generic;

namespace Conekta.net.Test.Api
{
    /// <summary>
    ///  Class for testing AntifraudApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class AntifraudApiTests
    {
        private readonly AntifraudApi _instance;

        public AntifraudApiTests()
        {
            Configuration configuration = new Configuration()
            {
                BasePath = BaseTest.BasePath,
                AccessToken = "key_uMxL6X1txuxyzQzJEXt72Aaaaba"
            };
            _instance = new AntifraudApi(configuration);
        }
        /// <summary>
        /// Test an instance of AntifraudApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            Assert.IsType<AntifraudApi>(_instance);
        }

        /// <summary>
        /// Test CreateRuleBlacklist
        /// </summary>
        [Fact]
        public void CreateRuleBlacklistTest()
        {
            CreateRiskRulesData createRiskRulesData = new CreateRiskRulesData (
                    description: "test description",
                    field: "email",
                    value: "fcarrero_black@gmail.com"
                );
            
            var response = _instance.CreateRuleBlacklist(createRiskRulesData);
            
            Assert.IsType<BlacklistRuleResponse>(response);
            Assert.Equal(createRiskRulesData.Value, response.Value);
            Assert.Equal(createRiskRulesData.Field, response.Field);
        }

        /// <summary>
        /// Test CreateRuleWhitelist
        /// </summary>
        [Fact]
        public void CreateRuleWhitelistTest()
        {
           CreateRiskRulesData createRiskRulesData = new CreateRiskRulesData(
                    description: "test description",
                    field: "email",
                    value: "fcarrero@gmail.com"
                );
            var response = _instance.CreateRuleWhitelist("es", createRiskRulesData);
            
            Assert.IsType<WhitelistlistRuleResponse>(response);
            Assert.Equal(createRiskRulesData.Value, response.Value);
            Assert.Equal("618c3f30db8b8da9be376b17", response.Id);
            Assert.Equal(createRiskRulesData.Field, response.Field);
            Assert.Equal(createRiskRulesData.Description, response.Description);
        }

        /// <summary>s
        /// Test DeleteRuleBlacklist
        /// </summary>
        [Fact]
        public void DeleteRuleBlacklistTest()
        {   
            string id = "618c3f30db8b8da9be376b1e";
            var response = _instance.DeleteRuleBlacklist(id);
            
            Assert.IsType<DeletedBlacklistRuleResponse>(response);
            Assert.Equal(id, response.Id);
        }

        /// <summary>
        /// Test DeleteRuleWhitelist
        /// </summary>
        [Fact]
        public void DeleteRuleWhitelistTest()
        {
            string id = "618c3f2fdb8b8da9be376afe";
            var response = _instance.DeleteRuleWhitelist(id);
            
            Assert.IsType<DeletedWhitelistRuleResponse>(response);
            Assert.Equal(id, response.Id);
            Assert.Equal("email", response.Field);
            Assert.Equal("ramirez_2402@hotmail.com", response.Value);
        }

        /// <summary>
        /// Test GetRuleBlacklist
        /// </summary>
        [Fact]
        public void GetRuleBlacklistTest()
        {
            var response = _instance.GetRuleBlacklist();
            
            Assert.IsType<RiskRulesList>(response);
            Assert.Equal(25, response.Data.Count);
            Assert.True(response.HasMore);
            Assert.IsType<List<RiskRulesData>>(response.Data);
            Assert.Equal("email", response.Data[0].Field);
        }

        /// <summary>
        /// Test GetRuleWhitelist
        /// </summary>
        [Fact]
        public void GetRuleWhitelistTest()
        {
            var response = _instance.GetRuleWhitelist();
            
            Assert.IsType<RiskRulesList>(response);
            Assert.Equal(25, response.Data.Count);
            Assert.True(response.HasMore);
        }
    }
}
