/*
 * Conekta API
 *
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Conekta.net.Client;
using Conekta.net.Api;
using Conekta.net.Model;

namespace Conekta.net.Test.Api
{
    /// <summary>
    ///  Class for testing ShippingContactsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ShippingContactsApiTests
    {
        private readonly ShippingContactsApi _instance;

        public ShippingContactsApiTests()
        {
            Configuration configuration = new()
            {
                BasePath = BaseTest.BasePath,
                AccessToken = "key_uMxL6X1txuxyzQzJEXt72A"
            };
            _instance = new ShippingContactsApi(configuration);
        }



        /// <summary>
        /// Test an instance of ShippingContactsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            Assert.IsType<ShippingContactsApi>(_instance);
        }

        /// <summary>
        /// Test CreateCustomerShippingContacts
        /// </summary>
        [Fact]
        public void CreateCustomerShippingContactsTest()
        {
            string id = "cus_2tXyF9BwPG14UMkkg";
            CustomerShippingContacts customerShippingContacts =
                new(
                    address: new CustomerShippingContactsAddress(
                        street1: "av siem",
                        city: "mexico",
                        country: "MX",
                        postalCode: "11000"
                    ),
                    phone: "1234567890",
                    receiver: "receiver"
                    );

            var response = _instance.CreateCustomerShippingContacts(id, customerShippingContacts);

            Assert.IsType<CustomerShippingContactsResponse>(response);
            Assert.Equal(id, response.ParentId);
            Assert.NotStrictEqual(customerShippingContacts.Address.Country, response.Address.Country);
            Assert.False(string.IsNullOrEmpty(response.Id));
            Assert.Equal(1679009479, response.CreatedAt);
        }

        /// <summary>
        /// Test UpdateCustomerShippingContacts
        /// </summary>
        [Fact]
        public void UpdateCustomerShippingContactsTest()
        {
            string id = "cus_2tZWxbTPtQgGJGh8P";
            string shippingContactsId = "ship_cont_2tZWzJPBf87C6TcoQ";
            CustomerUpdateShippingContacts customerShippingContacts = new(
                phone: "3143145050"
            );

            var response = _instance.UpdateCustomerShippingContacts(id, shippingContactsId, customerShippingContacts);

            Assert.IsType<CustomerShippingContactsResponse>(response);
            Assert.Equal(customerShippingContacts.Phone, response.Phone);
            Assert.Equal(id, response.ParentId);
            Assert.Equal(shippingContactsId, response.Id);
            Assert.False(response.VarDefault);
        }
    }
}
