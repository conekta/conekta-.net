/*
 * Conekta API
 *
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.2.0
 * Contact: engineering@conekta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Conekta.net.Client;
using Conekta.net.Api;
// uncomment below to import models
//using Conekta.net.Model;

namespace Conekta.net.Test.Api
{
    /// <summary>
    ///  Class for testing OrdersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class OrdersApiTests : IDisposable
    {
        private OrdersApi instance;

        public OrdersApiTests()
        {
            instance = new OrdersApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of OrdersApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' OrdersApi
            //Assert.IsType<OrdersApi>(instance);
        }

        /// <summary>
        /// Test CancelOrder
        /// </summary>
        [Fact]
        public void CancelOrderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string acceptLanguage = null;
            //string xChildCompanyId = null;
            //var response = instance.CancelOrder(id, acceptLanguage, xChildCompanyId);
            //Assert.IsType<OrderResponse>(response);
        }

        /// <summary>
        /// Test CreateOrder
        /// </summary>
        [Fact]
        public void CreateOrderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //OrderRequest orderRequest = null;
            //string acceptLanguage = null;
            //string xChildCompanyId = null;
            //var response = instance.CreateOrder(orderRequest, acceptLanguage, xChildCompanyId);
            //Assert.IsType<OrderResponse>(response);
        }

        /// <summary>
        /// Test GetOrderById
        /// </summary>
        [Fact]
        public void GetOrderByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string acceptLanguage = null;
            //string xChildCompanyId = null;
            //var response = instance.GetOrderById(id, acceptLanguage, xChildCompanyId);
            //Assert.IsType<OrderResponse>(response);
        }

        /// <summary>
        /// Test GetOrders
        /// </summary>
        [Fact]
        public void GetOrdersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string acceptLanguage = null;
            //string xChildCompanyId = null;
            //int? limit = null;
            //string search = null;
            //string next = null;
            //string previous = null;
            //string paymentStatus = null;
            //string lastPaymentInfoStatus = null;
            //long? createdAt = null;
            //long? createdAtGte = null;
            //long? createdAtLte = null;
            //long? updatedAtGte = null;
            //long? updatedAtLte = null;
            //var response = instance.GetOrders(acceptLanguage, xChildCompanyId, limit, search, next, previous, paymentStatus, lastPaymentInfoStatus, createdAt, createdAtGte, createdAtLte, updatedAtGte, updatedAtLte);
            //Assert.IsType<GetOrdersResponse>(response);
        }

        /// <summary>
        /// Test OrderCancelRefund
        /// </summary>
        [Fact]
        public void OrderCancelRefundTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string refundId = null;
            //string acceptLanguage = null;
            //string xChildCompanyId = null;
            //var response = instance.OrderCancelRefund(id, refundId, acceptLanguage, xChildCompanyId);
            //Assert.IsType<OrderResponse>(response);
        }

        /// <summary>
        /// Test OrderRefund
        /// </summary>
        [Fact]
        public void OrderRefundTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //OrderRefundRequest orderRefundRequest = null;
            //string acceptLanguage = null;
            //string xChildCompanyId = null;
            //var response = instance.OrderRefund(id, orderRefundRequest, acceptLanguage, xChildCompanyId);
            //Assert.IsType<OrderResponse>(response);
        }

        /// <summary>
        /// Test OrdersCreateCapture
        /// </summary>
        [Fact]
        public void OrdersCreateCaptureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string acceptLanguage = null;
            //string xChildCompanyId = null;
            //OrderCaptureRequest orderCaptureRequest = null;
            //var response = instance.OrdersCreateCapture(id, acceptLanguage, xChildCompanyId, orderCaptureRequest);
            //Assert.IsType<OrderResponse>(response);
        }

        /// <summary>
        /// Test UpdateOrder
        /// </summary>
        [Fact]
        public void UpdateOrderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //OrderUpdateRequest orderUpdateRequest = null;
            //string acceptLanguage = null;
            //var response = instance.UpdateOrder(id, orderUpdateRequest, acceptLanguage);
            //Assert.IsType<OrderResponse>(response);
        }
    }
}
