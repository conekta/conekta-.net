/*
 * Conekta API
 *
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.2.0
 * Contact: engineering@conekta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Conekta.net.Client;
using Conekta.net.Api;
// uncomment below to import models
//using Conekta.net.Model;

namespace Conekta.net.Test.Api
{
    /// <summary>
    ///  Class for testing SubscriptionsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class SubscriptionsApiTests : IDisposable
    {
        private SubscriptionsApi instance;

        public SubscriptionsApiTests()
        {
            instance = new SubscriptionsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of SubscriptionsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' SubscriptionsApi
            //Assert.IsType<SubscriptionsApi>(instance);
        }

        /// <summary>
        /// Test CancelSubscription
        /// </summary>
        [Fact]
        public void CancelSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string acceptLanguage = null;
            //string xChildCompanyId = null;
            //var response = instance.CancelSubscription(id, acceptLanguage, xChildCompanyId);
            //Assert.IsType<SubscriptionResponse>(response);
        }

        /// <summary>
        /// Test CreateSubscription
        /// </summary>
        [Fact]
        public void CreateSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //SubscriptionRequest subscriptionRequest = null;
            //string acceptLanguage = null;
            //string xChildCompanyId = null;
            //var response = instance.CreateSubscription(id, subscriptionRequest, acceptLanguage, xChildCompanyId);
            //Assert.IsType<SubscriptionResponse>(response);
        }

        /// <summary>
        /// Test GetSubscription
        /// </summary>
        [Fact]
        public void GetSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string acceptLanguage = null;
            //var response = instance.GetSubscription(id, acceptLanguage);
            //Assert.IsType<SubscriptionResponse>(response);
        }

        /// <summary>
        /// Test GetSubscriptionEvents
        /// </summary>
        [Fact]
        public void GetSubscriptionEventsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string acceptLanguage = null;
            //string xChildCompanyId = null;
            //var response = instance.GetSubscriptionEvents(id, acceptLanguage, xChildCompanyId);
            //Assert.IsType<SubscriptionEventsResponse>(response);
        }

        /// <summary>
        /// Test PauseSubscription
        /// </summary>
        [Fact]
        public void PauseSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string acceptLanguage = null;
            //string xChildCompanyId = null;
            //var response = instance.PauseSubscription(id, acceptLanguage, xChildCompanyId);
            //Assert.IsType<SubscriptionResponse>(response);
        }

        /// <summary>
        /// Test ResumeSubscription
        /// </summary>
        [Fact]
        public void ResumeSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string acceptLanguage = null;
            //string xChildCompanyId = null;
            //var response = instance.ResumeSubscription(id, acceptLanguage, xChildCompanyId);
            //Assert.IsType<SubscriptionResponse>(response);
        }

        /// <summary>
        /// Test SubscriptionCancel
        /// </summary>
        [Fact]
        public void SubscriptionCancelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerId = null;
            //string id = null;
            //string acceptLanguage = null;
            //string xChildCompanyId = null;
            //var response = instance.SubscriptionCancel(customerId, id, acceptLanguage, xChildCompanyId);
            //Assert.IsType<SubscriptionResponse>(response);
        }

        /// <summary>
        /// Test SubscriptionCreate
        /// </summary>
        [Fact]
        public void SubscriptionCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerId = null;
            //SubscriptionRequest subscriptionRequest = null;
            //string acceptLanguage = null;
            //string xChildCompanyId = null;
            //var response = instance.SubscriptionCreate(customerId, subscriptionRequest, acceptLanguage, xChildCompanyId);
            //Assert.IsType<SubscriptionResponse>(response);
        }

        /// <summary>
        /// Test SubscriptionEvents
        /// </summary>
        [Fact]
        public void SubscriptionEventsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerId = null;
            //string id = null;
            //string acceptLanguage = null;
            //string xChildCompanyId = null;
            //int? limit = null;
            //string search = null;
            //string next = null;
            //string previous = null;
            //var response = instance.SubscriptionEvents(customerId, id, acceptLanguage, xChildCompanyId, limit, search, next, previous);
            //Assert.IsType<SubscriptionEventsResponse>(response);
        }

        /// <summary>
        /// Test SubscriptionList
        /// </summary>
        [Fact]
        public void SubscriptionListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerId = null;
            //string acceptLanguage = null;
            //string xChildCompanyId = null;
            //int? limit = null;
            //string search = null;
            //string next = null;
            //string previous = null;
            //var response = instance.SubscriptionList(customerId, acceptLanguage, xChildCompanyId, limit, search, next, previous);
            //Assert.IsType<SubscriptionResponse>(response);
        }

        /// <summary>
        /// Test SubscriptionPause
        /// </summary>
        [Fact]
        public void SubscriptionPauseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerId = null;
            //string id = null;
            //string acceptLanguage = null;
            //string xChildCompanyId = null;
            //var response = instance.SubscriptionPause(customerId, id, acceptLanguage, xChildCompanyId);
            //Assert.IsType<SubscriptionResponse>(response);
        }

        /// <summary>
        /// Test SubscriptionResume
        /// </summary>
        [Fact]
        public void SubscriptionResumeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerId = null;
            //string id = null;
            //string acceptLanguage = null;
            //string xChildCompanyId = null;
            //var response = instance.SubscriptionResume(customerId, id, acceptLanguage, xChildCompanyId);
            //Assert.IsType<SubscriptionResponse>(response);
        }

        /// <summary>
        /// Test SubscriptionUpdate
        /// </summary>
        [Fact]
        public void SubscriptionUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerId = null;
            //string id = null;
            //SubscriptionUpdateRequest subscriptionUpdateRequest = null;
            //string acceptLanguage = null;
            //string xChildCompanyId = null;
            //var response = instance.SubscriptionUpdate(customerId, id, subscriptionUpdateRequest, acceptLanguage, xChildCompanyId);
            //Assert.IsType<SubscriptionResponse>(response);
        }

        /// <summary>
        /// Test SubscriptionsGet
        /// </summary>
        [Fact]
        public void SubscriptionsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerId = null;
            //string id = null;
            //string acceptLanguage = null;
            //string xChildCompanyId = null;
            //var response = instance.SubscriptionsGet(customerId, id, acceptLanguage, xChildCompanyId);
            //Assert.IsType<SubscriptionResponse>(response);
        }

        /// <summary>
        /// Test SubscriptionsRetry
        /// </summary>
        [Fact]
        public void SubscriptionsRetryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerId = null;
            //string id = null;
            //string acceptLanguage = null;
            //string xChildCompanyId = null;
            //var response = instance.SubscriptionsRetry(customerId, id, acceptLanguage, xChildCompanyId);
            //Assert.IsType<SubscriptionResponse>(response);
        }

        /// <summary>
        /// Test UpdateSubscription
        /// </summary>
        [Fact]
        public void UpdateSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //SubscriptionUpdateRequest subscriptionUpdateRequest = null;
            //string acceptLanguage = null;
            //string xChildCompanyId = null;
            //var response = instance.UpdateSubscription(id, subscriptionUpdateRequest, acceptLanguage, xChildCompanyId);
            //Assert.IsType<SubscriptionResponse>(response);
        }
    }
}
